<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>ZephyrHe</title><link>https://hezephyr.github.io/</link><description>HeZephyr's Note Zephyr He的博客：日拱一卒无有尽，功不唐捐终入海</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>unique.hzf@gmail.com (HeZephyr)</managingEditor><webMaster>unique.hzf@gmail.com (HeZephyr)</webMaster><copyright>本站内容采用 CC BY-NC-SA 4.0 国际许可协议。</copyright><lastBuildDate>Sat, 26 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://hezephyr.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>配置和排查 Lombok 在 IDEA 中使用的详细步骤</title><link>https://hezephyr.github.io/posts/06.%E9%85%8D%E7%BD%AE%E5%92%8C%E6%8E%92%E6%9F%A5lombok%E5%9C%A8idea%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</link><pubDate>Sat, 26 Oct 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/06.%E9%85%8D%E7%BD%AE%E5%92%8C%E6%8E%92%E6%9F%A5lombok%E5%9C%A8idea%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/</guid><description><![CDATA[<p>在日常开发中，Java 代码常常需要大量的样板代码，比如 <code>getter</code>、<code>setter</code>、<code>toString</code> 等方法。Lombok 是一个 Java 库，可以通过注解的方式，自动生成这些常见的代码，从而让代码更加简洁、清晰。比如，我们可以通过 <code>@Getter</code> 和 <code>@Setter</code> 注解自动生成 <code>getter</code> 和 <code>setter</code> 方法，通过 <code>@ToString</code> 自动生成 <code>toString</code> 方法。Lombok 的常用注解包括：</p>
<ul>
<li><code>@Getter</code>：生成 <code>getter</code> 方法。</li>
<li><code>@Setter</code>：生成 <code>setter</code> 方法。</li>
<li><code>@ToString</code>：生成 <code>toString</code> 方法。</li>
<li><code>@Data</code>：生成 <code>getter</code>、<code>setter</code>、<code>toString</code>、<code>equals</code> 和 <code>hashCode</code> 方法。</li>
<li><code>@Builder</code>：提供构建者模式（Builder pattern）。</li>
</ul>
<p>下面是配置和排查 Lombok 在 IDEA 中使用的详细步骤。</p>
<ol>
<li>
<p>安装 Lombok 插件</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105132473.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105132473.png?size=small" data-sub-html="<h2>image-20241026105132473</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105132473.png" alt="image-20241026105132473" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105132473.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105132473.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105132473.png?size=large 2x" data-title="image-20241026105132473" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
</li>
<li>
<p>开启 Annotation Processing</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105218772.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105218772.png?size=small" data-sub-html="<h2>image-20241026105218772</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105218772.png" alt="image-20241026105218772" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105218772.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105218772.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105218772.png?size=large 2x" data-title="image-20241026105218772" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
</li>
<li>
<p>在 pom.xml 中添加 Lombok 依赖</p>
<p>在 Maven 项目中，需要在 <code>pom.xml</code> 中添加 Lombok 的依赖：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="l">&lt;dependencies&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="l">&lt;!-- Lombok dependency --&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="l">&lt;dependency&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">&lt;version&gt;1.18.28&lt;/version&gt; &lt;!-- 根据需要选择版本 --&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="l">&lt;scope&gt;provided&lt;/scope&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="l">&lt;/dependency&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">&lt;/dependencies&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>添加依赖后，IDEA 将会自动下载 Lombok 库。如果依赖没有自动下载，可以执行下一步来手动刷新项目。</p>
</li>
<li>
<p>刷新 Maven 项目</p>
<p>在 IDEA 中，点击右侧的 Maven 面板，找到你的项目，点击 <code>Reload All Maven Projects</code>（通常是一个循环箭头图标）。这将强制 Maven 刷新并重新下载所有依赖。完成后，IDEA 就可以正常识别 Lombok 的注解了。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105404970.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105404970.png?size=small" data-sub-html="<h2>image-20241026105404970</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105404970.png" alt="image-20241026105404970" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105404970.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105404970.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241026105404970.png?size=large 2x" data-title="image-20241026105404970" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
</li>
</ol>
]]></description></item><item><title>【MIT 6.5840(6.824)】 Lab 5:Sharded Key/Value Service 设计实现</title><link>https://hezephyr.github.io/posts/11.mit6.5840-lab5/</link><pubDate>Sun, 20 Oct 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/11.mit6.5840-lab5/</guid><description><![CDATA[<h2 id="实验要求" class="heading-element"><span>1 实验要求</span>
  <a href="#%e5%ae%9e%e9%aa%8c%e8%a6%81%e6%b1%82" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="介绍" class="heading-element"><span>1.1 介绍</span>
  <a href="#%e4%bb%8b%e7%bb%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>本实验要求构建一个键 / 值存储系统，该系统能够将键 “分片” 或分区到一组副本组上。分片是键 / 值对的子集，例如所有以“a”开头的键可能是一个分片等，通过分片可提高系统性能，因为每个副本组仅处理几个分片的放置和获取，并且这些组并行操作。</p>
<p>系统有两个主要组件：一组副本组和分片控制器。每个副本组使用 Raft 复制负责部分分片的操作，分片控制器决定每个分片应由哪个副本组服务，其配置会随时间变化。客户端和副本组都需咨询分片控制器来找到对应关系。系统必须能在副本组间转移分片，以平衡负载或应对副本组的加入和离开。</p>
<p>主要挑战在于处理重新配置，即分片到组的分配变化，<font color="red">且要确保任何时候每个分片只有一个副本组在处理请求，同时重新配置还需要副本组间的交互（分片移动）</font>。本实验只允许通过 RPC 进行客户端和服务器间的交互。实验架构与许多其他系统类似，但相对简单。实验需使用相同的 Raft 实现，完成后需通过相关测试。</p>
<h3 id="lab5a控制器和静态分片" class="heading-element"><span>1.2 lab5A：控制器和静态分片</span>
  <a href="#lab5a%e6%8e%a7%e5%88%b6%e5%99%a8%e5%92%8c%e9%9d%99%e6%80%81%e5%88%86%e7%89%87" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ol>
<li>
<p>实现分片控制器</p>
<ul>
<li>在<code>shardctrler/server.go</code>和<code>client.go</code>中实现。需支持<code>Join</code>、<code>Leave</code>、<code>Move</code>和<code>Query</code>四种 RPC 接口。</li>
<li><code>Join</code> RPC：管理员用于添加新副本组，参数是从唯一、非零副本组标识符（GIDs）到服务器名称列表的映射集。分片控制器创建新配置，尽可能均匀地分配分片并尽量少移动分片。若 GID 不在当前配置中可重复使用。</li>
<li><code>Leave</code> RPC：参数是已加入组的 GIDs 列表，分片控制器创建新配置，排除这些组并将其分片分配给剩余组，且尽可能均匀分配并少移动分片。</li>
<li><code>Move</code> RPC：参数是分片编号和 GID，分片控制器创建新配置将分片分配给指定组，主要用于测试。</li>
<li><code>Query</code> RPC：参数是配置编号，分片控制器回复对应编号的配置，若编号为 - 1 或大于最大已知配置编号，则回复最新配置。第一个配置编号为 0，无组且所有分片分配给无效 GID 0，后续配置编号依次递增。通常，分片的数量明显多于组（即，每一组将服务多个分片），以便可以以相当细的粒度转移负载。</li>
</ul>
<blockquote>
<ul>
<li>从</li>
<li>实现时要注意去重客户端请求，代码需具有确定性，注意 Go 中 map 的特性，可使用 <code>Go test --race</code> 查找漏洞。</li>
</ul>
</blockquote>
</li>
<li>
<p>实现分片键 / 值服务器（处理静态配置）</p>
<ul>
<li>在<code>shardkv/</code>目录下实现，可从现有的<code>kvraft</code>服务器复制代码。</li>
<li>对于第一个测试，无需特别处理分片即可通过。</li>
<li>对于第二个测试，键 / 值副本组必须拒绝处理不属于其负责分片的键请求，服务器需定期向控制器获取最新配置，并在每次收到客户端<code>Get/Put/Append</code> RPC 时检查配置，对不负责分片的键请求返回<code>ErrWrongGroup</code>错误，且服务器不应调用分片控制器的<code>Join()</code>处理程序，由测试程序在适当时候调用。</li>
</ul>
</li>
</ol>
<blockquote>
<p>Hint</p>
<ul>
<li>从 kvraft 服务器的精简副本开始。</li>
<li>实现时要注意去重客户端请求。</li>
<li>状态机中执行分片重新平衡的代码必须是确定性的。在Go中，map的迭代顺序是不确定的</li>
<li>Go map是引用。如果将map类型的一个变量分配给另一个变量，则这两个变量都引用同一个map。因此，如果你想创建一个新的 <code>Config</code> 基于前一个，您需要创建一个新的地图对象（使用 <code>make()</code> ）并单独复制键和值。</li>
<li>Go竞争detector（<code>go test --race</code>）可以帮助您发现错误。</li>
</ul>
</blockquote>
<h3 id="lab5b碎片移动" class="heading-element"><span>1.3 lab5B：碎片移动</span>
  <a href="#lab5b%e7%a2%8e%e7%89%87%e7%a7%bb%e5%8a%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>当控制器改变分片时在副本组间移动分片，并确保键 / 值客户端操作的线性化。每个分片仅在其 Raft 副本组中多数服务器存活且能相互通信，以及能与多数分片控制器服务器通信时才能进行操作。系统在某些副本组中的少数服务器出现故障、暂时不可用或速度慢的情况下仍需运行。</p>
<p><font color="red">一个<code>shardkv</code>服务器只属于一个副本组，且组内服务器集合不会改变</font>。</p>
<p>服务器需监测配置变化，检测到变化时启动分片迁移过程。若副本组丢失分片，需立即停止处理该分片的请求并迁移数据给接管的副本组；若副本组获得分片，需等待前所有者发送旧分片数据后再接受请求。实现配置更改期间的分片迁移，确保副本组中的所有服务器在操作执行顺序中的同一点进行迁移，以统一处理并发客户端请求。</p>
<blockquote>
<p>Hint</p>
<ul>
<li>服务器需周期性（约每 100 毫秒）轮询分片控制器获取新配置，配置更改时服务器间需通过 RPC 传输分片，使用<code>make_end()</code>函数将服务器名称转换为<code>labrpc.ClientEnd</code>来发送 RPC。</li>
<li>按顺序处理重新配置，处理跨分片移动的客户端请求时需提供最多一次语义（去重检测）。</li>
<li>考虑<code>shardkv</code>客户端和服务器如何处理<code>ErrWrongGroup</code>错误，包括客户端是否更改序列号，服务器执行<code>Get/Put</code>请求返回该错误时是否更新客户端状态等。</li>
<li>服务器迁移到新配置后可继续存储不再拥有的分片，但在实际系统中应避免。</li>
<li>考虑在配置更改过程中，一个组从另一个组获取分片时，发送分片的时间点是否重要。</li>
<li>可在 RPC 请求或回复中发送整个map来简化分片转移代码，但要注意可能导致的竞态问题，处理方法是在 RPC 处理程序的回复中包含map的副本，以及在将映射 / 切片放入 Raft 日志条目并保存到键 / 值服务器状态时也要复制以避免竞态。</li>
<li>配置更改时，两组之间可能需要双向移动分片，注意避免死锁。</li>
</ul>
</blockquote>
<h3 id="挑战任务" class="heading-element"><span>1.4 挑战任务</span>
  <a href="#%e6%8c%91%e6%88%98%e4%bb%bb%e5%8a%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ol>
<li>状态垃圾回收
<ul>
<li>当副本组失去一个分片的所有权时，应从其数据库中删除该分片的键，避免浪费空间，但这给迁移带来问题。</li>
<li>解决方法是让副本组在必要时保留旧分片，且在副本组崩溃后重新启动时仍能正常工作，通过<code>TestChallenge1Delete</code>测试即完成此挑战。</li>
</ul>
</li>
<li>配置更改期间的客户端请求处理
<ul>
<li><strong>基本优化</strong>：修改解决方案，使在配置更改期间，不受影响分片的客户端操作能够继续执行，通过<code>TestChallenge2Unaffected</code>测试即完成此部分挑战。</li>
<li><strong>进一步优化</strong>：修改解决方案，使副本组在能够处理分片时立即开始服务，即使配置更改仍在进行中，通过<code>TestChallenge2Partial</code>测试即完成此挑战。</li>
</ul>
</li>
</ol>
<h2 id="实验设计" class="heading-element"><span>2 实验设计</span>
  <a href="#%e5%ae%9e%e9%aa%8c%e8%ae%be%e8%ae%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="整体架构" class="heading-element"><span>2.1 整体架构</span>
  <a href="#%e6%95%b4%e4%bd%93%e6%9e%b6%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Shardedkv服务整体架构如下图所示，主要由<strong>shardctrler</strong>（分片控制器）和<strong>shardkv</strong>（分片键值存储）两个核心组件构成，基于Raft一致性协议。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020102540500.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020102540500.png?size=small" data-sub-html="<h2>image-20241020102540500</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020102540500.png" alt="image-20241020102540500" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020102540500.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020102540500.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020102540500.png?size=large 2x" data-title="image-20241020102540500" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<ol>
<li>客户端层
<ul>
<li>shardctrler客户端：主要用于与shardctrler集群进行交互，执行分片配置的管理操作。通过4个主要的RPC接口，客户端可以请求<code>Join</code>（加入新分片组）、<code>Leave</code>（离开分片组）、<code>Move</code>（迁移分片）和<code>Query</code>（查询分片配置）。</li>
<li>shardkv客户端：负责向shardkv集群发送具体的键值操作请求。客户端通过分片ID（<code>shardID</code>）查找目标分片所在的集群组（通过本地配置中的映射关系），并将请求发送到正确的shardkv服务器。如果该shardkv服务器无法提供服务（如分片迁移导致服务不可用），客户端会向shardctrler请求最新的配置，并重新定向请求。</li>
</ul>
</li>
<li>服务器层：分为两个主要的集群：<strong>shardctrler集群</strong>和<strong>shardkv集群</strong>，它们分别处理配置管理和数据存储。
<ul>
<li><strong>Shardctrler集群</strong>：Shardctrler是负责管理分片配置的服务器集群。该集群的每个节点保存一个<code>configs[]</code>数组，记录系统中每个分片的最新及历史配置，包括<code>configNum,map:shard-&gt;gid,map:gid-&gt;servers</code>。该集群通过RPC接口处理客户端发起的配置变更请求，包括<code>Join</code>、<code>Leave</code>、<code>Move</code>和<code>Query</code>。每当shardctrler接收到配置变更请求时，它会生成一个新的配置，将分片重新分配给不同的shardkv集群组。</li>
<li><strong>Shardkv集群</strong>：Shardkv集群是处理实际键值存储和数据操作的核心部分。整个Shardkv系统被划分为多个分片组（Group），每个组负责管理一部分分片。一个组通常包含多个shardkv服务器，每个服务器保存其负责的分片数据。客户端的<code>Get</code>、<code>Put</code>和<code>Append</code>请求会根据分片ID路由到对应的服务器，服务器根据当前配置中的分片分配情况进行操作。如果服务器收到的请求涉及的分片已经迁移或重新分配，它会通过向shardctrler请求最新配置来处理这一变化。具体来说，当分片被重新分配时，shardkv集群会将原先分配给某个组的分片数据传输到新的分片组。<font color="red">每个分片在迁移过程中，需要通过状态追踪保证只有新的分片组接管该分片的数据写入与查询</font>。当分片完成迁移后，原先拥有该分片的shardkv服务器需要清理掉旧的分片数据，以释放存储资源。</li>
</ul>
</li>
<li>Raft层：Shardctrler集群和Shardkv集群都依赖于Raft一致性协议来实现分布式日志的一致性复制。</li>
<li>持久化存储层：Raft协议的实现要求系统能够将Raft状态和日志数据持久化，以便在节点宕机或重启时恢复状态。其中由于shardctrler的配置数据比较小，所以不太需要快照功能。</li>
</ol>
<h3 id="shardctrler" class="heading-element"><span>2.2 shardctrler</span>
  <a href="#shardctrler" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>shardctrler本质上跟kvraft没什么区别，只是存储的是配置项信息，包含每个分片由哪个副本组负责以及副本组ID到对应服务器的endPoint这两个映射。所以在代码实现上完全可以按照kvraft的实现，并且由于配置项数据一般比较少，所以不需要实现日志快照功能。</p>
<p>具体在于四个RPC请求：<code>Join</code>、<code>Leave</code>、<code>Move</code>、<code>Query</code>的实现。</p>
<ul>
<li>
<p>我们根据 <code>Join</code> 请求的副本组 ID 和服务器列表，更新最新配置中的副本组列表，将新副本组添加进去。<font color="red">并且根据新的副本组数量，重新分配分片（使用简单的负载均衡算法：尽量让所有副本组处理的分片数量相等）</font>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Join adds new groups to the configuration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">cf</span> <span class="o">*</span><span class="nx">MemoryConfigStateMachine</span><span class="p">)</span> <span class="nf">Join</span><span class="p">(</span><span class="nx">groups</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">][]</span><span class="kt">string</span><span class="p">)</span> <span class="nx">Err</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lastConfig</span> <span class="o">:=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// create a new configuration based on the last configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newConfig</span> <span class="o">:=</span> <span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">len</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastConfig</span><span class="p">.</span><span class="nx">Shards</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nf">deepCopy</span><span class="p">(</span><span class="nx">lastConfig</span><span class="p">.</span><span class="nx">Groups</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">gid</span><span class="p">,</span> <span class="nx">servers</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">groups</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// if the group does not exist in the new configuration, add it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">newConfig</span><span class="p">.</span><span class="nx">Groups</span><span class="p">[</span><span class="nx">gid</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">newServers</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">servers</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nb">copy</span><span class="p">(</span><span class="nx">newServers</span><span class="p">,</span> <span class="nx">servers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">newConfig</span><span class="p">.</span><span class="nx">Groups</span><span class="p">[</span><span class="nx">gid</span><span class="p">]</span> <span class="p">=</span> <span class="nx">newServers</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">group2Shards</span> <span class="o">:=</span> <span class="nf">Group2Shards</span><span class="p">(</span><span class="nx">newConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// load balance the shards among the groups
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">source</span><span class="p">,</span> <span class="nx">target</span> <span class="o">:=</span> <span class="nf">GetGIDWithMaximumShards</span><span class="p">(</span><span class="nx">group2Shards</span><span class="p">),</span> <span class="nf">GetGIDWithMinimumShards</span><span class="p">(</span><span class="nx">group2Shards</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">source</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">group2Shards</span><span class="p">[</span><span class="nx">source</span><span class="p">])</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="nx">group2Shards</span><span class="p">[</span><span class="nx">target</span><span class="p">])</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">group2Shards</span><span class="p">[</span><span class="nx">target</span><span class="p">]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">group2Shards</span><span class="p">[</span><span class="nx">target</span><span class="p">],</span> <span class="nx">group2Shards</span><span class="p">[</span><span class="nx">source</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="nx">group2Shards</span><span class="p">[</span><span class="nx">source</span><span class="p">]</span> <span class="p">=</span> <span class="nx">group2Shards</span><span class="p">[</span><span class="nx">source</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// update the shard assignment in the new configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">newShards</span> <span class="p">[</span><span class="nx">NShards</span><span class="p">]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">gid</span><span class="p">,</span> <span class="nx">shards</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">group2Shards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">shard</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">shards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">newShards</span><span class="p">[</span><span class="nx">shard</span><span class="p">]</span> <span class="p">=</span> <span class="nx">gid</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newConfig</span><span class="p">.</span><span class="nx">Shards</span> <span class="p">=</span> <span class="nx">newShards</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">,</span> <span class="nx">newConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">OK</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>Leave</code>：根据需要移除的副本组ID，从配置中删除这些组的信息。将它们负责的分片重新分配给现存的副本组，保证分片的平衡。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Leave removes specified groups from the configuration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">cf</span> <span class="o">*</span><span class="nx">MemoryConfigStateMachine</span><span class="p">)</span> <span class="nf">Leave</span><span class="p">(</span><span class="nx">gids</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="nx">Err</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lastConifg</span> <span class="o">:=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// create a new configuration based on the last configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newConfig</span> <span class="o">:=</span> <span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">len</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastConifg</span><span class="p">.</span><span class="nx">Shards</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nf">deepCopy</span><span class="p">(</span><span class="nx">lastConifg</span><span class="p">.</span><span class="nx">Groups</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">group2Shards</span> <span class="o">:=</span> <span class="nf">Group2Shards</span><span class="p">(</span><span class="nx">newConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// used to store the orphan shards (i.e., shards owned by
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">orphanShards</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">gid</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">gids</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// if the group exists in the new configuration, remove it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">newConfig</span><span class="p">.</span><span class="nx">Groups</span><span class="p">[</span><span class="nx">gid</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">delete</span><span class="p">(</span><span class="nx">newConfig</span><span class="p">.</span><span class="nx">Groups</span><span class="p">,</span> <span class="nx">gid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// if the group owns any shards, remove them and add them to the orphan shards
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">shards</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">group2Shards</span><span class="p">[</span><span class="nx">gid</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">delete</span><span class="p">(</span><span class="nx">group2Shards</span><span class="p">,</span> <span class="nx">gid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">orphanShards</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">orphanShards</span><span class="p">,</span> <span class="nx">shards</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">newShards</span> <span class="p">[</span><span class="nx">NShards</span><span class="p">]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">newConfig</span><span class="p">.</span><span class="nx">Groups</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// re-allocate orphan shards to the remaining groups
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">shard</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">orphanShards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">gid</span> <span class="o">:=</span> <span class="nf">GetGIDWithMinimumShards</span><span class="p">(</span><span class="nx">group2Shards</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">newShards</span><span class="p">[</span><span class="nx">shard</span><span class="p">]</span> <span class="p">=</span> <span class="nx">gid</span>
</span></span><span class="line"><span class="cl">			<span class="nx">group2Shards</span><span class="p">[</span><span class="nx">gid</span><span class="p">]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">group2Shards</span><span class="p">[</span><span class="nx">gid</span><span class="p">],</span> <span class="nx">shard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// update the shard assignment in the new configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">gid</span><span class="p">,</span> <span class="nx">shards</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">group2Shards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">shard</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">shards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">newShards</span><span class="p">[</span><span class="nx">shard</span><span class="p">]</span> <span class="p">=</span> <span class="nx">gid</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newConfig</span><span class="p">.</span><span class="nx">Shards</span> <span class="p">=</span> <span class="nx">newShards</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">,</span> <span class="nx">newConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">OK</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>Move</code>：更新当前的配置，将该分片从旧的副本组重新分配到指定的新副本组。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Move moves a specified shard to a specified group.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">cf</span> <span class="o">*</span><span class="nx">MemoryConfigStateMachine</span><span class="p">)</span> <span class="nf">Move</span><span class="p">(</span><span class="nx">shard</span><span class="p">,</span> <span class="nx">gid</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">Err</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lastConfig</span> <span class="o">:=</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// create a new configuration based on the last configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newConfig</span> <span class="o">:=</span> <span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">len</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastConfig</span><span class="p">.</span><span class="nx">Shards</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nf">deepCopy</span><span class="p">(</span><span class="nx">lastConfig</span><span class="p">.</span><span class="nx">Groups</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// update the shard assignment in the new configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newConfig</span><span class="p">.</span><span class="nx">Shards</span><span class="p">[</span><span class="nx">shard</span><span class="p">]</span> <span class="p">=</span> <span class="nx">gid</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">,</span> <span class="nx">newConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">OK</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>Query</code>：根据 <code>Query</code> 请求中的参数（版本号），返回对应版本的配置。如果请求的版本号为 -1，则返回最新的配置。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Query queries a specified configuration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">cf</span> <span class="o">*</span><span class="nx">MemoryConfigStateMachine</span><span class="p">)</span> <span class="nf">Query</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="nx">Config</span><span class="p">,</span> <span class="nx">Err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// if the configuration number is not valid, return the latest configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">num</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">OK</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">cf</span><span class="p">.</span><span class="nx">Configs</span><span class="p">[</span><span class="nx">num</span><span class="p">],</span> <span class="nx">OK</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Group2Shards assigns each shard to the corresponding group.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Group2Shards</span><span class="p">(</span><span class="nx">config</span> <span class="nx">Config</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">][]</span><span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">group2Shards</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">][]</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">gid</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Groups</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">group2Shards</span><span class="p">[</span><span class="nx">gid</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">shard</span><span class="p">,</span> <span class="nx">gid</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Shards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">group2Shards</span><span class="p">[</span><span class="nx">gid</span><span class="p">]</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">group2Shards</span><span class="p">[</span><span class="nx">gid</span><span class="p">],</span> <span class="nx">shard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">group2Shards</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="shardkv-server" class="heading-element"><span>2.3 shardkv server</span>
  <a href="#shardkv-server" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><h4 id="结构" class="heading-element"><span>2.3.1 结构</span>
  <a href="#%e7%bb%93%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>ShardKV的结构体代码如下，其中</p>
<ul>
<li><code>stateMachine</code>用于存储实际的键值数据。它是一个分片映射，键为分片 ID，值为存储该分片数据的 <code>Shard</code> 结构体，每个 <code>Shard</code> 结构体由哈希表和状态变量构成，有以下四种状态：
<ul>
<li><code>Serving</code>：表示该分片正在正常地为客户端提供读写服务。这意味着客户端对该分片内键值对的<code>Get</code>、<code>Put</code>、<code>Append</code>等操作都可以得到及时处理。</li>
<li><code>Pulling</code>：表明该分片正在从其他服务器拉取数据。这种情况通常发生在配置变更后，分片需要从原来所属的服务器迁移到当前服务器时，当前服务器会将该分片标记为<code>Pulling</code>状态。</li>
<li><code>BePulling</code>：<code>BePulling</code>状态意味着该分片的数据正在被其他服务器拉取。与<code>Pulling</code>状态不同，<code>BePulling</code>状态是从数据提供方的角度来看的，即本服务器上的该分片数据正在被其他服务器获取。</li>
<li><code>GCing</code>：<code>GCing</code>即垃圾回收（Garbage Collection）状态。当一个分片服务器已经完成了迁移操作，会将进入<code>GCing</code>状态，以便清理拉取服务器上的分片数据（即<code>BePulling</code>状态）。</li>
</ul>
</li>
<li>根据不同状态和当前<code>raft</code>组的配置，决定是否提供读写服务以及进行相应的数据迁移和清理操作。</li>
<li><code>notifyChans</code>: 用于通知客户端操作的完成情况。每次当 Raft 提交某个操作时，通过<code>notifyChans</code>唤醒等待的客户端。</li>
<li><code>lastOperations</code>：用于去重记录，保存每个客户端最后一次请求的 <code>commandId</code> 和操作结果，避免重复操作。</li>
</ul>
<p>此外，<code>ShardKV</code> 还通过 <code>applyCh</code> 接收 Raft 提交的日志条目，并通过定时任务监控配置更新、分片迁移、垃圾回收以及空日志检测。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ShardKV</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mu</span>      <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>       <span class="c1">// mutex for synchronizing access to shared resources
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dead</span>    <span class="kt">int32</span>              <span class="c1">// set by Kill(), indicates if the server is killed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">rf</span>      <span class="o">*</span><span class="nx">raft</span><span class="p">.</span><span class="nx">Raft</span>         <span class="c1">// raft instance for consensus
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">applyCh</span> <span class="kd">chan</span> <span class="nx">raft</span><span class="p">.</span><span class="nx">ApplyMsg</span> <span class="c1">// channel for applying raft messages
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">makeEnd</span> <span class="kd">func</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">labrpc</span><span class="p">.</span><span class="nx">ClientEnd</span> <span class="c1">// function to create a client end to communicate with other groups
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gid</span>     <span class="kt">int</span>                            <span class="c1">// group id of the server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sc</span>      <span class="o">*</span><span class="nx">shardctrler</span><span class="p">.</span><span class="nx">Clerk</span>             <span class="c1">// client to communicate with the shardctrler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">maxRaftState</span> <span class="kt">int</span> <span class="c1">// snapshot if log grows this big
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lastApplied</span>  <span class="kt">int</span> <span class="c1">// index of the last applied log entry to prevent stateMachine from rolling back
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">lastConfig</span>    <span class="nx">shardctrler</span><span class="p">.</span><span class="nx">Config</span> <span class="c1">// the last configuration received from the shardctrler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">currentConfig</span> <span class="nx">shardctrler</span><span class="p">.</span><span class="nx">Config</span> <span class="c1">// the current configuration of the cluster
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">stateMachine</span>   <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">*</span><span class="nx">Shard</span>             <span class="c1">// KV State Machines
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lastOperations</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int64</span><span class="p">]</span><span class="nx">OperationContext</span> <span class="c1">// determine whether log is duplicated by (clientId, commandId)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">notifyChans</span>    <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kd">chan</span> <span class="o">*</span><span class="nx">CommandReply</span> <span class="c1">// notify the client when the command is applied
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">StartServer</span><span class="p">(</span><span class="nx">servers</span> <span class="p">[]</span><span class="o">*</span><span class="nx">labrpc</span><span class="p">.</span><span class="nx">ClientEnd</span><span class="p">,</span> <span class="nx">me</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">persister</span> <span class="o">*</span><span class="nx">raft</span><span class="p">.</span><span class="nx">Persister</span><span class="p">,</span> <span class="nx">maxraftstate</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">gid</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">ctrlers</span> <span class="p">[]</span><span class="o">*</span><span class="nx">labrpc</span><span class="p">.</span><span class="nx">ClientEnd</span><span class="p">,</span> <span class="nx">makeEnd</span> <span class="kd">func</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">labrpc</span><span class="p">.</span><span class="nx">ClientEnd</span><span class="p">)</span> <span class="o">*</span><span class="nx">ShardKV</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// call labgob.Register on structures you want
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Go&#39;s RPC library to marshall/unmarshall.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">labgob</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">Command</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">labgob</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">CommandArgs</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">labgob</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">shardctrler</span><span class="p">.</span><span class="nx">Config</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">labgob</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">ShardOperationArgs</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">labgob</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">ShardOperationReply</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create a channel to receive messages applied by Raft.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">applyCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">raft</span><span class="p">.</span><span class="nx">ApplyMsg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">ShardKV</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">dead</span><span class="p">:</span>           <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">:</span>             <span class="nx">raft</span><span class="p">.</span><span class="nf">Make</span><span class="p">(</span><span class="nx">servers</span><span class="p">,</span> <span class="nx">me</span><span class="p">,</span> <span class="nx">persister</span><span class="p">,</span> <span class="nx">applyCh</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">applyCh</span><span class="p">:</span>        <span class="nx">applyCh</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">makeEnd</span><span class="p">:</span>        <span class="nx">makeEnd</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gid</span><span class="p">:</span>            <span class="nx">gid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sc</span><span class="p">:</span>             <span class="nx">shardctrler</span><span class="p">.</span><span class="nf">MakeClerk</span><span class="p">(</span><span class="nx">ctrlers</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">maxRaftState</span><span class="p">:</span>   <span class="nx">maxraftstate</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastApplied</span><span class="p">:</span>    <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastConfig</span><span class="p">:</span>     <span class="nx">shardctrler</span><span class="p">.</span><span class="nf">DefaultConfig</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">currentConfig</span><span class="p">:</span>  <span class="nx">shardctrler</span><span class="p">.</span><span class="nf">DefaultConfig</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stateMachine</span><span class="p">:</span>   <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="o">*</span><span class="nx">Shard</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastOperations</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int64</span><span class="p">]</span><span class="nx">OperationContext</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">notifyChans</span><span class="p">:</span>    <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kd">chan</span> <span class="o">*</span><span class="nx">CommandReply</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Restore any snapshot data stored in persister to recover the state.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">kv</span><span class="p">.</span><span class="nf">restoreSnapshot</span><span class="p">(</span><span class="nx">persister</span><span class="p">.</span><span class="nf">ReadSnapshot</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">applier</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start several monitoring routines that periodically perform specific actions:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">Monitor</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">configurationAction</span><span class="p">,</span> <span class="nx">ConfigurationMonitorTimeout</span><span class="p">)</span>         <span class="c1">// Monitor configuration changes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">Monitor</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">migrationAction</span><span class="p">,</span> <span class="nx">MigrationMonitorTimeout</span><span class="p">)</span>                 <span class="c1">// Monitor shard migration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">Monitor</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">gcAction</span><span class="p">,</span> <span class="nx">GCMonitorTimeout</span><span class="p">)</span>                               <span class="c1">// Monitor garbage collection of old shard data.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">Monitor</span><span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">checkEntryInCurrentTermAction</span><span class="p">,</span> <span class="nx">EmptyEntryDetectorTimeout</span><span class="p">)</span> <span class="c1">// Monitor Raft log entries in the current term.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">kv</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>Execute</code>函数用于处理命令并返回结果，非领导者返回<code>ErrWrongLeader</code>，领导者获取通知通道等待结果或超时处理，最后异步释放通道；<code>applier</code>协程从<code>Raft</code>日志获取消息应用到状态机，对有效命令消息检查是否应用并按类型处理，可能通知客户端和进行快照，对有效快照消息安装快照恢复状态机，对无效消息抛异常。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Execute processes a command and returns the result via the reply parameter.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">Execute</span><span class="p">(</span><span class="nx">command</span> <span class="nx">Command</span><span class="p">,</span> <span class="nx">reply</span> <span class="o">*</span><span class="nx">CommandReply</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// do not hold lock to improve throughput
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// when KVServer holds the lock to take snapshot, underlying raft can still commit raft logs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">index</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">isLeader</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">isLeader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">ErrWrongLeader</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">notifyChan</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">getNotifyChan</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// wait for the result or timeout.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">result</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">notifyChan</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Err</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">ExecuteTimeout</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">ErrTimeout</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// release notifyChan to reduce memory footprint
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// why asynchronously? to improve throughput, here is no need to block client request
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nf">removeOutdatedNotifyChan</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// applier continuously applies commands from the Raft log to the state machine.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">applier</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">!</span><span class="nx">kv</span><span class="p">.</span><span class="nf">killed</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// wait for a new message in the apply channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">case</span> <span class="nx">message</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">kv</span><span class="p">.</span><span class="nx">applyCh</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandValid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// check if the command has already been applied.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span> <span class="o">&lt;=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// update the last applied index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// type assert the command from the message.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">command</span> <span class="o">:=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">Command</span><span class="p">.(</span><span class="nx">Command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">command</span><span class="p">.</span><span class="nx">CommandType</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">Operation</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// extract the operation data and apply the operation to the state machine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">operation</span> <span class="o">:=</span> <span class="nx">command</span><span class="p">.</span><span class="nx">Data</span><span class="p">.(</span><span class="nx">CommandArgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">applyOperation</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">operation</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">Configuration</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// extract the configuration data and apply the configuration to the state machine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">nextConfig</span> <span class="o">:=</span> <span class="nx">command</span><span class="p">.</span><span class="nx">Data</span><span class="p">.(</span><span class="nx">shardctrler</span><span class="p">.</span><span class="nx">Config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">applyConfiguration</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">nextConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">InsertShards</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// extract the shard insertion data and apply the insertion to the state machine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">shardsInfo</span> <span class="o">:=</span> <span class="nx">command</span><span class="p">.</span><span class="nx">Data</span><span class="p">.(</span><span class="nx">ShardOperationReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">applyInsertShards</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">shardsInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">DeleteShards</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// extract the shard deletion data and apply the deletion to the state machine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">shardsInfo</span> <span class="o">:=</span> <span class="nx">command</span><span class="p">.</span><span class="nx">Data</span><span class="p">.(</span><span class="nx">ShardOperationArgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">applyDeleteShards</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">shardsInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">EmptyShards</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// apply empty shards to the state machine, to prevent the state machine from rolling back
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">applyEmptyShards</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="c1">// only notify the related channel for currentTerm&#39;s log when node is Leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">isLeader</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetState</span><span class="p">();</span> <span class="nx">isLeader</span> <span class="o">&amp;&amp;</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandTerm</span> <span class="o">==</span> <span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">notifyChan</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">getNotifyChan</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">notifyChan</span> <span class="o">&lt;-</span> <span class="nx">reply</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="c1">// take snapshot if needed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">needSnapshot</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nf">takeSnapshot</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">message</span><span class="p">.</span><span class="nx">SnapshotValid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// restore the state machine from the snapshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">CondInstallSnapshot</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">SnapshotTerm</span><span class="p">,</span> <span class="nx">message</span><span class="p">.</span><span class="nx">SnapshotIndex</span><span class="p">,</span> <span class="nx">message</span><span class="p">.</span><span class="nx">Snapshot</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nf">restoreSnapshot</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">Snapshot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">SnapshotIndex</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;{Node %v}{Group %v} invalid apply message %v&#34;</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetId</span><span class="p">(),</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">gid</span><span class="p">,</span> <span class="nx">message</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="日志类型" class="heading-element"><span>2.3.2 日志类型</span>
  <a href="#%e6%97%a5%e5%bf%97%e7%b1%bb%e5%9e%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>在 <code>ShardKV</code> 系统中，Raft 日志包含了以下几种不同类型的操作：</p>
<ol>
<li><strong>客户端命令 (<code>Command</code>)</strong>: 包含对键值存储的<code>Put</code>、<code>Append</code>、<code>Get</code>等操作，这些操作会通过 Raft 日志提交来保证多副本的一致性。</li>
<li><strong>配置变更 (<code>Config</code>)</strong>: 当从 <code>shardctrler</code> 获取到新的分片配置时，会通过 Raft 日志来记录配置的变化。所有副本组通过 Raft 日志共享同一配置，确保分片的一致分配。</li>
<li><strong>分片操作 (<code>ShardOperation</code>)</strong>: 当进行分片迁移时，涉及到的操作也会记录在 Raft 日志中，保证分片迁移过程的顺序和一致性。</li>
<li><strong>空日志条目</strong>: Raft 有时会生成空日志条目以保持领导者的状态和活动性，避免在某些情况下集群处于无操作状态。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Operation</span>     <span class="nx">CommandType</span> <span class="p">=</span> <span class="kc">iota</span> <span class="c1">// Generic operation command
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Configuration</span>                    <span class="c1">// Configuration change command
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">InsertShards</span>                     <span class="c1">// Command to insert shards
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">DeleteShards</span>                     <span class="c1">// Command to delete shards
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">EmptyShards</span>                      <span class="c1">// Command to empty shards
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Command</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">CommandType</span> <span class="nx">CommandType</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Data</span>        <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ShardOperationArgs</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ConfigNum</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ShardIDs</span>  <span class="p">[]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ShardOperationReply</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Err</span>            <span class="nx">Err</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ConfigNum</span>      <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Shards</span>         <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">LastOperations</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int64</span><span class="p">]</span><span class="nx">OperationContext</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// NewOperationCommand creates a new operation command from CommandArgs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewOperationCommand</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">CommandArgs</span><span class="p">)</span> <span class="nx">Command</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">Command</span><span class="p">{</span><span class="nx">Operation</span><span class="p">,</span> <span class="o">*</span><span class="nx">args</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewConfigurationCommand creates a new configuration command
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewConfigurationCommand</span><span class="p">(</span><span class="nx">config</span> <span class="o">*</span><span class="nx">shardctrler</span><span class="p">.</span><span class="nx">Config</span><span class="p">)</span> <span class="nx">Command</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">Command</span><span class="p">{</span><span class="nx">Configuration</span><span class="p">,</span> <span class="o">*</span><span class="nx">config</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewInsertShardsCommand creates a new command to insert shards
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewInsertShardsCommand</span><span class="p">(</span><span class="nx">reply</span> <span class="o">*</span><span class="nx">ShardOperationReply</span><span class="p">)</span> <span class="nx">Command</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">Command</span><span class="p">{</span><span class="nx">InsertShards</span><span class="p">,</span> <span class="o">*</span><span class="nx">reply</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewDeleteShardsCommand creates a new command to delete shards
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewDeleteShardsCommand</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">ShardOperationArgs</span><span class="p">)</span> <span class="nx">Command</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">Command</span><span class="p">{</span><span class="nx">DeleteShards</span><span class="p">,</span> <span class="o">*</span><span class="nx">args</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewEmptyShardsCommand creates a new command indicating no shards
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewEmptyShardsCommand</span><span class="p">()</span> <span class="nx">Command</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">Command</span><span class="p">{</span><span class="nx">EmptyShards</span><span class="p">,</span> <span class="kc">nil</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="读写服务" class="heading-element"><span>2.3.3 读写服务</span>
  <a href="#%e8%af%bb%e5%86%99%e6%9c%8d%e5%8a%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>这段代码主要实现了与<code>shardkv</code>服务相关的操作逻辑。其中<code>canServe</code>函数用于判断服务器是否能服务指定分片，依据是当前配置下分片所属组与服务器组 ID 是否一致以及分片状态。<code>Command</code>函数先检查是否为重复请求，若是非<code>Get</code>操作的重复请求则直接返回结果，同时也检查服务器能否服务对应分片，不能则返回<code>ErrWrongGroup</code>，否则调用<code>Execute</code>。<code>applyOperation</code>函数在处理操作时，先检查服务器能否服务分片，对于非<code>Get</code>操作的重复请求返回上次结果，否则将操作应用到状态机，并在非<code>Get</code>操作时更新客户端操作相关信息，通过在多处进行相关判断和检查来保障操作的正确性和线性化语义。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// canServe checks if the server can serve the shard.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">canServe</span><span class="p">(</span><span class="nx">shardID</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">currentConfig</span><span class="p">.</span><span class="nx">Shards</span><span class="p">[</span><span class="nx">shardID</span><span class="p">]</span> <span class="o">==</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">gid</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">stateMachine</span><span class="p">[</span><span class="nx">shardID</span><span class="p">].</span><span class="nx">Status</span> <span class="o">==</span> <span class="nx">Serving</span> <span class="o">||</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">stateMachine</span><span class="p">[</span><span class="nx">shardID</span><span class="p">].</span><span class="nx">Status</span> <span class="o">==</span> <span class="nx">GCing</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">Command</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">CommandArgs</span><span class="p">,</span> <span class="nx">reply</span> <span class="o">*</span><span class="nx">CommandReply</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// if the command is the duplicated, return result directly without raft layer&#39;s participation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Op</span> <span class="o">!=</span> <span class="nx">Get</span> <span class="o">&amp;&amp;</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">isDuplicateRequest</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">CommandId</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastReply</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">args</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">].</span><span class="nx">LastReply</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">lastReply</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">lastReply</span><span class="p">.</span><span class="nx">Err</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// check if the server can serve the requested shard.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">kv</span><span class="p">.</span><span class="nf">canServe</span><span class="p">(</span><span class="nf">key2shard</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">Key</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">ErrWrongGroup</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nf">NewOperationCommand</span><span class="p">(</span><span class="nx">args</span><span class="p">),</span> <span class="nx">reply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// applyOperation applies a given operation to the KV state machine.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">applyOperation</span><span class="p">(</span><span class="nx">operation</span> <span class="o">*</span><span class="nx">CommandArgs</span><span class="p">)</span> <span class="o">*</span><span class="nx">CommandReply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">shardID</span> <span class="o">:=</span> <span class="nf">key2shard</span><span class="p">(</span><span class="nx">operation</span><span class="p">.</span><span class="nx">Key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// check if the server can serve the requested shard.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">kv</span><span class="p">.</span><span class="nf">canServe</span><span class="p">(</span><span class="nx">shardID</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">ErrWrongGroup</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// check if the operation is duplicated(only for non-Get operations)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">operation</span><span class="p">.</span><span class="nx">Op</span> <span class="o">!=</span> <span class="nx">Get</span> <span class="o">&amp;&amp;</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">isDuplicateRequest</span><span class="p">(</span><span class="nx">operation</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">,</span> <span class="nx">operation</span><span class="p">.</span><span class="nx">CommandId</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">lastReply</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">operation</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">].</span><span class="nx">LastReply</span>
</span></span><span class="line"><span class="cl">			<span class="nx">reply</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">lastReply</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">lastReply</span><span class="p">.</span><span class="nx">Err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// apply the operation to the state machine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">applyLogToStateMachine</span><span class="p">(</span><span class="nx">operation</span><span class="p">,</span> <span class="nx">shardID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// update the last operation context for the client if the operation is not a Get operation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">operation</span><span class="p">.</span><span class="nx">Op</span> <span class="o">!=</span> <span class="nx">Get</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">operation</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">]</span> <span class="p">=</span> <span class="nx">OperationContext</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">operation</span><span class="p">.</span><span class="nx">CommandId</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">reply</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">reply</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="配置更新检测" class="heading-element"><span>2.3.4 配置更新检测</span>
  <a href="#%e9%85%8d%e7%bd%ae%e6%9b%b4%e6%96%b0%e6%a3%80%e6%b5%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>首先，配置更新协程负责定时监测配置是否更新，即<code>configNum</code>是否增加（<code>currentConfigNum+1==nextConfig.Num</code>）。但检测前提是需要检查分片的状态是否都为Serving，如果不是，则意味着其他协程仍然没有完成任务，故需要阻塞新配置的拉取和提取。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Checks if the next configuration can be performed.
</span></span></span><span class="line"><span class="cl"><span class="c1">// If all shards are in Serving status, it queries and applies the next configuration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">configurationAction</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">canPerformNextConfig</span> <span class="o">:=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// If any shard is not in the Serving status, the next configuration cannot be applied
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">shard</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">stateMachine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">shard</span><span class="p">.</span><span class="nx">Status</span> <span class="o">!=</span> <span class="nx">Serving</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">canPerformNextConfig</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">currentConfigNum</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">currentConfig</span><span class="p">.</span><span class="nx">Num</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Query and apply the next configuration if allowed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">canPerformNextConfig</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nextConfig</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">sc</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="nx">currentConfigNum</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Ensure the queried configuration is the next one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">nextConfig</span><span class="p">.</span><span class="nx">Num</span> <span class="o">==</span> <span class="nx">currentConfigNum</span><span class="o">+</span><span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">kv</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nf">NewConfigurationCommand</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">nextConfig</span><span class="p">),</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// applyConfiguration applies a new configuration to the shard.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">applyConfiguration</span><span class="p">(</span><span class="nx">nextConfig</span> <span class="o">*</span><span class="nx">shardctrler</span><span class="p">.</span><span class="nx">Config</span><span class="p">)</span> <span class="o">*</span><span class="nx">CommandReply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// check if the new configuration is the next in line.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">nextConfig</span><span class="p">.</span><span class="nx">Num</span> <span class="o">==</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">currentConfig</span><span class="p">.</span><span class="nx">Num</span><span class="o">+</span><span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// update the shard status based on the new configuration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">kv</span><span class="p">.</span><span class="nf">updateShardStatus</span><span class="p">(</span><span class="nx">nextConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// save the last configuration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">kv</span><span class="p">.</span><span class="nx">lastConfig</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">currentConfig</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// update the current configuration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">kv</span><span class="p">.</span><span class="nx">currentConfig</span> <span class="p">=</span> <span class="o">*</span><span class="nx">nextConfig</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">OK</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">ErrOutDated</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">reply</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="分片迁移" class="heading-element"><span>2.3.5 分片迁移</span>
  <a href="#%e5%88%86%e7%89%87%e8%bf%81%e7%a7%bb" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>分片迁移协程会定时检测分片的 <code>Pulling</code> 状态。它依据 lastConfig 算出对应 raft 组的 gid 和待拉取的分片，随后并行拉取数据。这里采用 <code>waitGroup</code> 确保所有独立任务完成后再开始下一轮任务。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Executes the migration task to pull shard data from other groups.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">migrationAction</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gid2Shards</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">getShardIDsByStatus</span><span class="p">(</span><span class="nx">Pulling</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create pull tasks for each group (GID)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">gid</span><span class="p">,</span> <span class="nx">shardIDs</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">gid2Shards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">servers</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">configNum</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">shardIDs</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pullTaskArgs</span> <span class="o">:=</span> <span class="nx">ShardOperationArgs</span><span class="p">{</span><span class="nx">configNum</span><span class="p">,</span> <span class="nx">shardIDs</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Try to pull shard data from each server in the group
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">server</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">servers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">pullTaskReply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">ShardOperationReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">srv</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">makeEnd</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">srv</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="s">&#34;ShardKV.GetShardsData&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">pullTaskArgs</span><span class="p">,</span> <span class="nx">pullTaskReply</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">pullTaskReply</span><span class="p">.</span><span class="nx">Err</span> <span class="o">==</span> <span class="nx">OK</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">//Pulling data from these servers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">kv</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nf">NewInsertShardsCommand</span><span class="p">(</span><span class="nx">pullTaskReply</span><span class="p">),</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">lastConfig</span><span class="p">.</span><span class="nx">Groups</span><span class="p">[</span><span class="nx">gid</span><span class="p">],</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">currentConfig</span><span class="p">.</span><span class="nx">Num</span><span class="p">,</span> <span class="nx">shardIDs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span> <span class="c1">// Wait for all pull tasks to complete
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// applyInsertShards applies the insertion of shard data.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">applyInsertShards</span><span class="p">(</span><span class="nx">shardsInfo</span> <span class="o">*</span><span class="nx">ShardOperationReply</span><span class="p">)</span> <span class="o">*</span><span class="nx">CommandReply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// check if the configuration number matches the current one.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">shardsInfo</span><span class="p">.</span><span class="nx">ConfigNum</span> <span class="o">==</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">currentConfig</span><span class="p">.</span><span class="nx">Num</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">shardID</span><span class="p">,</span> <span class="nx">shardData</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">shardsInfo</span><span class="p">.</span><span class="nx">Shards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">shard</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">stateMachine</span><span class="p">[</span><span class="nx">shardID</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// only pull if the shard is in the Pulling state.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">shard</span><span class="p">.</span><span class="nx">Status</span> <span class="o">==</span> <span class="nx">Pulling</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">shardData</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">shard</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// update the shard status to Garbage Collecting.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">shard</span><span class="p">.</span><span class="nx">Status</span> <span class="p">=</span> <span class="nx">GCing</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">break</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// update last operations with the provided contexts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">clientId</span><span class="p">,</span> <span class="nx">operationContext</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">shardsInfo</span><span class="p">.</span><span class="nx">LastOperations</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">lastOperation</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">clientId</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="o">||</span> <span class="nx">lastOperation</span><span class="p">.</span><span class="nx">MaxAppliedCommandId</span> <span class="p">&lt;</span> <span class="nx">operationContext</span><span class="p">.</span><span class="nx">MaxAppliedCommandId</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">clientId</span><span class="p">]</span> <span class="p">=</span> <span class="nx">operationContext</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">ErrOutDated</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">reply</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="垃圾回收" class="heading-element"><span>2.3.6 垃圾回收</span>
  <a href="#%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>分片清理协程负责定时检测分片的 <code>GCing</code> 状态，利用<code>lastConfig</code> 计算出对应 raft 组的 gid 和要拉取的分片，然后并行地去删除分片。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Executes garbage collection (GC) tasks to delete shard data from other groups.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">gcAction</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Get the group that was previously responsible for these shards and clean up the shards that are no longer responsible.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gid2Shards</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">getShardIDsByStatus</span><span class="p">(</span><span class="nx">GCing</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create GC tasks for each group (GID)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">gid</span><span class="p">,</span> <span class="nx">shardIDs</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">gid2Shards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">servers</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">configNum</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">shardIDs</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">gcTaskArgs</span> <span class="o">:=</span> <span class="nx">ShardOperationArgs</span><span class="p">{</span><span class="nx">configNum</span><span class="p">,</span> <span class="nx">shardIDs</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Try to delete shard data from each server in the group
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">server</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">servers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">gcTaskReply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">ShardOperationReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">srv</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">makeEnd</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">srv</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="s">&#34;ShardKV.DeleteShardsData&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">gcTaskArgs</span><span class="p">,</span> <span class="nx">gcTaskReply</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">gcTaskReply</span><span class="p">.</span><span class="nx">Err</span> <span class="o">==</span> <span class="nx">OK</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nf">NewDeleteShardsCommand</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">gcTaskArgs</span><span class="p">),</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}(</span><span class="nx">kv</span><span class="p">.</span><span class="nx">lastConfig</span><span class="p">.</span><span class="nx">Groups</span><span class="p">[</span><span class="nx">gid</span><span class="p">],</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">currentConfig</span><span class="p">.</span><span class="nx">Num</span><span class="p">,</span> <span class="nx">shardIDs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span> <span class="c1">// Wait for all GC tasks to complete
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// applyInsertShards applies the insertion of shard data.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">applyInsertShards</span><span class="p">(</span><span class="nx">shardsInfo</span> <span class="o">*</span><span class="nx">ShardOperationReply</span><span class="p">)</span> <span class="o">*</span><span class="nx">CommandReply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// check if the configuration number matches the current one.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">shardsInfo</span><span class="p">.</span><span class="nx">ConfigNum</span> <span class="o">==</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">currentConfig</span><span class="p">.</span><span class="nx">Num</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">shardID</span><span class="p">,</span> <span class="nx">shardData</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">shardsInfo</span><span class="p">.</span><span class="nx">Shards</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">shard</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">stateMachine</span><span class="p">[</span><span class="nx">shardID</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// only pull if the shard is in the Pulling state.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">shard</span><span class="p">.</span><span class="nx">Status</span> <span class="o">==</span> <span class="nx">Pulling</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">shardData</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">shard</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// update the shard status to Garbage Collecting.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">shard</span><span class="p">.</span><span class="nx">Status</span> <span class="p">=</span> <span class="nx">GCing</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">break</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// update last operations with the provided contexts.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">clientId</span><span class="p">,</span> <span class="nx">operationContext</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">shardsInfo</span><span class="p">.</span><span class="nx">LastOperations</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">lastOperation</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">clientId</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="o">||</span> <span class="nx">lastOperation</span><span class="p">.</span><span class="nx">MaxAppliedCommandId</span> <span class="p">&lt;</span> <span class="nx">operationContext</span><span class="p">.</span><span class="nx">MaxAppliedCommandId</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">clientId</span><span class="p">]</span> <span class="p">=</span> <span class="nx">operationContext</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">ErrOutDated</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">reply</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="空日志检测" class="heading-element"><span>2.3.7 空日志检测</span>
  <a href="#%e7%a9%ba%e6%97%a5%e5%bf%97%e6%a3%80%e6%b5%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>根据 raft 论文 5.4.2 节，新 leader 提交之前 term 的日志存在风险。若要提交这类日志，需等新 leader 在自身任期产生新日志，新日志提交时，之前 term 的日志才能随之提交。这意味着若当前 term 迟迟无日志生成并提交，之前 term 的部分日志将一直无法提交，进而可能导致活锁，使日志无法推进。</p>
<p>所以空日志检测协程会定时检测 raft 层的 leader 是否拥有当前 term 的日志，如果没有则提交一条空日志，这使得新 leader 的状态机能够迅速达到最新状态，从而避免多 raft 组间的活锁状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Ensures that a log entry is present in the current term to keep the log active.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">checkEntryInCurrentTermAction</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// If no log entry exists in the current term, execute an empty command
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">HasLogInCurrentTerm</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nf">NewEmptyShardsCommand</span><span class="p">(),</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// applyEmptyShards handles the case for empty shards. This is to prevent the state machine from rolling back.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">ShardKV</span><span class="p">)</span> <span class="nf">applyEmptyShards</span><span class="p">()</span> <span class="o">*</span><span class="nx">CommandReply</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">CommandReply</span><span class="p">{</span><span class="nx">Err</span><span class="p">:</span> <span class="nx">OK</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="shardkv-clerk" class="heading-element"><span>2.4 shardkv clerk</span>
  <a href="#shardkv-clerk" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>clerk结构体：</p>
<ul>
<li><code>sm</code>：用于和<code>shardctrler</code>交互获取集群最新配置（分片 - 组映射）。</li>
<li><code>config</code>：当前集群配置，决定请求发送的依据。</li>
<li><code>makeEnd</code>：创建与服务器的 RPC 连接。</li>
<li><code>leaderIds</code>：记录组 ID 对应的领导服务器 ID，便于请求发送。</li>
<li><code>clientId</code>和<code>commandId</code>：用于唯一确定客户端操作，保证操作的可识别性和顺序性。</li>
</ul>
<p>这里将四种命令封装成一个<code>command</code>函数，其具体逻辑如下：</p>
<ol>
<li>先将操作参数<code>args</code>中的<code>ClientId</code>和<code>CommandId</code>设置为<code>Clerk</code>结构体中的对应值。</li>
<li>根据操作键确定分片所属组 ID。</li>
<li>组内leader查找与请求发送：
<ul>
<li>若组存在，获取组内服务器列表，确定领导 ID（若未记录则默认为 0）。</li>
<li>尝试向领导服务器发送请求，若请求成功且回复正常（<code>Err</code>为<code>OK</code>或<code>ErrNoKey</code>），则更新<code>commandId</code>并返回结果；若回复<code>ErrWrongGroup</code>，则跳出当前组内循环重新获取配置；若请求失败或回复错误码不符，尝试下一个服务器，若遍历完组内服务器都不行，则跳出组内循环。</li>
</ul>
</li>
<li>配置更新：
<ul>
<li>若不存在对应组或组内无合适服务器处理请求，等待 100 毫秒后从<code>shardctrler</code>获取最新配置，重新开始循环处理请求。</li>
</ul>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Clerk</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sm</span>      <span class="o">*</span><span class="nx">shardctrler</span><span class="p">.</span><span class="nx">Clerk</span>             <span class="c1">// Client that communicates with the shardctrler to get the latest configuration data (mapping of shards to groups)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">config</span>  <span class="nx">shardctrler</span><span class="p">.</span><span class="nx">Config</span>             <span class="c1">// The current cluster configuration, including the shard-to-group mapping, based on which Clerk sends requests.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">makeEnd</span> <span class="kd">func</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">labrpc</span><span class="p">.</span><span class="nx">ClientEnd</span> <span class="c1">// Generates an RPC connection to a server, each of which is identified by a unique address.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// You will have to modify this struct.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leaderIds</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span> <span class="c1">// gid -&gt; leaderId, gid is the group id, leaderId is the leader server id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">clientId</span>  <span class="kt">int64</span>       <span class="c1">// generated by nrand(), it would be better to use some distributed ID generation algorithm that guarantees no conflicts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">commandId</span> <span class="kt">int64</span>       <span class="c1">// (clientId, commandId) defines a operation uniquely
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ck</span> <span class="o">*</span><span class="nx">Clerk</span><span class="p">)</span> <span class="nf">Command</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">CommandArgs</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">CommandId</span> <span class="p">=</span> <span class="nx">ck</span><span class="p">.</span><span class="nx">clientId</span><span class="p">,</span> <span class="nx">ck</span><span class="p">.</span><span class="nx">commandId</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">shard</span> <span class="o">:=</span> <span class="nf">key2shard</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">Key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">gid</span> <span class="o">:=</span> <span class="nx">ck</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Shards</span><span class="p">[</span><span class="nx">shard</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">servers</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">ck</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Groups</span><span class="p">[</span><span class="nx">gid</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// if not set, set the default leader id to 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">ck</span><span class="p">.</span><span class="nx">leaderIds</span><span class="p">[</span><span class="nx">gid</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">ck</span><span class="p">.</span><span class="nx">leaderIds</span><span class="p">[</span><span class="nx">gid</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">oldLeaderId</span> <span class="o">:=</span> <span class="nx">ck</span><span class="p">.</span><span class="nx">leaderIds</span><span class="p">[</span><span class="nx">gid</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="nx">newLeader</span> <span class="o">:=</span> <span class="nx">oldLeaderId</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// send the request to the leader server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">ok</span> <span class="o">:=</span> <span class="nx">ck</span><span class="p">.</span><span class="nf">makeEnd</span><span class="p">(</span><span class="nx">servers</span><span class="p">[</span><span class="nx">newLeader</span><span class="p">]).</span><span class="nf">Call</span><span class="p">(</span><span class="s">&#34;ShardKV.Command&#34;</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">ok</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="o">==</span> <span class="nx">OK</span> <span class="o">||</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="o">==</span> <span class="nx">ErrNoKey</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">ck</span><span class="p">.</span><span class="nx">commandId</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Value</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">ok</span> <span class="o">&amp;&amp;</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="o">==</span> <span class="nx">ErrWrongGroup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">break</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// try the next server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">newLeader</span> <span class="p">=</span> <span class="p">(</span><span class="nx">newLeader</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">servers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// check if all servers have been tried
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="k">if</span> <span class="nx">newLeader</span> <span class="o">==</span> <span class="nx">oldLeaderId</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="k">break</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Query the latest configuration from the shardctrler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">ck</span><span class="p">.</span><span class="nx">config</span> <span class="p">=</span> <span class="nx">ck</span><span class="p">.</span><span class="nx">sm</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结" class="heading-element"><span>3 总结</span>
  <a href="#%e6%80%bb%e7%bb%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>这个实验难度还是非常大的，基本上不是自己独立完成，借鉴了<a href="https://github.com/OneSizeFitsQuorum"target="_blank" rel="external nofollow noopener noreferrer">Github OneSizeFitsQuorum<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>的很多代码，其讲解也非常详细。最后也是成功通过了实验测试。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125349042.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125349042.png?size=small" data-sub-html="<h2>image-20241020125349042</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125349042.png" alt="image-20241020125349042" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125349042.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125349042.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125349042.png?size=large 2x" data-title="image-20241020125349042" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125315201.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125315201.png?size=small" data-sub-html="<h2>image-20241020125315201</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125315201.png" alt="image-20241020125315201" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125315201.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125315201.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241020125315201.png?size=large 2x" data-title="image-20241020125315201" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>从这个实验中也学到了很多：</p>
<ol>
<li>可以将多个操作封装成一个操作接口去处理，能让代码变得更简洁且易于理解，从kvraft-&gt;shardkv，这种设计理想还是非常不错的。</li>
<li>要注意在分片迁移和垃圾回收中，并不是由被拉取的服务器来主动拉取和回收的，而都是由拉取服务器进行RPC操作通知。这样的好处是能够使这两个操作同步，因为被拉取服务器不知道该什么时候回收数据的。</li>
<li>leader不能先更新分片状态，它只能先进行检测，更新还是需要通过raft共识协议，等日志落地后通过apply协程来进行更新，且总是需要去判断leader的身份。</li>
<li>可以通过读写锁来优化并发性能，但需要注意的是何时采用读锁很关键。如果不确定，可以一把大锁保平安。</li>
</ol>
<h2 id="参考" class="heading-element"><span>4 参考</span>
  <a href="#%e5%8f%82%e8%80%83" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li><a href="https://blog.csdn.net/qq_43460956/article/details/134885751"target="_blank" rel="external nofollow noopener noreferrer">MIT 6.824 Lab 4 ShardKV详细实现思路及过程<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://github.com/OneSizeFitsQuorum/MIT6.824-2021/blob/master/docs/lab4.md#%E7%BB%93%E6%9E%84"target="_blank" rel="external nofollow noopener noreferrer">Github OneSizeFitsQuorum/MIT6.824-2021<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://zhuanlan.zhihu.com/p/464097239"target="_blank" rel="external nofollow noopener noreferrer">知乎mit-6.824 分布式系统2021<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item><item><title>分布式系统理论详解：CAP、BASE、PACELC</title><link>https://hezephyr.github.io/posts/10.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/10.%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA/</guid><description><![CDATA[<h2 id="cap理论" class="heading-element"><span>1 CAP理论</span>
  <a href="#cap%e7%90%86%e8%ae%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>CAP理论是分布式系统领域中被广泛讨论的一个理论，由 Eric Brewer 在 2000 年提出，一般系统架构师会把其作为衡量系统设计的准则，其中CAP是一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）的缩写。</p>
<ul>
<li><strong>一致性（C）</strong>：这里特指强一致性，即任何时刻都可以读到最近一次成功更新的副本数据。</li>
<li><strong>可用性（A）</strong>：指系统中一部分节点故障后，系统还能提供服务。</li>
<li><strong>分区容错性（P）</strong>：指系统能够在网络分区（网络故障导致不同节点分布在不同的子网络，各个子网络内网络正常）的情况下还能提供服务。</li>
</ul>
<p>它指出在一个分布式系统中，<font color="red">C、A和P这三个特性不能同时被满足，最多只能同时满足其中的两个</font>。</p>
<blockquote>
<p>反证例子：</p>
<p>该系统由 A、B、C 三个节点构成，因 C 节点故障引发网络分区问题。若要完全满足 CAP 理论中的一致性要求，当客户端进行数据写入时，A 节点必须等待 C 节点同步完成，方可向客户端返回写入成功。</p>
<p>然而此时 C 节点已故障，数据注定无法写入。在此情况下，若出现读取该数据的请求，仅有两种应对之策：</p>
<ol>
<li>放弃可用性，即等待所有节点数据达成一致状态，确保任意节点返回的数据相同，但此时系统必然无法及时响应；</li>
<li>放弃一致性，向客户端返回已写入 A、B 节点的新数据，不过后续 C 节点恢复后，当请求到达 C 节点时，会出现读取到的数据不一致的情况。</li>
</ol>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014210027442.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014210027442.png?size=small" data-sub-html="<h2>image-20241014210027442</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014210027442.png" alt="image-20241014210027442" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014210027442.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014210027442.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014210027442.png?size=large 2x" data-title="image-20241014210027442" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
</blockquote>
<p>所以在实际的分布式系统设计中，我们需要根据具体的业务需求来进行取舍。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014205142852.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014205142852.png?size=small" data-sub-html="<h2>image-20241014205142852</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014205142852.png" alt="image-20241014205142852" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014205142852.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014205142852.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014205142852.png?size=large 2x" data-title="image-20241014205142852" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<ol>
<li><font color="red">选择 AP 意味着舍弃强一致性，以保证高可用性和分区容错性</font>。这种设计在大部分分布式系统中较为常见，在 AP 架构下，系统能够快速响应客户端的请求，即使在网络分区的情况下，也能尽量保证部分节点可用，从而为用户提供不间断的服务。然而，由于放弃了强一致性，可能会导致不同节点上的数据在同一时刻不一致，但可以通过后续的同步过程逐渐达到最终一致性。</li>
<li><font color="red">选择 CP 意味着舍弃高可用性，以保证强一致性和分区容错性</font>。在这种架构下，系统会优先确保数据的一致性，即使在网络分区的情况下，也会暂停部分节点的服务以保证数据的一致性。例如，一些数据库会在网络分区发生时，停止对不一致数据的读写操作，直到所有节点的数据达成一致。这种架构适用于对数据一致性要求极高的场景，如金融交易系统等。</li>
<li><font color="red">选择CA意味着舍弃P，以保证高可用性和强一致性</font>。这种情况在分布式系统中几乎不存在，因为网络分区在分布式系统中是必然的，P是分布式系统的前提。</li>
</ol>
<blockquote>
<p>从图中我们可以发现，关系型数据库多为CA架构，<font color="red">因为关系型数据库通常采用集中式或主从复制的架构，在设计上更注重数据的一致性和事务的完整性，对于可用性也有较高的要求</font>，所以传统的关系型数据库通常在单一数据中心或较小规模的环境下运行，网络分区的情况相对较少。而在分布式系统中，由于节点众多且分布在不同的物理位置，网络分区的可能性大大增加，所以很难同时保证高可用性和强一致性，因此在 AP 和 CP 中较少出现关系型数据库。</p>
</blockquote>
<h2 id="base-理论" class="heading-element"><span>2 BASE 理论</span>
  <a href="#base-%e7%90%86%e8%ae%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>BASE理论是由 eBay 的架构师 Dan Pritchett 在 2008 年提出的，能适用于大型高可用可扩展的分布式系统。该理论提出了三个概念：</p>
<ol>
<li><code>BA</code>：<code>Basically Available</code>（基本可用）。当系统出现故障或意外情况时，允许放弃掉部分可用性，保证核心功能可用，例如大促时降级策略等。</li>
<li><code>S</code>：<code>Soft state</code>（软状态）。允许系统存在中间状态，并且该中间状态不会影响系统整体可用性。</li>
<li><code>E</code>：<code>Eventually consistent</code>（最终一致性）。指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。<font color="red">即意味着中间状态，只会短暂存在，在一定时间后，肯定会变成最终状态</font>。</li>
</ol>
<blockquote>
<p>在彻底认识BASE理论之前，我们需要回顾传统关系型数据库的<code>ACID</code>理论，即：</p>
<ul>
<li><strong>“Atomicity”（原子性）</strong>：将组成事务的多个操作视作一个不可分割的整体，要么全部成功，要么全部失败，不能仅部分生效。</li>
<li><strong>“Consistency”（一致性）</strong>：事务执行前后，数据库只能从一个一致状态转变为另一个一致状态，即事务执行对整体数据产生的变化是一致的。</li>
<li><strong>“Isolation”（隔离性）</strong>：多事务并发执行时，各事务之间不能被其他事务干扰，就如同每个事务都在独立的沙箱中执行。</li>
<li><strong>“Durability”（持久性）</strong>：一旦事务提交，无论发生何种状况（如故障、宕机等），该事务对数据的变更都会永久保存。</li>
</ul>
</blockquote>
<p>BASE不同于ACID的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。</p>
<blockquote>
<p>如果<code>ACID</code>为分布式数据库提供了一致性选择，那如何在分布式数据库里保证可用性呢？一个答案就是<code>BASE</code>理论。</p>
</blockquote>
<p>所以很多人会认BASE理论是在CAP基础上，满足AP后对C方面的拓展与延伸，但这其实并不完全正确，<font color="red">BASE并非CAP的延伸理论，它是分布式场景中ACID理论的替代品</font>。CAP的一致性，关注的是数据一致性；BASE的一致性，关注的是状态一致性，与ACID中的一致性是相同概念。</p>
<h2 id="pacelc理论" class="heading-element"><span>3 PACELC理论</span>
  <a href="#pacelc%e7%90%86%e8%ae%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>PACELC（前者是CAP，后者是ELC，else-&gt;latency or consistency）理论才是CAP理论的扩展，由Daniel J. Abadi提出，进一步拓展了CAP理论。它考虑的是这样一个问题：系统在大部分时间下，分区都是平稳运行的，并不会出错，在这种情况下，系统设计要均衡的其实就是延迟与数据一致性的问题，为了保证数据一致性，写入与读取的延迟就会增高。这就引出了 PACELC 理论。</p>
<blockquote>
<p>如果有分区(P)，系统就必须在可用性（A）和一致性（C）之间权衡; 否则当系统运行在无分区情况下,系统需要在延迟（L）和 一致性（C）之间权衡。</p>
</blockquote>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014231953269.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014231953269.png?size=small" data-sub-html="<h2>image-20241014231953269</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014231953269.png" alt="image-20241014231953269" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014231953269.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014231953269.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241014231953269.png?size=large 2x" data-title="image-20241014231953269" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>如今的分布式系统设计指导理论应该采用PACELC理论，来替代CAP理论，因为它不仅关注网络分区的极端情况，还涵盖了系统在正常运行时的表现。即使没有网络分区，系统设计依然要考虑在延迟和一致性上的取舍。对于现代分布式系统而言，延迟与一致性之间的平衡往往是影响用户体验和系统性能的关键问题。</p>
]]></description></item><item><title>【论文阅读笔记】Bigtable: A Distributed Storage System for Structured Data</title><link>https://hezephyr.github.io/posts/11.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0bigtable/</link><pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/11.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0bigtable/</guid><description><![CDATA[<h2 id="简介" class="heading-element"><span>1 简介</span>
  <a href="#%e7%ae%80%e4%bb%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Bigtable 是 Google 设计的用于<font color="red">管理结构化数据</font>的分布式存储系统，可扩展到数千台服务器存储 PB 级数据。<font color="red">它不是关系数据库，而是一种稀疏、分布式、持久性多维排序映射（K/V）</font>。</p>
<p>Bigtable被 60 多个 Google 产品使用，涵盖不同数据规模和延迟要求的应用，这得益于 BigTable 提供的简单数据模型可以使<strong>客户端动态控制</strong>数据的<strong>布局和格式</strong>。</p>
<h2 id="数据模型" class="heading-element"><span>2 数据模型</span>
  <a href="#%e6%95%b0%e6%8d%ae%e6%a8%a1%e5%9e%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>一个 Bigtable 就是一个<strong>稀疏、分布式、持久</strong>的<strong>多维有序</strong>映射表（map），数据通过<strong>行键、列键和一个时间戳</strong>进行索引，表中的每个数据项都是<strong>不作理解的字节数组</strong>。形如：</p>
<blockquote>
<p><code>(row:string, column:string, time:int64) -&gt; string</code></p>
</blockquote>
<p>假设我们想要拷贝一个可能被很多项目都使用的、很大的网页集合以及相关的信息，让我们把这个特定的表称为Webtable。在Webtable当中，我们用网页的 URL 作为行键，网页某些信息作为列键，将网页内容存储在 <code>contents:</code> 列，并记录抓取网页时对应的时间戳，最终存储布局如下图所示。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_data_model?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_data_model?size=small" data-sub-html="<h2>image-20241013134206507</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_data_model" alt="image-20241013134206507" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_data_model?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_data_model?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_data_model?size=large 2x" data-title="image-20241013134206507" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h3 id="行" class="heading-element"><span>2.1 行</span>
  <a href="#%e8%a1%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>行键为任意字符串（最大64KB，多数用户使用的在10 - 100字节），<font color="red">单行数据读/写操作是原子的</font>，这里类似Mysql的行锁，锁粒度并没有达到列级别，便于推断并发更新同一行时系统行为。</p>
<p>Bigtable按行键的字典序组织数据，动态划分行范围，<strong>每个行范围是一个tablet</strong>，作为请求分散和负载均衡的最小单位，这样读取小行范围高效，只需与少量机器通信，而且可以选择合适的行键有效的利用数据的位置相关性。</p>
<p>例如Webtable中，反转URL的hostname字段，相同域的页面存为连续行，如<code>www.google.com</code>存为<code>com.google.www</code>，可提高主机和域分析效率。</p>
<h3 id="列族" class="heading-element"><span>2.2 列族</span>
  <a href="#%e5%88%97%e6%97%8f" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>多个列键可以组织成列族，<font color="red">列族是访问控制的基本单位</font>。一般来说，存放在同一列族的数据通常都属于同一类型。</p>
<p>必须先创建一个列族，才能向这个列族内的列写入数据，创建完成后，就可以使用其中的列键。一张tablet的列族最多几百个，且很少改变，但列的数量没有限制。</p>
<p><strong>列键的格式</strong>：<code>列族:限定词</code>。例如Webtable中有一个<strong>列族</strong>是<code>anchor</code>，这个列族的每一个列键代表一个锚链接，<code>anchor</code>列族的<strong>限定值</strong>是引用这个网页的站点名，对应的数据项内容是链接的文本。</p>
<p><strong>访问控制、磁盘和内存记账都是在列族层面做的</strong>。</p>
<h3 id="时间戳" class="heading-element"><span>2.3 时间戳</span>
  <a href="#%e6%97%b6%e9%97%b4%e6%88%b3" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p><font color="red">Bigtable中的每个数据均可存储多个版本，不同版本通过时间戳索引</font>。 时间戳为64位整数，可由Bigtable指定，此时为毫秒级的真实时间戳；也可由客户端应用指定，为避免冲突，应用必须确保时间戳的唯一性。</p>
<p>为了减轻多个版本数据的管理负担，我们对每一个列族配有两个设置参数，使Bigtable能够自动进行垃圾回收。</p>
<ul>
<li>保留最后的$N$个版本；</li>
<li>保留最近某段时间内的版本。</li>
</ul>
<p>在Webtable中，每个页面的时间戳为该页面被爬取时的时间，我们设置只保留最后的3个版本。</p>
<h2 id="api" class="heading-element"><span>3 API</span>
  <a href="#api" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Bigtable API提供了创建和删除表和列族的功能。它还提供用于修改集群、表和列族元数据的功能，比如如访问控制权限。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_API?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_API?size=small" data-sub-html="<h2>image-20241013155434953</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_API" alt="image-20241013155434953" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_API?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_API?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/Bigtable_API?size=large 2x" data-title="image-20241013155434953" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>Bigtable还支持一些其它的特性，利用这些特性，用户可以对数据进行更复杂的处理。</p>
<ol>
<li>支持单行上的事务处理。</li>
<li>允许把数据项做整数计数器：<code>Increment(row_key, column_key, increment)</code>。</li>
<li>Bigtable允许用户在服务器地址空间上执行脚本程序。</li>
<li>Bigtable提供一些Wrapper类，其可以作为MapReduce框架的输入输出。</li>
</ol>
<h2 id="基础构建" class="heading-element"><span>4 基础构建</span>
  <a href="#%e5%9f%ba%e7%a1%80%e6%9e%84%e5%bb%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Bigtable 构建在其他几个 Google 的基础设施之上。</p>
<ul>
<li>GFS</li>
<li>SSTable</li>
<li>Chubby</li>
</ul>
<h3 id="gfs" class="heading-element"><span>4.1 GFS</span>
  <a href="#gfs" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Bigtable使用GFS<strong>存储日志文件和数据文件</strong>，<font color="red">Bigtable集群通常和其他一些分布式应用共享一个服务器资源池</font>，依靠集群管理系统做任务调度、资源管理、故障处理和机器监控等。</p>
<h3 id="sstable" class="heading-element"><span>4.2 SSTable</span>
  <a href="#sstable" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Bigtable <strong>内部使用 Google 的 SSTable 格式存储数据</strong>。SSTable是一个持久化、排序的、不可更改的Map结构。从内部看，SSTable是一系列的数据块，并通过块索引（存储在SSTable的末尾）定位，块索引在打开SSTable时加载到内存中，一次查询只需要一次磁盘寻址：首先在<strong>内存</strong>中通过二分查找找到块索引，然后定位到数据块在<strong>磁盘</strong>中的位置，从<strong>磁盘</strong>读取相应的数据。<font color="red">也可以直接将整个SSTable映射到内存</font>，这样查询就不需要磁盘操作了。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013160712962.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013160712962.png?size=small" data-sub-html="<h2>image-20241013160712962</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013160712962.png" alt="image-20241013160712962" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013160712962.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013160712962.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013160712962.png?size=large 2x" data-title="image-20241013160712962" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h3 id="chubby" class="heading-element"><span>4.3 Chubby</span>
  <a href="#chubby" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Bigtable还依赖一个<strong>高可用的、持久的分布式锁服务Chubby</strong>（类Zookeeper）。Chubby服务维护5个活动副本，其中一个选为Master并对外提供服务，并通过Paxos算法来保证副本一致性。</p>
<p>另外Chubby提供一个包含<strong>目录和小文件</strong>命名空间，<strong>每个目录或文件都可以作为一个锁</strong>，读或写一个文件是<strong>原子的</strong>。Chubby客户端维护了这些文件的一致性缓存。</p>
<p>每个 Chubby 客户端都会和 Chubby 服务维持一个 Session。当一个客户端的租约到期 并且无法续约时，这个 Session 就失效了，失效会失去它之前的锁和打开的文件句柄。Chubby 客户端还可以在 Chubby 文件和目录上注册回调函数，当文件/目录有变化或者 Session 过期时，就会收到通知。</p>
<p>Bigtable使用Chubby来完成几个任务：</p>
<ol>
<li>确保任意时间只有一个活动Master副本。</li>
<li>存储数据的引导位置（根tablet）。</li>
<li>发现Tablet服务器并最终确定tablet服务器死亡。</li>
<li>存储Bigtable模式信息（每个表的列族信息）。</li>
<li>存储访问控制列表等</li>
</ol>
<blockquote>
<p><font color="red">Chubby不可用 = Bigtable不可用</font></p>
</blockquote>
<h2 id="实现" class="heading-element"><span>5 实现</span>
  <a href="#%e5%ae%9e%e7%8e%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Bigtable包括3个主要的组件：</p>
<ol>
<li>链接到每个客户端的库。</li>
<li>1个master服务器。</li>
<li>多个tablet服务器。</li>
</ol>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/BigTable_Component?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/BigTable_Component?size=small" data-sub-html="<h2>image-20241013203213146</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/BigTable_Component" alt="image-20241013203213146" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/BigTable_Component?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/BigTable_Component?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/BigTable_Component?size=large 2x" data-title="image-20241013203213146" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>master服务器职责：</p>
<ul>
<li>将tablet分配给tablet服务器。</li>
<li>检测tablet服务器的过期及添加事件。</li>
<li>对tablet服务器负载均衡。</li>
<li>对GFS中的文件的进行垃圾回收。</li>
<li>处理模式变化，如创建表、创建 / 删除列族。</li>
</ul>
<p>tablet服务器职责：</p>
<ul>
<li>管理一组tablets（10~1000个tablet）。</li>
<li>处理对 tablets 的读写请求。</li>
<li>当 tablets 增长过大（100 - 200MB）时进行分裂。</li>
</ul>
<p><font color="red">客户端不依赖master获取 tablet 位置信息，直接与 tablet 服务器进行读写通信</font>，故Master的负载很低。</p>
<p>每个 Bigtable 集群会有很多张 table，每张 table 会有很多 tablets，每个 tablets 包 含一个行键范围内的全部数据。 初始时每个 table 只包含一个 tablet。当 table 逐渐变大时，它会自动分裂成多个 tablets，<strong>默认情况下每个 tablet 大约 100-200MB</strong>。</p>
<h3 id="tablet-位置" class="heading-element"><span>5.1 Tablet 位置</span>
  <a href="#tablet-%e4%bd%8d%e7%bd%ae" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>使用<font color="red">类似B+树的三层结构</font>存储Tablet的位置信息，如下图所示：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013204350023.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013204350023.png?size=small" data-sub-html="<h2>image-20241013204350023</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013204350023.png" alt="image-20241013204350023" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013204350023.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013204350023.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013204350023.png?size=large 2x" data-title="image-20241013204350023" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<ul>
<li>第一层：存储在<strong>Chubby 中的文件</strong>，其中包含了根tablet的位置。所以一旦Chubby服务不可用，整个Bigtable丢失了根tablet的位置，整个服务就不可用。</li>
<li>第二层：<strong>根tablet</strong>，实际上就是元数据表的第一个tablet，保存着元数据表其他tablet的位置信息，根tablet很特殊，为了保证整个树的深度不变，根tablet从不分裂。</li>
<li>第三层：<strong>其他元数据表的tablet</strong>，每个都包含了一组用户tablet位置信息集合。这些tablet与根tablet共同构成整个元数据表。</li>
</ul>
<p>在元数据表内，<font color="red">每个Tablet的位置信息都存储在一个行键下，行键是通过tablet所在表的标识符和最后一行生成的</font>。</p>
<p>元数据表每一行都存储约1KB内存数据，即在一个128MB的元数据表中，采用这种3层存储结构，可寻址$2^34$个Tablets。</p>
<p>用户程序使用的库会缓存Tablet的位置信息，如果某个Tablet位置信息没有缓存或缓存失效，那么客户端会在树状存储结构中递归查询tablet位置信息，包括：</p>
<ol>
<li>请求Chubby提供根tablet位置。</li>
<li>请求根tablet提供其他元数据tablet位置。</li>
<li>请求元数据tablet获取用户tablet位置。</li>
</ol>
<p>尽管tablet的位置信息是存放在内存里的，对它的操作不必访问GFS文件系统，但通常还是会预取Tablet地址来进一步减少访问的开销。</p>
<h3 id="tablet-分配" class="heading-element"><span>5.2 Tablet 分配</span>
  <a href="#tablet-%e5%88%86%e9%85%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p><strong>每个 tablet 每次只会分配给一个 tablet服务器</strong>。这个由master来控制分配，master会跟踪：</p>
<ul>
<li>tablet服务器集的存活状态（通过Chubby跟踪，启动时会在<strong>在特定的 Chubby 目录下创建和获取一个名字唯一的独占锁</strong>。 master 通过<strong>监听这个目录</strong>来发现 tablet服务器集）。</li>
<li>tablet到tablet服务器的当前分配。</li>
<li>当前为分配的tablet。</li>
</ul>
<p>当某个 Tablet 未分配时，master 通过向可用的tablet服务器发送加载请求，将tablet分配给该tablet服务器。</p>
<p>当tablet服务器不提供服务时，master会通过<font color="red">轮询Chubby上tablet服务器文件锁的状态</font>检查出来，确认后会删除其在Chubby上的文件锁，使其不再提供服务。删除后，master就把之前分配给它的所有的tablet放入未分配的tablet集合中。</p>
<p>当集群管理系统启动了一个master服务器之后，master首先要了解当前tablet的分配状态，之后才能够修改分配状态。master服务器在启动的时候执行以下步骤：</p>
<ol>
<li>从Chubby获取一个唯一的master锁，保证Chubby只有一个master实例。</li>
<li>扫描Chubby的<code>servers</code>目录，获取当前正在运行的服务器列表。</li>
<li>和所有的正在运行的tablet服务器通信，获取每个tablet服务器上tablet的分配信息。</li>
<li>扫描元数据表获取所有的tablet的集合。在扫描的过程中，如果发现还有未分配的tablet，master就将这个tablet加入未分配的tablet集合并等待合适的时机分配。</li>
</ol>
<p><font color="red">一个复杂的情况是在分配元数据tablet之前，无法对元数据表表进行扫描</font>。</p>
<p>因此，如果在步骤3中发现根tablet还没有被分配出去，那master就要先把它放到未分配的tablet集合，然后去执行步骤4，这样就保证了根tablet会被分配出去。</p>
<p>由于根tablet包括了所有元数据tablet的名字，因此master服务器扫描完根tablet以后，就得到了所有的元数据表表的Tablet的名字了。</p>
<p>只有在发生以下情况时，当前的 tablets 集合才会有变化：</p>
<ol>
<li>创建或删除一个 table。</li>
<li>两个 tablets 被合并了</li>
<li>一个 tablet 分裂成两个小的tablet。</li>
</ol>
<p>Master可以跟踪记录所有这些事件，因为除了最后一个事件外的两个事件都是由它启动的。</p>
<p><font color="red">tablet分裂事件需要特殊处理，因为它是由Tablet服务器启动</font>。在分裂操作完成之后，tablet服务器将新的tablet信息记录到元数据表，然后提交这次分裂。提交后，master会收到通知。如果通知丢失（由于tablet服务器或者master挂掉），master会在它下次要求一个tablet服务器加载tablet时发现，这个 tablet 服务器会将这次分裂信息通知给 master，因为它在元数据表中发现的 tablets 项只覆盖 master 要求它加载的 tablets 一部分。</p>
<h3 id="为-tablet-提供服务" class="heading-element"><span>5.3 为 tablet 提供服务</span>
  <a href="#%e4%b8%ba-tablet-%e6%8f%90%e4%be%9b%e6%9c%8d%e5%8a%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>如下图所示，Tablet的持久化状态信息保存在GFS上。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013215922693.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013215922693.png?size=small" data-sub-html="<h2>image-20241013215922693</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013215922693.png" alt="image-20241013215922693" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013215922693.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013215922693.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013215922693.png?size=large 2x" data-title="image-20241013215922693" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>更新会提交到一个提交日志文件，其中保存了redo记录，更新操作分2类：</p>
<ul>
<li>最近提交的更新操作会存放在一个排序缓存中，称为<code>memtable</code>。</li>
<li>其他老一些的更新存储在 SSTable 中，落地在GFS上。</li>
</ul>
<p>为了恢复一个tablet，tablet服务器从元数据表当中读取这个tablet的元数据。《这个元数据包含了SSTable列表，<font color="red">其中每个SSTable都包括一个tablet和一个重做点（redo point）的集合，这些redo point是一些指针，它们指向那些可能包含tablet所需数据的重做日志</font>。服务器把SSTable索引读入内存，执行重做点以后的所有已经提交的更新来重建memtable。</p>
<p>当一个写操作到达tablet服务器时，它会检查写操作是否格式正确且发送者是否有权限执行此操作。鉴权的实现方式是<font color="red">从Chubby文件读取允许的写者列表</font>，这个Chubby文件通常总能够在Chubby客户端缓存中找到。</p>
<p>一个有效的变更会被写入提交日志中。批量提交是为了优化许多小变更操作的吞吐量。<font color="red">在写操作已经被提交以后，它的内容就会被插入到memtable</font>。</p>
<p>一次读操作到达 tablet server 时，也会执行类似的格式检查和鉴权。一个有效地读操作是在一系列SSTable和memtable的合并视图上执行的（都是字典序排序，可高效生成合并视图）。</p>
<p><font color="red">当tablet发生合并或分裂操作时，正在到达的读写操作仍然可以继续进行</font>。</p>
<h3 id="压缩" class="heading-element"><span>5.4 压缩</span>
  <a href="#%e5%8e%8b%e7%bc%a9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>####.1 小压缩</p>
<p>当<code>memtable</code>大小达到一个阈值时，<code>memtable</code>会被冻结，并创建一个新的<code>memtable</code>，这个冻结的<code>memtable</code>会转换为SSTable并写入GFS，这个过程称为<font color="red">小压缩</font>。</p>
<p>小压缩过程为了减少tablet服务器的内存使用量，以及减少在灾难恢复时从提交日志读取的数据量。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013221244565.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013221244565.png?size=small" data-sub-html="<h2>image-20241013221244565</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013221244565.png" alt="image-20241013221244565" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013221244565.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013221244565.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013221244565.png?size=large 2x" data-title="image-20241013221244565" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>####.2 主压缩</p>
<p>每次小压缩都会创建一个新SSTable，如果不加额外处理，SSTable数量过多而影响读操作（需要合并多个SSTable才能读到需要的内容）。所以Bigtable会定期合并SSTable文件来限制其数量，这个过程称为<font color="red">主压缩</font>。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013222419239.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013222419239.png?size=small" data-sub-html="<h2>image-20241013222419239</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013222419239.png" alt="image-20241013222419239" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013222419239.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013222419239.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013222419239.png?size=large 2x" data-title="image-20241013222419239" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>非主压缩所产生的SSTable会包含特殊的删除信息（entry），用于标记其中已经被删除的数据 —— 实际上这些数据还没有被真正删除，只是标记为已删除。而 主压缩产生的 SSTable 不会包含这些删除信息或者已删除的数据。</p>
<p>BigTable定期检查它的所有tablet，并执行主压缩操作。<font color="red">这些主压缩过程可以允许BigTable及时回收被删除数据占用的资源，并且保证被删除数据在一定时间内就可以及时的从系统中消失</font>，这对于一些存储敏感数据的服务来说是非常重要的。</p>
<h2 id="优化" class="heading-element"><span>6 优化</span>
  <a href="#%e4%bc%98%e5%8c%96" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="局部性组" class="heading-element"><span>6.1 局部性组</span>
  <a href="#%e5%b1%80%e9%83%a8%e6%80%a7%e7%bb%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>客户端可以将多个列族组合成一个局部性组，<font color="red">每个tablet会为每个局部性组生成一个单独的SSTable</font>，将一般不会一起访问的列族划分到不同的局部性组能提高读取效率。</p>
<p>此外，可以基于局部性组<strong>专门设定一些调优参数</strong>，如是否存储于内存等。</p>
<h3 id="压缩-1" class="heading-element"><span>6.2 压缩</span>
  <a href="#%e5%8e%8b%e7%bc%a9-1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>客户端可以控制某个局部性组的SSTable 是否需要压缩，以及用什么格式压缩。很多客户端都使用一种自定义的双通压缩算法：</p>
<ul>
<li>先使用 Bentley-Mcilroy 算法压缩大窗口内的长公共前缀。</li>
<li>再使用一个快速算法压缩 16KB 窗口内的重复字符串。</li>
</ul>
<h3 id="缓存" class="heading-element"><span>6.3 缓存</span>
  <a href="#%e7%bc%93%e5%ad%98" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>tablet服务器可以使用二级缓存策略来提高读操作性能。两级的缓存针对性不同：</p>
<ul>
<li>第一级缓存为<strong>扫描缓存</strong>：缓存tablet服务器通过SSTable接口获取的Key-Value对（时间局部性：适用于<strong>频繁访问相同数据</strong>的应用）</li>
<li>第二级缓存为<strong>块缓存</strong>：缓存从GFS读取的SSTable块（空间局部性：适用于<strong>连续访问相邻（相近）数据</strong>的应用。）</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013224524700.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013224524700.png?size=small" data-sub-html="<h2>image-20241013224524700</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013224524700.png" alt="image-20241013224524700" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013224524700.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013224524700.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013224524700.png?size=large 2x" data-title="image-20241013224524700" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h3 id="布隆过滤器" class="heading-element"><span>6.4 布隆过滤器</span>
  <a href="#%e5%b8%83%e9%9a%86%e8%bf%87%e6%bb%a4%e5%99%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>一个读操作必须读取构成tablet状态的所有SSTable数据，故如果这些SSTable不在内存便需多次访问磁盘。我们通过允许客户端对特定局部性组的SSTable指定布隆过滤器来降低访问次数。<strong>Bloom 过滤器可以判断一个 SSTable 是否包含指定行/列对对应的 数据</strong>。对于特定的应用来说，给 tablet服务器增加少量内存用于存储 Bloom 过滤器，就 可以<strong>极大地减少读操作的磁盘访问</strong>。</p>
<p>使用Bloom过滤器也可以隐式的达到了当查询的行和列不存在时，不需要访问磁盘。</p>
<h3 id="commit日志实现" class="heading-element"><span>6.5 Commit日志实现</span>
  <a href="#commit%e6%97%a5%e5%bf%97%e5%ae%9e%e7%8e%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>如果每个tablet操作的Commit日志单独写一个文件，会导致日志文件数过多，会导致底层 GFS 大量文件的并发写。另外，每个 tablet 一个 log 文件的设计还会降低组提交（group commit，批量提交）优化的有效性，因为每个组都会很小。</p>
<p>因此，为了克服以上问题，<font color="red">我们为每个 tablet服务器维护一个commit log，将属于这个 tablet服务器的不同的 tablet 操作都写入这同一个物理上的 log 文件</font>。</p>
<p>这种方式使得常规操作的性能得到了很大提升，但是，它使 tablet 恢复过程变得复杂。当一台tablet服务器挂了，需要将其上面的tablet均匀恢复到其他Tablet服务器，则其他服务器都得读取完整的Commit日志。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013225806000.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013225806000.png?size=small" data-sub-html="<h2>image-20241013225806000</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013225806000.png" alt="image-20241013225806000" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013225806000.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013225806000.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241013225806000.png?size=large 2x" data-title="image-20241013225806000" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>为了避免多次读Commit日志，我们将日志按关键字<code>(table; row name; log sequence number)</code>排序，让同一个tablet的操作日志连续存放。</p>
<h3 id="tablet恢复提速" class="heading-element"><span>6.6 Tablet恢复提速</span>
  <a href="#tablet%e6%81%a2%e5%a4%8d%e6%8f%90%e9%80%9f" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>master转移Tablet时，源tablet服务器会对这个Tablet做一次小压缩，在此压缩后，源tablet服务器停止为tablet服务。在卸载tablet之前，源tablet服务器会执行另一个（非常快）的小压缩，<font color="red">以消除在第一个小压缩时到达的tablet服务器日志中任何未经压缩的状态</font>。然后tablet就可以装载到新的tablet服务器上了，并且不需要从日志中进行恢复。</p>
<h3 id="利用不变性" class="heading-element"><span>6.7 利用不变性</span>
  <a href="#%e5%88%a9%e7%94%a8%e4%b8%8d%e5%8f%98%e6%80%a7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>由于生成的所有SSTables都是不可变的，因此Bigtable系统的各个部分都得到了简化。</p>
<ul>
<li>从SStable读取时无需同步$\rightarrow$对行进行简单的并发控制。</li>
<li>读取和写入访问的唯一可变数据结构是<code>memtable</code>$\rightarrow$每个<code>memtable</code>行使用写时复制并允许读取和写入并行进行。</li>
<li>每个 tablet 的 SSTable 会注册到元数据表。master 会对过期的 SSTable 进行先标记后清除，其中元数据表记录了这些 SSTable 的对应的 tablet 的 root。</li>
<li>最后，<strong>SSTable 的不可变性使得 tablet 分裂过程更快</strong>。我们直接让子 tablet 共享父 tablet 的 SSTable ，而不是为每个子 tablet 分别创建一个新的 SSTable。</li>
</ul>
]]></description></item><item><title>【论文阅读笔记】The Chubby lock service for loosely-coupled distributed systems</title><link>https://hezephyr.github.io/posts/10.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0chubby/</link><pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/10.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0chubby/</guid><description><![CDATA[<h2 id="简介" class="heading-element"><span>1 简介</span>
  <a href="#%e7%ae%80%e4%bb%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Chubby是一个<strong>面向松耦合分布式</strong>系统的锁服务，被广泛应用于Google内部的多个关键系统中，如GFS（Google文件系统）和Bigtable。在GFS中，Chubby用于指定主服务器；而在Bigtable中，它不仅支持主服务器选举、帮助主服务器发现其所管理的子服务器以及协助客户端定位主服务器，还充当了少量元数据存储的角色。
Chubby允许客户端同步活动并就环境基本信息达成一致。主要目标包括可靠性、对大量客户端的可用性以及易于理解的语义，吞吐量和存储容量是次要考虑因素。
值得注意的是，Chubby并非基于全新的算法理论构建而成，而是将已有的Paxos一致性算法作为实现基础，通过工程上的优化来满足实际应用场景下的需求。
Chubby向用户暴露了一套类似于UNIX文件系统的API接口，应用不仅能对Chubby服务器上的整个文件进行读写操作，还可以添加对文件节点的锁控制。此外，Chubby还引入了事件订阅机制，允许客户端注册监听某些类型的数据变更通知，一旦相关文件或目录发生更新，则会立即接收到由服务端推送的通知消息。</p>
<h2 id="设计目标" class="heading-element"><span>2 设计目标</span>
  <a href="#%e8%ae%be%e8%ae%a1%e7%9b%ae%e6%a0%87" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Chubby最初的设计者并没有将它实现为一个包含Paxos算法的协议库，而是将Chubby设计成一个需要访问中心节点（Master）的分布式锁服务，这一决策基于以下几个优势：
能像插件一样增加到现有系统中。开发者一开始可能未对高可用性做规划，锁服务器更易维护现有程序结构和通信模式。
许多服务需要一种机制来公布选举主服务器或划分数据的结果，想比name service，基于所服务的一致性客户端缓存更适合存储和获取少量数据。
基于锁的接口对程序员更熟悉。
分布式共识算法需多个副本实现高可用性，而锁服务嵌入到客户端，只需要一个机器，就能达成共识。
为了满足实际需求，Chubby设定了以下设计目标：
提供一个完整的、独立运作的分布式锁服务，而不仅仅是一个一致性协议的客户端实现。
提供粗粒度的锁服务。
除了基本的锁服务外，还支持对小文件进行读写操作。
具备高可用性和可靠性，保证即使在网络分区或硬件故障的情况下也能持续稳定运行。
引入了一种高效的事件订阅模型，允许客户端实时接收关于所关注文件变更的通知信息。这样不仅增强了系统的响应速度，也使得应用程序能够更好地适应动态变化的环境。</p>
<h2 id="chubby设计" class="heading-element"><span>3 Chubby设计</span>
  <a href="#chubby%e8%ae%be%e8%ae%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="系统结构" class="heading-element"><span>3.1 系统结构</span>
  <a href="#%e7%b3%bb%e7%bb%9f%e7%bb%93%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Chubby包含两个基本组件，一个服务器和客户端应用链接的库，通过 RPC 通信，还有第三个可选组件——代理服务器。Chubby 单元由少量服务器（通常为 5 个）组成，这些服务器称为副本，使用分布式共识协议选举Master。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012144319063.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012144319063.png?size=small" data-sub-html="<h2>image-20241012144319063</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012144319063.png" alt="image-20241012144319063" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012144319063.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012144319063.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012144319063.png?size=large 2x" data-title="image-20241012144319063" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>集群中每个服务器都维护一份服务端数据库的副本，但只有Master负责读写数据库，其他副本复制主服务器的更新。客户端通过 DNS 找到Master，Master故障时其他副本重新选举。副本故障可由替换系统选择新机器替换。</p>
<h3 id="文件目录句柄" class="heading-element"><span>3.2 文件、目录、句柄</span>
  <a href="#%e6%96%87%e4%bb%b6%e7%9b%ae%e5%bd%95%e5%8f%a5%e6%9f%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Chubby 的文件系统接口类似 UNIX 但更简单，是严格的文件和目录树结构，有特定命名规则。与 UNIX 不同之处在于便于分布，不暴露某些操作，不维护部分时间信息，命名空间只有文件和目录（节点），无符号或硬链接。</p>
<p>节点分永久（需显式删除）和临时（无引用则删，可检测 client 存活），可作读写锁，有相关元数据和访问控制列表（ACLs），用于控制节点的读、写和更改ACL权限。除非被覆盖，否则节点在创建时将继承其父目录的ACL名称。每个节点的元数据包含四个单调递增的 64 位数字，便于客户端轻松检测变化：</p>
<ul>
<li>
<p><strong>实例编号</strong>：用于标识创建该数据节点的顺序</p>
</li>
<li>
<p><strong>文件内容编号</strong>：用于标识文件内容的变化情况，该编号会在文件内容被写入时增加</p>
</li>
<li>
<p><strong>锁编号</strong>：用于标识节点锁状态变更情况，该编号会在节点锁从自由状态转换到被持有状态时增加</p>
</li>
<li>
<p><strong>ACL编号</strong>：用于标识节点的ACL信息变更情况，该编号会在节点的ACL配置信息被写入时增加</p>
</li>
</ul>
<p>同时，Chubby还会标识一个64位的文件内容校验码，以便客户端能够识别出文件是否变更。</p>
<p>客户端打开节点可获取类似 UNIX 文件描述符的句柄，具有以下特点：</p>
<ul>
<li>通过句柄数字，防止在创建期间的操作，只有在创建节点时才会检查，而UNIX是在打开时检查，读/写不检查</li>
<li>允许master 能够判断句柄是自身生成还是其他 master 生成。</li>
<li>若旧句柄在新 master 打开节点时出现，master 会重新创建该句柄。</li>
</ul>
<h3 id="锁和序列器" class="heading-element"><span>3.3 锁和序列器</span>
  <a href="#%e9%94%81%e5%92%8c%e5%ba%8f%e5%88%97%e5%99%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Chubby 提供两种锁：写锁（排斥模式）和读锁（共享模式）。强制锁会使未持有锁的对象无法访问锁定对象，但 Chubby 未采用，而是使用建议锁，也就是说，它们只与获取同一把锁的其他尝试发生冲突：持有一个名为F的锁既不是访问文件F所必需的，也不会阻止其他客户端这样做。因为 Chubby 经常保护其他服务实现的资源，不只是与锁关联的文件，且在用户调试或管理文件时，不希望强制用户关闭应用，同时开发人员可以通过传统断言检查锁持有情况，强制检查价值不大。</p>
<p><font color="red">在分布式系统中，由于网络通信的不确定性，导致在分布式系统中锁机制变得非常复杂，消息的延迟或是乱序都有可能会引起锁的失效</font>。目前可通过虚拟时间、虚拟同步解决，但 Chubby 未采用这些复杂方式。</p>
<p>Chubby采用了序列器和锁延迟两种机制来解决上述问题，序列器指锁的持有者向Chubby服务端请求一个序列器（是一个不透明的字节串，包括锁的名称、锁的模式以及锁的生成号），然后之后在需要使用锁的时候将该序列器一并发给 Chubby 服务器，服务端检查序列器的有效性。虽然序列器机制只需要向受影响的消息添加字符串，但重要的协议发展缓慢。</p>
<p>而延迟就是客户端在非正常情况下释放锁的话，那么Chubby服务器会允许该客户端在锁延迟时间内一直持有不释放这个锁，在这段时间内，其他客户端无法获取到这个锁，可以减少由网络延迟造成的问题。</p>
<h3 id="事件通知机制和缓存" class="heading-element"><span>3.4 事件通知机制和缓存</span>
  <a href="#%e4%ba%8b%e4%bb%b6%e9%80%9a%e7%9f%a5%e6%9c%ba%e5%88%b6%e5%92%8c%e7%bc%93%e5%ad%98" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>为了避免大量客户端轮询Chubby服务端状态所带来的压力，Chubby提供了事件通知机制。客户端可以向服务端注册事件通知，当触发这些事件时，服务端就会异步地向客户端发送对应的事件通知。常见的Chubby事件如下：</p>
<ul>
<li><strong>文件内容变更</strong>：监视通过文件发布的服务的位置。</li>
<li><strong>节点的增加、删除、修改</strong>：用于实现镜像，发现新文件以及监视临时文件。</li>
<li><strong>Master失败</strong>：警告客户端其他事件可能已经丢失，因此需要重新扫描数据。</li>
<li><strong>句柄、或者锁变得无效了</strong>：这通常表明存在通信问题。</li>
<li><strong>锁获取成功</strong>：可用于确定Master何时被选举。</li>
<li><strong>锁获取冲突</strong>：允许锁缓存。</li>
</ul>
<p>为了减少网络I/O，Chubby的客户端使用了缓存，可以缓存文件数据和元数据。<font color="red">Chubby借助租约来保证客户端和服务端缓存的一致性</font>，每个客户端的缓存都有一个租约，一旦该租约到期，客户端就需要向服务端续订租约才能够保证缓存的有效性。</p>
<p>当文件数据或者元数据被修改时，Chubby服务端首先会阻塞该修改操作，然后由Master通知所有缓存了该信息的客户端，等到Master收到了客户端对该过期消息的应答后，再进行修改操作。Chubby通过缓存机制保证了数据的强一致性，在缓存机制下，Chubby就能够保证可回单要么从缓存中会总访问到一致的数据，要么访问出错。</p>
<h3 id="session-和-keepalive" class="heading-element"><span>3.5 Session 和 KeepAlive</span>
  <a href="#session-%e5%92%8c-keepalive" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>一个Chubby Session是Chubby Cell和客户端通过定期的KeepAlive握手维护的一个关系，当Session有效时，除非客户端通知Master，客户端的句柄、锁、缓存都是有效的。</p>
<p><font color="red">Master在收到一个KeepAlive RPC时，通常会阻塞该RPC直到该Client的前一个租约接近过期，然后Master再允许该RPC返回给客户端，同时告知客户端新的租约过期时间</font>。Master可以任意地延长过期时间，默认的演唱时间时12s。</p>
<p>但是一个负载过高的Master可能会使用一个更高的值来减少它所需要处理的KeepAlive RPC调用。客户端在收到响应后，就会马上发起一个新的KeepAlive，因此几乎总是有一个KeepAlive被阻塞在Master。这个KeepAlive 回复也可以用来给客户端传递事件和过期缓存，如果事件或者缓存失效发生了，Master则允许KeepAlive立即返回，同时客户端维护了一个本地租约过期时间，是Master租约过期时间的近似（为了防止Master已经关闭Session了），如果客户端本地缓存租约过期了，但此时无法确定Master是否已经结束了这个Session，客户端就需要清空并禁用它的缓存，此时Session处于jeopardy状态，客户端则会继续等待一个称为宽限期的时长，默认为45s。如果在宽限期结束之前，客户端和Master又完成了一次成功的KeepAlive交互，那么客户端就会再次使它的缓存有效，否则，客户端就假设Session已过期。</p>
<h3 id="故障转移" class="heading-element"><span>3.6 故障转移</span>
  <a href="#%e6%95%85%e9%9a%9c%e8%bd%ac%e7%a7%bb" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>一旦Master挂了或者失去Master身份时，它就会丢掉关于它的Session，在内存中的句柄、锁、状态都没了， 转而运行一个Session本地租约计时器，等待新的Master选举出来，如果一个Master选举很快完成，客户端就可以在租约计时器过期之前联系新的Master，否则，客户端的本地超时过期后，客户端可以利用宽限期来让Session在故障转移期间得到维持，其宽限期增加了客户端的租约超时时间。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012231123862.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012231123862.png?size=small" data-sub-html="<h2>image-20241012231123862</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012231123862.png" alt="image-20241012231123862" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012231123862.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012231123862.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20241012231123862.png?size=large 2x" data-title="image-20241012231123862" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>新的Master需重建其前任Master的内存状态，这一过程部分通过硬盘上存储的数据实现，部分从客户端获取状态，还有部分通过保守估计完成。数据库会记录每个Session、持有的锁以及临时文件。新当选的Master需按以下流程操作：</p>
<ol>
<li>采用一个新的epoch编号并反馈给客户端，拒绝来自旧epoch编号的客户端请求，以防新Master对发送给旧Master的陈旧数据包做出响应。</li>
<li>新Master可响应Master定位请求，但不会处理与Session相关的请求。</li>
<li>依据数据库重建Session状态和锁信息等，并延长最大的Session时间，即进行故障转移。</li>
<li>接收客户端的KeepAlive，但不响应其他操作。</li>
<li>向所有客户端发送故障转移事件，客户端会因此清空缓存（因可能已过期），并警示应用程序可能丢失了其他事件。</li>
<li>Master等待每个客户端确认故障转移事件，或者客户端Session超时。</li>
<li>Master允许所有操作正常进行。</li>
<li>若客户端使用旧句柄，新Master会在内存中重建新句柄；若重建的句柄已关闭，Master会保存该句柄，确保在其任期内无法再次重建相同句柄。</li>
<li>经过一段时间，Master会删除无句柄打开的临时文件，所以客户端需在此期间刷新临时文件的句柄。若文件上最后一个客户端在故障转移过程中丢失Session，则该文件不会立即被删除。</li>
</ol>
<h3 id="数据库实现" class="heading-element"><span>3.7 数据库实现</span>
  <a href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e5%ae%9e%e7%8e%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>最初使用的是Berkeley DB的复制版本，它采用B +树机制，其中键为字节字符串，值可以是任意二进制数据。在Berkeley DB之上，添加了一个用于对路径名称数量进行排序的比较函数，从而使相邻节点紧密排列。Berkeley DB使用分布式共识算法来复制数据库日志。</p>
<p>后来由于维护风险等因素，自行编写了简单数据库，运用了预写日志（WAL）和快照技术。</p>
<h3 id="备份和镜像" class="heading-element"><span>3.8 备份和镜像</span>
  <a href="#%e5%a4%87%e4%bb%bd%e5%92%8c%e9%95%9c%e5%83%8f" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>每个 Chubby 单元的主服务器每隔几小时将数据库快照写入不同建筑的 GFS 文件服务器，用于灾难恢复和初始化新替换副本的数据库。</p>
<p>Chubby允许文件集合从一个单元镜像到另一个单元，利用事件机制快速更新，常用于复制配置文件到全球各地的计算集群。</p>
<h2 id="扩展机制" class="heading-element"><span>4 扩展机制</span>
  <a href="#%e6%89%a9%e5%b1%95%e6%9c%ba%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>单个Master可以服务9W个客户端，因为每个单元只有一个Master，所以Master的压力会很大。因此，最有效的扩展机制在很大程序上能减少与主机的通信，有以下几种方法：</p>
<ul>
<li>
<p>可创建任意数量的 Chubby 单元，客户端通常使用附近单元，减少对远程机器的依赖。</p>
</li>
<li>
<p>主服务器在负载重时可增加租约时间，减少需处理的KeepAlive RPC 数量。</p>
</li>
</ul>
<ul>
<li>
<p>Chubby客户端缓存文件数据、元数据、文件缺失情况和打开句柄，减少对服务器的调用。</p>
</li>
<li>
<p>使用协议转换服务器将 Chubby 协议转换为较简单的协议，如 DNS 等。</p>
</li>
</ul>
<p>还有以下两种机制，代理和分区。</p>
<h3 id="代理" class="heading-element"><span>4.1 代理</span>
  <a href="#%e4%bb%a3%e7%90%86" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>可由受信任进程代理 Chubby 协议，代理连接了客户端和Chubby Master，两边保持一致即可。这样可以减少服务器负载，主要处理KeepAlive和读请求，对写流量影响小。代理增加了写和首次读的 RPC，但可显著增加客户端数量，同时也带来一些潜在问题，如增加单元不可用的频率，原故障转移策略对代理不理想。</p>
<h3 id="分区" class="heading-element"><span>4.2 分区</span>
  <a href="#%e5%88%86%e5%8c%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Chubby 的接口设计允许按目录对单元的命名空间进行分区，每个分区有自己的副本和主服务器。但元数据不会划分，分区旨在实现大型 Chubby 单元且分区之间通信少，虽有一些操作需跨分区通信，但影响预计不大。</p>
<p>分区可减少给定分区上的读写流量，但不一定减少KeepAlive流量。如果要支持更多客户端，策略是代理、分区一起使用。</p>
]]></description></item><item><title>Prometheus使用Pushgateway推送数据</title><link>https://hezephyr.github.io/posts/02.prometheus%E4%BD%BF%E7%94%A8pushgateway%E6%8E%A8%E9%80%81%E6%95%B0%E6%8D%AE/</link><pubDate>Fri, 20 Sep 2024 10:02:04 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/02.prometheus%E4%BD%BF%E7%94%A8pushgateway%E6%8E%A8%E9%80%81%E6%95%B0%E6%8D%AE/</guid><description><![CDATA[<h2 id="pushgateway简介" class="heading-element"><span>1 Pushgateway简介</span>
  <a href="#pushgateway%e7%ae%80%e4%bb%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Prometheus 的 Pushgateway 是一个简单的 HTTP 服务器，它允许数据被推送到该服务器，而不是通过拉取的方式获取。它的存在是为了让临时和批处理作业能够将其指标暴露给 Prometheus。由于这类作业可能存在的时长不足以被主动抓取，因此它们可以将指标推送到 Pushgateway。随后，Pushgateway 会将这些指标暴露给 Prometheus。</p>
<p>Pushgateway 作为中间件，保存推送的数据直到 Prometheus 抓取。它支持从多个来源推送指标，<strong>每个来源都通过唯一的 <code>job</code> 标签来标识，并且可以选择性地附加额外的标签</strong>。</p>
<p>Pushgateway GitHub 地址：<a href="https://github.com/prometheus/pushgateway"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/prometheus/pushgateway<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<h2 id="安装" class="heading-element"><span>2 安装</span>
  <a href="#%e5%ae%89%e8%a3%85" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>要安装 Pushgateway，你可以下载二进制包或使用包管理器，但更推荐使用 Docker。你可以在任何机器上安装 Pushgateway，通常只需要一台 Pushgateway 服务器即可处理来自所有来源的指标。以下是使用 Docker 设置 Pushgateway 的方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull prom/pushgateway
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker run -d -p 9091:9091 prom/pushgateway</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="向-pushgateway-推送指标" class="heading-element"><span>3 向 Pushgateway 推送指标</span>
  <a href="#%e5%90%91-pushgateway-%e6%8e%a8%e9%80%81%e6%8c%87%e6%a0%87" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>向 Pushgateway 推送指标时，你可以使用 <code>curl</code> 命令行工具或者开发自定义应用程序发送 HTTP 请求。此外，还有适用于多种编程语言的第三方库，可简化向 Pushgateway 发送指标的过程。</p>
<h3 id="使用-curl" class="heading-element"><span>3.1 使用 <code>curl</code></span>
  <a href="#%e4%bd%bf%e7%94%a8-curl" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>以下是一个向 Pushgateway 推送单个指标的例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl -X POST http://<span class="o">{</span>pushgateway_server<span class="o">}</span>:<span class="o">{</span>port<span class="o">}</span>/metrics/job/myjob/instance/myinstance <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     --data <span class="s1">&#39;my_metric{label=&#34;value&#34;} 1.0&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>此命令推送了一个名为 <code>my_metric</code> 的指标，其值为 <code>1.0</code> 并带有一个 <code>label</code> 设置为 <code>value</code> 的标签。</p>
<h3 id="使用第三方库" class="heading-element"><span>3.2 使用第三方库</span>
  <a href="#%e4%bd%bf%e7%94%a8%e7%ac%ac%e4%b8%89%e6%96%b9%e5%ba%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>有若干第三方库可以帮助你将 Pushgateway 的功能整合到你的应用程序中。这些库提供了一个更高层次的 API 来发送指标，使得与 Pushgateway 的交互更加容易管理。</p>
<p>例如，在 Python 中，你可以使用 <code>prometheus_client</code> 库，下面是一段实现代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">csv</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">prometheus_client</span> <span class="kn">import</span> <span class="n">CollectorRegistry</span><span class="p">,</span> <span class="n">Gauge</span><span class="p">,</span> <span class="n">push_to_gateway</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PrometheusPusher</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">metric_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">description</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">job_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">pushgateway_url</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;localhost:9091&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Initialize an instance of PrometheusPusher.
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        :param metric_name: The name of the metric.
</span></span></span><span class="line"><span class="cl"><span class="s2">        :param description: A description of the metric.
</span></span></span><span class="line"><span class="cl"><span class="s2">        :param job_name: Job name used to identify the source.
</span></span></span><span class="line"><span class="cl"><span class="s2">        :param pushgateway_url: URL of the Pushgateway service, default is localhost:9091.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">metric_name</span> <span class="o">=</span> <span class="n">metric_name</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">description</span> <span class="o">=</span> <span class="n">description</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">job_name</span> <span class="o">=</span> <span class="n">job_name</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">pushgateway_url</span> <span class="o">=</span> <span class="n">pushgateway_url</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">registry</span> <span class="o">=</span> <span class="n">CollectorRegistry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">gauge</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_gauge</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">label_names</span><span class="p">:</span> <span class="nb">list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Create a gauge metric with labels.
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        :param label_names: List of label names.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">gauge</span> <span class="o">=</span> <span class="n">Gauge</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">metric_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">description</span><span class="p">,</span> <span class="n">label_names</span><span class="p">,</span> <span class="n">registry</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">registry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">push_metrics</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">label_values</span><span class="p">:</span> <span class="nb">list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Push the metric value to the Pushgateway.
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        :param label_values: List of label values.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">gauge</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Error: Gauge is not created&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">gauge</span><span class="o">.</span><span class="n">labels</span><span class="p">(</span><span class="o">*</span><span class="n">label_values</span><span class="p">)</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">push_to_gateway</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pushgateway_url</span><span class="p">,</span> <span class="n">job</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">job_name</span><span class="p">,</span> <span class="n">registry</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">registry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Successfully pushed metrics for </span><span class="si">{</span><span class="n">label_values</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Failed to push metrics for </span><span class="si">{</span><span class="n">label_values</span><span class="si">}</span><span class="s1">. Error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">push_metrics_from_csv</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">csv_file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Read data from a CSV file and push metrics.
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        :param csv_file_path: Path to the CSV file.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">csv_file_path</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">reader</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Get the label names (first row)</span>
</span></span><span class="line"><span class="cl">            <span class="n">label_names</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">reader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">create_gauge</span><span class="p">(</span><span class="n">label_names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">label_names</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Warning: Ignoring row with incorrect number of columns: </span><span class="si">{</span><span class="n">row</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">push_metrics</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example CSV file format:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># label1, label2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># value1, value2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Main entry point</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Set CSV file path and other parameters</span>
</span></span><span class="line"><span class="cl">    <span class="n">csv_file_path</span> <span class="o">=</span> <span class="s1">&#39;example_data.csv&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">metric_name</span> <span class="o">=</span> <span class="s1">&#39;example_metric&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;An example metric for demonstration purposes.&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">job_name</span> <span class="o">=</span> <span class="s2">&#34;example_job&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pushgateway_url</span> <span class="o">=</span> <span class="s1">&#39;slcx-grafana.calix.local:9091&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create an instance of PrometheusPusher and push data from CSV file</span>
</span></span><span class="line"><span class="cl">    <span class="n">pusher</span> <span class="o">=</span> <span class="n">PrometheusPusher</span><span class="p">(</span><span class="n">metric_name</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">job_name</span><span class="p">,</span> <span class="n">pushgateway_url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pusher</span><span class="o">.</span><span class="n">push_metrics_from_csv</span><span class="p">(</span><span class="n">csv_file_path</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Prometheus架构详解</title><link>https://hezephyr.github.io/posts/01.prometheus%E6%9E%B6%E6%9E%84%E8%AF%A6%E8%A7%A3/</link><pubDate>Thu, 19 Sep 2024 10:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/01.prometheus%E6%9E%B6%E6%9E%84%E8%AF%A6%E8%A7%A3/</guid><description><![CDATA[<h2 id="prometheus简介" class="heading-element"><span>1 Prometheus简介</span>
  <a href="#prometheus%e7%ae%80%e4%bb%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Prometheus 是一个开源的系统监控报警工具套件，它最初由SoundCloud开发，并于2016年成为CNCF（云原生计算基金会）托管的第二个项目（第一个是kubernetes）。Prometheus 以其简单高效的方式收集指标而闻名，能更好地与容器平台、云平台配合，这使得它在现代云原生环境中非常受欢迎。Prometheus 被广泛应用于各种场景中，包括但不限于：</p>
<ul>
<li><strong>应用性能监控</strong>：监控应用程序的健康状态和性能指标。</li>
<li><strong>基础设施监控</strong>：监控服务器、存储设备、网络设备等基础设施的状态。</li>
<li><strong>业务监控</strong>：监控业务层面的关键性能指标（KPIs）。</li>
</ul>
<p>Prometheus的主要优势如下：</p>
<ul>
<li><strong>独立性</strong>：Prometheus 服务器本身是一个独立的二进制文件，易于部署和管理。</li>
<li><strong>多维度数据模型</strong>：数据以多维键值对的形式存储，便于灵活查询。</li>
<li><strong>无中介</strong>：Prometheus 通过HTTP协议直接抓取被监控系统的度量信息，不需要中间代理。</li>
<li><strong>丰富的数据存储</strong>：Prometheus 内置的时间序列数据库（TSDB）能够高效存储大量的时间序列数据。</li>
<li><strong>强大的查询语言</strong>：PromQL 提供了强大的查询功能，支持复杂的聚合操作。</li>
<li><strong>灵活的告警机制</strong>：通过Alertmanager 可以配置复杂的告警规则并处理告警消息。</li>
<li><strong>插件化设计</strong>：支持各种Exporter，能够轻松集成到现有系统中。</li>
</ul>
<h2 id="架构" class="heading-element"><span>2 架构</span>
  <a href="#%e6%9e%b6%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Prometheus的架构设计旨在提供一个简单、高效且可扩展的监控解决方案，核心组件包括Prometheus Server、Exporters、PushGateway、Service Discovery、Alertmanager以及数据可视化工具（如Grafana）等。其整体架构如下图所示：
<a class="lightgallery" href="https://i-blog.csdnimg.cn/direct/018f226650834e569b66ecfffe60623f.png?size=large" data-thumbnail="https://i-blog.csdnimg.cn/direct/018f226650834e569b66ecfffe60623f.png?size=small" data-sub-html="<h2>在这里插入图片描述</h2>"><img loading="lazy" src="https://i-blog.csdnimg.cn/direct/018f226650834e569b66ecfffe60623f.png" alt="在这里插入图片描述" srcset="https://i-blog.csdnimg.cn/direct/018f226650834e569b66ecfffe60623f.png?size=small, https://i-blog.csdnimg.cn/direct/018f226650834e569b66ecfffe60623f.png?size=medium 1.5x, https://i-blog.csdnimg.cn/direct/018f226650834e569b66ecfffe60623f.png?size=large 2x" data-title="在这里插入图片描述" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<ol>
<li>
<p>客户端</p>
<ul>
<li><strong>Short-lived jobs</strong>：对于那些生命周期较短的任务，可能在Prometheus来pull之前就消失了。Prometheus提供了PushGateway机制。客户端（或服务端）安装官方的PushGateway，这些任务可以将它们的监控数据组织成Key-Value形式并推送到PushGateway，然后Prometheus Server会定期从PushGateway拉取数据。这里需要注意的是PushGateway不一定要安装在被监控端，也可以安装在服务端，甚至是一台不相关的主机上，换句话来说，它只是一个中间转发的媒介，确保即使是在任务结束之后，Prometheus也能获取到必要的监控数据。</li>
<li><strong>Jobs supported by Prometheus</strong>：Prometheus支持多种服务（如cAdvisor, Kubernetes, Etcd, Gokit等）直接向Prometheus暴露监控数据。这些服务通常被称为“Jobs”，它们通过内置的端点直接与Prometheus交互，无需额外的中间层。</li>
<li><strong>Exporter</strong>：Exporter是Prometheus生态系统中的重要组成部分。它们通常作为中间层运行在被监控系统旁边，负责从不同的后端系统中提取度量数据，并将其转换为Prometheus可以理解的格式。这样，即使原有的监控目标不直接支持 Prometheus，也可以通过 Prometheus 提供的 Client Library 编写该监控目标的监控采集程序。例如，可以通过 Node Exporter 来监控 Linux 或 Windows 主机的硬件资源使用情况。常用的 Exporter 包括 Mysql Exporter、JMX Exporter、Consul Exporter 等。</li>
</ul>
</li>
<li>
<p>Prometheus Server</p>
<p>Prometheus Server是Prometheus组件中的核心部分，负责实现对监控数据的获取，存储以及查询。</p>
<ul>
<li><strong>数据获取 (Data Retrieval)</strong>：Prometheus Server 可以通过静态配置的方式来管理其监控的目标，同时也支持结合 Service Discovery 动态地发现和管理监控目标。这种方式允许 Prometheus Server 在网络中自动识别服务实例，并从这些实例中拉取监控数据。</li>
<li><strong>数据存储 (Data Storage)</strong>：Prometheus Server 内置了时序数据库功能，能够将采集到的监控数据按时间序列的形式存储在本地磁盘上。此外，Prometheus 社区也提供了与外部时序数据库集成的方案，以满足特定场景下的存储需求。</li>
<li><strong>数据查询 (Data Querying)</strong>：Prometheus Server对外提供了自定义的PromQL语言，实现对数据的查询以及分析。</li>
</ul>
</li>
<li>
<p>Server discovery</p>
<p>Prometheus为了适应动态变化的环境，提供了服务发现机制来自动管理监控目标列表。在现代云原生环境中，资源使用方式通常是按需的，这意味着没有固定的监控目标，所有的监控对象（包括基础设施、应用和服务）都在动态变化。对于 Prometheus 这一类基于 Pull 模式的监控系统，显然无法继续使用<code>static_configs</code>的方式静态地定义监控目标。因此，Prometheus 引入了一个中间的代理人（即服务注册中心），这个代理人掌握着当前所有监控目标的访问信息，Prometheus 只需要向这个代理人询问有哪些监控目标即可。这种模式被称为服务发现。</p>
<p>Prometheus 支持多种服务发现机制，包括但不限于以下几种：</p>
<ul>
<li><strong>Consul</strong>：Consul 是一种服务网格工具，可以用来发现和监控服务。Prometheus 可以集成 Consul 来动态发现服务实例，在微服务架构的应用程序中，Consul 常被用作服务发现注册软件，Prometheus 与其集成从而动态发现需要监控的应用服务实例。</li>
<li><strong>DNS SD</strong>：DNS 服务发现是一种基于 DNS 的服务发现机制，适用于那些使用 DNS 解析服务位置的环境。</li>
<li><strong>Kubernetes SD</strong>：在 Kubernetes 这类容器管理平台中，Kubernetes 掌握并管理着所有的容器以及服务信息，Prometheus 只需要与 Kubernetes 打交道就可以找到所有需要监控的容器以及服务对象。</li>
<li><strong>EC2 SD</strong>：在 AWS 的 EC2 环境中，Prometheus 可以使用 EC2 服务发现来自动发现和监控运行中的实例。</li>
</ul>
</li>
<li>
<p>AlertManager</p>
<p>AlertManager 是 Prometheus 架构中的另一个关键组件，负责处理来自 Prometheus Server 的警报。支持基于PromQL创建告警规则，当 Prometheus Server 检测到告警规则被触发时，会产生警报，并将这些警报发送给 AlertManager。AlertManager 负责汇总、去重、抑制和路由这些警报，确保警报信息能够及时、准确地通知到相关人员或系统。</p>
<ul>
<li><strong>汇总与去重</strong>：AlertManager 会汇总来自多个 Prometheus Server 的警报，并去除重复的警报，以减少无效的通知。</li>
<li><strong>抑制 (Silencing)</strong>：管理员可以设置抑制规则，临时屏蔽特定的警报，避免在维护窗口期间产生不必要的警报。</li>
<li><strong>路由 (Routing)</strong>：AlertManager 支持基于警报标签的路由策略，可以根据预定义的规则将警报发送给不同的接收者或接收组，确保警报能够发送给最合适的人或系统进行处理。</li>
<li><strong>通知 (Notification)</strong>：AlertManager 支持多种通知方式，包括电子邮件、PagerDuty、OpsGenie、WeChat Work 等，也可以通过Webhook自定义告警处理方式，以便快速响应警报。</li>
</ul>
<p>Prometheus 自带的 AlertManager 模块可以与诸如 PagerDuty 这样的商业化服务集成，实现警报和邮件的发送功能。然而，在国内使用 AlertManager 结合 PagerDuty 可能会遇到一些不便。因此，通常的做法是将Prometheus的数据集成到 Grafana 中进行展示，并在 Grafana 中配置警报，以实现更简便的本地化警报管理。</p>
</li>
<li>
<p>监控数据可视化</p>
<p>监控数据可视化是监控系统不可或缺的一部分，它帮助用户直观地理解系统的健康状况和性能表现。Prometheus Web UI是Prometheus内置的一个可视化管理界面，通过Prometheus UI用户能够轻松的了解Prometheus当前的配置，监控任务运行状态等。但在生态系统中常用的数据可视化工具是 Grafana，它是一个开源的度量仪表板和可视化工具，支持多种数据源，包括 Prometheus，使得用户可以轻松地创建图表和仪表板来展示监控数据。Grafana 不仅限于数据展示，还可以配置警报。用户可以在 Grafana 中设置基于 Prometheus 数据的警报规则，当监控数据达到预设的阈值时，可以触发警报。Grafana 可以通过多种渠道发送警报通知，包括邮件、短信、Webhook 等，确保问题能够被及时发现并处理。</p>
</li>
</ol>
]]></description></item><item><title>【MIT 6.5840(6.824)】 Lab 4:Fault-tolerant KVService 设计实现</title><link>https://hezephyr.github.io/posts/09.mit-6.58406.824-lab4-fault-tolerant-kvservice/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/09.mit-6.58406.824-lab4-fault-tolerant-kvservice/</guid><description><![CDATA[<h2 id="实验要求" class="heading-element"><span>1 实验要求</span>
  <a href="#%e5%ae%9e%e9%aa%8c%e8%a6%81%e6%b1%82" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p><font color="red">本实验旨在利用lab 3中的Raft库，构建一个具备容错能力的键值存储服务</font>。服务将作为一个复制状态机，由多个服务器组成，各服务器通过Raft协议同步数据库状态。即使在部分故障或网络隔离的情况下，只要大多数服务器正常，服务仍需继续响应客户端请求。在lab 4完成后，你将实现图中Raft交互的所有部分（Clerk、Service和Raft）。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=small" data-sub-html="<h2>x</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png" alt="x" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=large 2x" data-title="x" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>客户端通过Clerk与键值服务交互，发送RPC请求，支持Put、Append和Get三种操作。服务需确保这些操作线性化，如果逐个调用，这些方法应表现得好像系统只有一个状态副本，每个调用都应观察到前序调用序列对状态的修改。对于并发调用，返回值和最终状态必须与操作按某种顺序逐个执行时相同。如果调用在时间上重叠，则认为是并发调用。</p>
<p>为单一服务器提供线性化相对容易，但如果服务是复制的，则较为困难，因为所有服务器必须为并发请求选择相同的执行顺序，避免使用过时的状态回复客户端，并在故障恢复时以保留所有确认的客户端更新为前提。Raft 作者的<a href="https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf"target="_blank" rel="external nofollow noopener noreferrer">博士论文<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>的第 6.3 小节介绍了如何实现线性化语义，在知乎上也有关于这方面的<a href="https://www.zhihu.com/question/278551592"target="_blank" rel="external nofollow noopener noreferrer">讨论<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，可以参考 dragonboat 作者的回答。</p>
<p>实验分为两个阶段：A阶段实现基于Raft的键值服务，不使用快照；B阶段则集成快照功能，优化日志管理。</p>
<p>我的实验代码仓库：https://github.com/HeZephyr/MIT6.5840/tree/main/src/kvraft，已通过压力测试，代码严格遵守上述按要求实现。</p>
<p><font color="red">注意：下述所贴代码为了简洁以及分块，进行了一定程度的删减，如果需要复现，可以前往仓库。</font></p>
<h2 id="实验设计" class="heading-element"><span>2 实验设计</span>
  <a href="#%e5%ae%9e%e9%aa%8c%e8%ae%be%e8%ae%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="思路" class="heading-element"><span>2.1 思路</span>
  <a href="#%e6%80%9d%e8%b7%af" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>lab4需要我们基于lab3实现的Raft，实现一个可用的KV服务，这意味着我们需要保证线性一致性（要求从外部观察者的角度来看，所有操作都按照某个全局顺序执行，并且结果与这些操作按该顺序串行执行的结果相同）。尽管 Raft 共识算法本身支持线性化语义，但要真正保证线性化语义在整个系统中生效，仍然需要上层服务的配合。</p>
<p>例如，在下面这张图中：x初始值为0，client1发送put请求(x,1)，client2发送put请求(x,2)，并在put请求前后发送get请求，此时如果put请求因为超时不断重发，如果在client2的put请求之后才被应用，则导致最后client2读到的是1，RaftKV的结果也是1，这就违背了线性一致性。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240822144442922.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240822144442922.png?size=small" data-sub-html="<h2>image-20240822144442922</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240822144442922.png" alt="image-20240822144442922" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240822144442922.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240822144442922.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240822144442922.png?size=large 2x" data-title="image-20240822144442922" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>这是因为当客户端向服务端提交command时，服务端在Raft层中同步、提交并应用后，客户端因为没有收到请求回复，会重试此操作，这种重试机制会导致相同的命令被执行多次。<font color="red">注意，这里讨论的都是写请求，因为读请求不会改变系统状态，可以重复执行多次。</font></p>
<p>为了解决重复执行命令导致线性一致性破坏的问题，Raft 作者提出了一种解决方案：客户端为每个命令分配一个唯一的序列号。状态机会记录每个客户端的最新序列号及其对应的执行结果。如果一个命令的序列号已经被处理过，则系统会直接返回先前的结果，而不会重新执行该命令。这样可以确保每个命令只被应用到状态机一次，避免了重复执行可能带来的线性一致性问题。</p>
<p>在这个lab中，我们可以按照如下机制具体实现：</p>
<ol>
<li><strong>客户端命令唯一化</strong>：每个客户端发送给服务端的每个<code>command</code>请求都携带一个由<code>ClientId</code>和<code>CommandId</code>组成的二元组。<code>ClientId</code>是客户端的唯一标识符，<code>CommandId</code>是一个递增的整数，用于唯一标识客户端发出的每一个命令。</li>
<li><strong>服务器端状态记录</strong>：在服务器端，维护一个映射表，这个映射表以<code>ClientId</code>作为主键，其值是一个结构体包含：
<ul>
<li>最近执行的来自该客户端的<code>CommandId</code>。</li>
<li>对应的命令执行结果。</li>
</ul>
</li>
<li><strong>重复命令检测与处理</strong>：
<ul>
<li>当一个新命令到达时，首先检查映射表中是否存在对应的<code>ClientId</code>条目。</li>
<li>如果存在，则比较新命令的<code>CommandId</code>与映射表中记录的<code>CommandId</code>。
<ul>
<li>如果新命令的<code>CommandId</code>小于或等于记录的<code>CommandId</code>，则说明这是一个重复命令，服务器可以直接返回之前存储的结果。</li>
<li>如果新命令的<code>CommandId</code>大于记录的<code>CommandId</code>，则说明这是新的命令，服务器应该正常处理这个命令，并更新映射表中对应<code>ClientId</code>的<code>CommandId</code>及结果。</li>
</ul>
</li>
<li>如果不存在对应的<code>ClientId</code>条目，则将此命令视为首次出现的命令进行处理，并添加一个新的条目到映射表中。</li>
</ul>
</li>
</ol>
<h3 id="lab4a无快照" class="heading-element"><span>2.2 lab4A：无快照</span>
  <a href="#lab4a%e6%97%a0%e5%bf%ab%e7%85%a7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>整体的时序图如下所示：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240829224033039.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240829224033039.png?size=small" data-sub-html="<h2>image-20240829224033039</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240829224033039.png" alt="image-20240829224033039" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240829224033039.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240829224033039.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240829224033039.png?size=large 2x" data-title="image-20240829224033039" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>####.1 客户端</p>
<p>对于客户端，需要有<code>(clientId, commandId)</code>来标识唯一命令，对于<code>clientId</code>，通过lab提供的随机数生成器<code>nrand</code>生成即可，对于<code>commandId</code>，可以采用递增的方式进行管理。这意味着每当客户端发送一个新的命令时，<code>commandId</code>都会递增一次，从而确保每个命令都有一个唯一的标识符，这样也需要保证如果这条命令没处理完（请求的server不是leader或者请求超时）需重复执行的时候，不能改变commandId。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CommandArgs</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Key</span>       <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Value</span>     <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Op</span>        <span class="nx">OpType</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ClientId</span>  <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">CommandId</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CommandReply</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Err</span>   <span class="nx">Err</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Value</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Clerk</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">servers</span> <span class="p">[]</span><span class="o">*</span><span class="nx">labrpc</span><span class="p">.</span><span class="nx">ClientEnd</span>
</span></span><span class="line"><span class="cl">	<span class="nx">leaderId</span>  <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clientId</span>  <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">commandId</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ck</span> <span class="o">*</span><span class="nx">Clerk</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">ck</span><span class="p">.</span><span class="nf">ExecuteCommand</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">CommandArgs</span><span class="p">{</span><span class="nx">Key</span><span class="p">:</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">Op</span><span class="p">:</span> <span class="nx">OpGet</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ck</span> <span class="o">*</span><span class="nx">Clerk</span><span class="p">)</span> <span class="nf">Put</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ck</span><span class="p">.</span><span class="nf">ExecuteCommand</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">CommandArgs</span><span class="p">{</span><span class="nx">Key</span><span class="p">:</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">Value</span><span class="p">:</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">Op</span><span class="p">:</span> <span class="nx">OpPut</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ck</span> <span class="o">*</span><span class="nx">Clerk</span><span class="p">)</span> <span class="nf">Append</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ck</span><span class="p">.</span><span class="nf">ExecuteCommand</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">CommandArgs</span><span class="p">{</span><span class="nx">Key</span><span class="p">:</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">Value</span><span class="p">:</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">Op</span><span class="p">:</span> <span class="nx">OpAppend</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ck</span> <span class="o">*</span><span class="nx">Clerk</span><span class="p">)</span> <span class="nf">ExecuteCommand</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">CommandArgs</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">CommandId</span> <span class="p">=</span> <span class="nx">ck</span><span class="p">.</span><span class="nx">clientId</span><span class="p">,</span> <span class="nx">ck</span><span class="p">.</span><span class="nx">commandId</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">ck</span><span class="p">.</span><span class="nx">servers</span><span class="p">[</span><span class="nx">ck</span><span class="p">.</span><span class="nx">leaderId</span><span class="p">].</span><span class="nf">Call</span><span class="p">(</span><span class="s">&#34;KVServer.ExecuteCommand&#34;</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="o">||</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="o">==</span> <span class="nx">ErrWrongLeader</span> <span class="o">||</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="o">==</span> <span class="nx">ErrTimeout</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ck</span><span class="p">.</span><span class="nx">leaderId</span> <span class="p">=</span> <span class="p">(</span><span class="nx">ck</span><span class="p">.</span><span class="nx">leaderId</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">ck</span><span class="p">.</span><span class="nx">servers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ck</span><span class="p">.</span><span class="nx">commandId</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Value</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>####.2 服务端</p>
<p><code>KVServer</code>结构体被设计成一个基于Raft一致性协议实现的键值存储服务。为了确保客户端请求的幂等性，并且能够正确地处理来自客户端的重复请求，<code>lastOperations</code>映射表用于跟踪每个客户端（由<code>clientId</code>标识）的最后已应用的<code>commandId</code>以及相应的<code>reply</code>。这使得服务器能够在接收到重复请求时返回之前的结果而无需再次执行相同的命令。</p>
<p>状态机<code>stateMachine</code>在此处被实现为内存中的键值对存储<code>MemoryKV</code>，这意味着所有的键值对数据都保存在内存中，这对于快速读写操作是非常有效的，但可能不是持久化存储的最佳选择，因为如果服务器重启或崩溃，所有数据都会丢失。</p>
<p><code>lastApplied</code>字段被用来记录最后应用到状态机的日志条目的索引，以此来避免处理那些已经被应用过的过期日志条目。</p>
<p><code>notifyChs</code>是一个映射，它的键是日志条目的索引，值是一个<code>channel</code>。用于通知Raft的处理结果（机即复制到大多数副本并且应用到状态机之后）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">KVServer</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mu</span>      <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">me</span>      <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span>      <span class="o">*</span><span class="nx">raft</span><span class="p">.</span><span class="nx">Raft</span>
</span></span><span class="line"><span class="cl">	<span class="nx">applyCh</span> <span class="kd">chan</span> <span class="nx">raft</span><span class="p">.</span><span class="nx">ApplyMsg</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dead</span>    <span class="kt">int32</span> <span class="c1">// set by Kill()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">maxraftstate</span> <span class="kt">int</span> <span class="c1">// snapshot if log grows this big
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lastApplied</span>  <span class="kt">int</span> <span class="c1">//record the last applied index to avoid duplicate apply
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">stateMachine</span>   <span class="nx">KVStateMachine</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lastOperations</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int64</span><span class="p">]</span><span class="nx">OperationContext</span>
</span></span><span class="line"><span class="cl">	<span class="nx">notifyChs</span>      <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kd">chan</span> <span class="o">*</span><span class="nx">CommandReply</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">KVStateMachine</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="nx">Err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Put</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">Err</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Append</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">Err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">OperationContext</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MaxAppliedCommandId</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">LastReply</span>           <span class="o">*</span><span class="nx">CommandReply</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>ExecuteCommand</code>RPC实现如下，这段首先检查是否不是Get请求且为重复的命令，如果是则返回上次的结果，否则通过Raft的<code>Start</code>方法复制并应用日志，如果<code>Start</code>方法返回结果告知当前server不是Leader，则返回<code>ErrWrongLeader</code>，否则，去注册一个channel去阻塞等待执行结果（因为Start返回只是代表日志被复制到大多数节点中，有没有应用还不知道），这个执行结果由<code>applier</code>协程push。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">KVServer</span><span class="p">)</span> <span class="nf">ExecuteCommand</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">CommandArgs</span><span class="p">,</span> <span class="nx">reply</span> <span class="o">*</span><span class="nx">CommandReply</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Op</span> <span class="o">!=</span> <span class="nx">OpGet</span> <span class="o">&amp;&amp;</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">isDuplicatedCommand</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">CommandId</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastReply</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">args</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">].</span><span class="nx">LastReply</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">lastReply</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">lastReply</span><span class="p">.</span><span class="nx">Err</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">index</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">isLeader</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">Command</span><span class="p">{</span><span class="nx">args</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">isLeader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">ErrWrongLeader</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">getNotifyCh</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">result</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Err</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">ExecuteTimeout</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Err</span> <span class="p">=</span> <span class="nx">ErrTimeout</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nf">deleteNotifyCh</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>####.3 applier</p>
<p><code>applier</code>协程实现如下，主要是监控<code>applyCh</code>，根据Raft的应用结果来进行响应处理，需要注意的就是检测是否为重复的命令，如果不是，则需要应用到状态机，并保存最近的响应结果。最后，如果当前节点是领导者，并且该日志条目属于当前任期，则通知相关的客户端。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">KVServer</span><span class="p">)</span> <span class="nf">applier</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">killed</span><span class="p">()</span> <span class="o">==</span> <span class="kc">false</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">message</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">kv</span><span class="p">.</span><span class="nx">applyCh</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v} tries to apply message %v&#34;</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetId</span><span class="p">(),</span> <span class="nx">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandValid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span> <span class="o">&lt;=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v} discards outdated message %v because a newer snapshot which lastApplied is %v has been restored&#34;</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetId</span><span class="p">(),</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">command</span> <span class="o">:=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">Command</span><span class="p">.(</span><span class="nx">Command</span><span class="p">)</span> <span class="c1">// type assertion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">command</span><span class="p">.</span><span class="nx">Op</span> <span class="o">!=</span> <span class="nx">OpGet</span> <span class="o">&amp;&amp;</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">isDuplicatedCommand</span><span class="p">(</span><span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">,</span> <span class="nx">command</span><span class="p">.</span><span class="nx">CommandId</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v} doesn&#39;t apply duplicated message %v to stateMachine because maxAppliedCommandId is %v for client %v&#34;</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetId</span><span class="p">(),</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">],</span> <span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">].</span><span class="nx">LastReply</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">applyLogToStateMachine</span><span class="p">(</span><span class="nx">command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">command</span><span class="p">.</span><span class="nx">Op</span> <span class="o">!=</span> <span class="nx">OpGet</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">]</span> <span class="p">=</span> <span class="nx">OperationContext</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">MaxAppliedCommandId</span><span class="p">:</span> <span class="nx">command</span><span class="p">.</span><span class="nx">CommandId</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">							<span class="nx">LastReply</span><span class="p">:</span>           <span class="nx">reply</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="c1">// just notify related channel for currentTerm&#39;s log when node is leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">isLeader</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetState</span><span class="p">();</span> <span class="nx">isLeader</span> <span class="o">&amp;&amp;</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandTerm</span> <span class="o">==</span> <span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">getNotifyCh</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">reply</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="lab4b有快照" class="heading-element"><span>2.3 lab4B：有快照</span>
  <a href="#lab4b%e6%9c%89%e5%bf%ab%e7%85%a7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>实现了lab4A，lab4B就好做了，只需要修改<code>applier</code>，每次应用了<code>command</code>之后，都需要检查是否达到<code>maxraftstate</code>，如果达到，则调用<code>snapshot</code>来制作快照，需要注意，快照中，不仅需要保存状态机的状态，还需要包含用来去重的<code>lastOperations</code>，这也是为了防止应用快照后的节点成为leader后，由于没有<code>lastOperations</code>导致重复执行命令。</p>
<p>然后，<code>applyCh</code>中还有Leader发来的快照，我们需要进行验证，如果有效，则需要更新相应的状态，具体实现代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">kv</span> <span class="o">*</span><span class="nx">KVServer</span><span class="p">)</span> <span class="nf">applier</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">killed</span><span class="p">()</span> <span class="o">==</span> <span class="kc">false</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">message</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">kv</span><span class="p">.</span><span class="nx">applyCh</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v} tries to apply message %v&#34;</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetId</span><span class="p">(),</span> <span class="nx">message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandValid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span> <span class="o">&lt;=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v} discards outdated message %v because a newer snapshot which lastApplied is %v has been restored&#34;</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetId</span><span class="p">(),</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">CommandReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">command</span> <span class="o">:=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">Command</span><span class="p">.(</span><span class="nx">Command</span><span class="p">)</span> <span class="c1">// type assertion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">command</span><span class="p">.</span><span class="nx">Op</span> <span class="o">!=</span> <span class="nx">OpGet</span> <span class="o">&amp;&amp;</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">isDuplicatedCommand</span><span class="p">(</span><span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">,</span> <span class="nx">command</span><span class="p">.</span><span class="nx">CommandId</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v} doesn&#39;t apply duplicated message %v to stateMachine because maxAppliedCommandId is %v for client %v&#34;</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetId</span><span class="p">(),</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">],</span> <span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">].</span><span class="nx">LastReply</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">reply</span> <span class="p">=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">applyLogToStateMachine</span><span class="p">(</span><span class="nx">command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">command</span><span class="p">.</span><span class="nx">Op</span> <span class="o">!=</span> <span class="nx">OpGet</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">kv</span><span class="p">.</span><span class="nx">lastOperations</span><span class="p">[</span><span class="nx">command</span><span class="p">.</span><span class="nx">ClientId</span><span class="p">]</span> <span class="p">=</span> <span class="nx">OperationContext</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">MaxAppliedCommandId</span><span class="p">:</span> <span class="nx">command</span><span class="p">.</span><span class="nx">CommandId</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">							<span class="nx">LastReply</span><span class="p">:</span>           <span class="nx">reply</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="c1">// just notify related channel for currentTerm&#39;s log when node is leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">isLeader</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetState</span><span class="p">();</span> <span class="nx">isLeader</span> <span class="o">&amp;&amp;</span> <span class="nx">message</span><span class="p">.</span><span class="nx">CommandTerm</span> <span class="o">==</span> <span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">ch</span> <span class="o">:=</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">getNotifyCh</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="nx">reply</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">kv</span><span class="p">.</span><span class="nf">needSnapshot</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nf">takeSnapshot</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">CommandIndex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">message</span><span class="p">.</span><span class="nx">SnapshotValid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">kv</span><span class="p">.</span><span class="nx">rf</span><span class="p">.</span><span class="nf">CondInstallSnapshot</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">SnapshotTerm</span><span class="p">,</span> <span class="nx">message</span><span class="p">.</span><span class="nx">SnapshotIndex</span><span class="p">,</span> <span class="nx">message</span><span class="p">.</span><span class="nx">Snapshot</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nf">restoreStateFromSnapshot</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">Snapshot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">kv</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">SnapshotIndex</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">kv</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Invalid ApplyMsg %v&#34;</span><span class="p">,</span> <span class="nx">message</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="压测结果" class="heading-element"><span>3 压测结果</span>
  <a href="#%e5%8e%8b%e6%b5%8b%e7%bb%93%e6%9e%9c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>网上提供了一个<a href="https://gist.github.com/JJGO/0d73540ef7cc2f066cb535156b7cbdab"target="_blank" rel="external nofollow noopener noreferrer">测试脚本<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，功能强大。我的压测结果如下所示：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240820095009785.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240820095009785.png?size=small" data-sub-html="<h2>image-20240820095009785</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240820095009785.png" alt="image-20240820095009785" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240820095009785.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240820095009785.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240820095009785.png?size=large 2x" data-title="image-20240820095009785" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
]]></description></item><item><title>【论文阅读笔记】Grove: a Separation-Logic Library for Verifying Distributed Systems (Extended Version)</title><link>https://hezephyr.github.io/posts/09.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0grove/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/09.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0grove/</guid><description><![CDATA[<h2 id="介绍" class="heading-element"><span>1 介绍</span>
  <a href="#%e4%bb%8b%e7%bb%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>大型应用在分布式系统中遭遇多重挑战，如并发控制、故障恢复、网络不稳定及服务器时钟异步等。形式化验证则是一种严格确立系统正确性的方法，帮助处理边缘情况。</p>
<p>租约是分布式系统中的关键技术，用于保证系统某方面在一定时间内不变，GFS、Chubby和DynamoDB都具有类似的机制。例如租约允许领导者高效执行只读查询，无需频繁验证自身领导权，然而，这一机制的有效性验证却是一项艰巨任务。</p>
<p>Grove，作为前沿的并发分离逻辑（Concurrent Separation Logic, CSL）库，首开先河地解决了基于时间的租约验证问题，包括其与系统重新配置、故障恢复、线程级并发以及不可靠网络通信之间的复杂交互。</p>
<p>CSL的应用精髓在于，通过将系统状态细分为独立资源，并借助同步原语转移资源所有权，从而实现模块化且精确的推理分析。</p>
<p>Grove的创新亮点可概括如下：</p>
<ol>
<li><strong>时间有界不变性推理</strong>：引入新颖的时间维度，有效解析租约的有效期及其对系统状态的影响。</li>
<li><strong>扩展Crash Hoare逻辑</strong>：强化逻辑体系，使之能妥善应对分布式环境下的节点崩溃情形。</li>
<li><strong>抽象机制</strong>：提供工具集，支持对仅附加日志及单调时钟计数器的精准推理，增强系统的时间一致性。</li>
</ol>
<p><a href="https://github.com/mit-pdos/perennial"target="_blank" rel="external nofollow noopener noreferrer">Grove code<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<h2 id="常见组件-grove案例研究" class="heading-element"><span>2 常见组件-Grove案例研究</span>
  <a href="#%e5%b8%b8%e8%a7%81%e7%bb%84%e4%bb%b6-grove%e6%a1%88%e4%be%8b%e7%a0%94%e7%a9%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="rpc库" class="heading-element"><span>2.1 RPC库</span>
  <a href="#rpc%e5%ba%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>RPC是分布式系统的重要构建模块，它允许客户端在远程服务器上调用过程。例如，客户端调用<code>rpcClient.Call(&quot;f&quot;, args)</code>将在与<code>rpcClient</code>相连的服务器上调用<code>f(args)</code>。RPC库提供的是不可靠的RPC，意味着客户端的一次调用可能导致服务器运行对应的函数一次、零次或多于一次。这是因为底层网络可能会丢弃、重排或复制数据包。应用程序通常不会直接调用RPC，而是使用各种代理（clerk），它们封装了RPC并附加额外的处理（如添加请求ID、重试等）。</p>
<h3 id="复制状态机库" class="heading-element"><span>2.2 复制状态机库</span>
  <a href="#%e5%a4%8d%e5%88%b6%e7%8a%b6%e6%80%81%e6%9c%ba%e5%ba%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>vRSM复制由应用程序提供的状态机，具体的接口如下图所示：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240830211745211.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240830211745211.png?size=small" data-sub-html="<h2>image-20240830211745211</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240830211745211.png" alt="image-20240830211745211" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240830211745211.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240830211745211.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240830211745211.png?size=large 2x" data-title="image-20240830211745211" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>vRSM由多个组件实现，每个组件处理状态机复制的不同方面，例如持久性可以与复制协议分开实现。</p>
<ol>
<li>
<p><strong>副本服务器：写入复制</strong></p>
<ul>
<li>副本组件管理被复制的状态机的副本。</li>
<li>主要角色包括主服务器(Primary)和备份服务器(Backup)。主服务器处理来自客户端的写请求，备份服务器则处理读请求。</li>
<li>主服务器在收到操作后，会先在本地应用，然后复制到所有备份服务器，最后回复客户端。复制操作时，主服务器会生成线程以并发方式向每个备份发送RPC，并使用Go WaitGroup等待所有线程完成，确保操作被所有副本服务器应用。</li>
</ul>
</li>
<li>
<p><strong>使用configservice重新配置</strong></p>
<p>利用<code>epochs</code>和<code>configservice</code>来管理服务器的添加或移除。系统通过epoch来跟踪不同的服务器配置。每个epoch对应一组特定的服务器配置，包括一个主服务器和多个备份服务器。时代分为活跃epoch和保留epoch，后者指未实际运行的配置。<code>configservice</code> 负责维护当前系统的最新epoch和配置信息。它允许客户端获取当前配置，并在重新配置过程中提供原子操作以更新配置。</p>
<p>在重新配置期间，客户端可能向旧配置发送操作，这可能导致新配置中遗漏操作。为解决此问题，重新配置过程首先会封闭旧配置中的一个服务器，使其不再接受写操作，直到进入新的epoch。</p>
<p><strong>重新配置步骤</strong> 包括：</p>
<ol>
<li>原子性地创建新epoch</li>
<li>从旧配置中获取状态</li>
<li>在新服务器上初始化状态</li>
<li>更新configservice中的配置信息</li>
<li>激活新主服务器。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Reserve a new epoch number for reconfiguration, and return the current configuration (set of servers).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ck</span> <span class="o">*</span><span class="nx">Clerk</span><span class="p">)</span> <span class="nf">ReserveEpochAndGetConfig</span><span class="p">()</span> <span class="p">(</span><span class="kt">uint64</span><span class="p">,</span> <span class="p">[]</span><span class="nx">Address</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Return current configuration, used by clients to determine what servers to talk to.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ck</span> <span class="o">*</span><span class="nx">Clerk</span><span class="p">)</span> <span class="nf">GetConfig</span><span class="p">()</span> <span class="p">[]</span><span class="nx">Address</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//  Set new configuration, making epoch live, as long as no higher-numbered epoch has been reserved.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ck</span> <span class="o">*</span><span class="nx">Clerk</span><span class="p">)</span> <span class="nf">TryWriteConfig</span><span class="p">(</span><span class="nx">epoch</span> <span class="kt">uint64</span><span class="p">,</span> <span class="nx">config</span> <span class="p">[]</span><span class="nx">Address</span><span class="p">)</span> <span class="nx">Error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Get a lease for specified epoch, as long as it’s the current epoch, returning the new lease expiration time.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">ck</span> <span class="o">*</span><span class="nx">Clerk</span><span class="p">)</span> <span class="nf">GetLease</span><span class="p">(</span><span class="nx">epoch</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">(</span><span class="nx">Error</span><span class="p">,</span> <span class="kt">uint64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Reconfigure</span><span class="p">(</span><span class="nx">newServers</span> <span class="p">[]</span><span class="nx">Address</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">newEpoch</span><span class="p">,</span> <span class="nx">oldServers</span> <span class="o">:=</span> <span class="nx">configClerk</span><span class="p">.</span><span class="nf">ReserveEpochAndGetConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// get state from a server from old config
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">oldClerk</span> <span class="o">:=</span> <span class="nf">MakeClerk</span><span class="p">(</span><span class="nx">oldServers</span><span class="p">[</span><span class="nf">Rand</span><span class="p">()</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">oldServers</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">    <span class="nx">oldState</span> <span class="o">:=</span> <span class="nx">oldClerk</span><span class="p">.</span><span class="nf">GetStateAndSeal</span><span class="p">(</span><span class="nx">newEpoch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// make clerks to all of the new servers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">newClerks</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">Clerk</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">newServers</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">newServers</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">newClerks</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nf">MakeClerk</span><span class="p">(</span><span class="nx">newServers</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// set state on all the new servers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">wg</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">WaitGroup</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">newClerks</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">newClerks</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nf">SetNewEpochState</span><span class="p">(</span><span class="nx">newEpoch</span><span class="p">,</span> <span class="nx">oldState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="p">}(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// write new addresses to config service
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">configClerk</span><span class="p">.</span><span class="nf">TryWriteConfig</span><span class="p">(</span><span class="nx">newEpoch</span><span class="p">,</span> <span class="nx">newServers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// activate the new primary server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">newClerks</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">BecomePrimary</span><span class="p">(</span><span class="nx">newEpoch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在网络分区的情况下，configservice通过仅接受最高编号的新epoch来避免创建多个冲突的系统实例。</p>
</li>
<li>
<p><strong>副本服务器：基于租约的读取</strong></p>
<p>副本服务器（主服务器和备份服务器）利用租约提供线性化读取服务，无需跨服务器通信。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">Server</span><span class="p">)</span> <span class="nf">ApplyReadonly</span><span class="p">(</span><span class="nx">op</span><span class="p">)</span> <span class="nx">Result</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">s</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">leaseExpiry</span> <span class="p">&gt;</span> <span class="nf">GetTimeRange</span><span class="p">().</span><span class="nx">latest</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">e</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">epoch</span>
</span></span><span class="line"><span class="cl">        <span class="nx">idx</span><span class="p">,</span> <span class="nx">res</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">stateLogger</span><span class="p">.</span><span class="nf">LocalRead</span><span class="p">(</span><span class="nx">op</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">s</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果在此期间发生重新配置，服务器会通知客户端重试
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nf">waitForCommitted</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">op</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">res</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">ErrRetry</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">s</span><span class="p">.</span><span class="nx">mutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">ErrRetry</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>租约机制</strong>：
<ul>
<li>租约防止重新配置时返回过时数据，确保各服务器同步。</li>
<li>后台线程定期更新租约，承诺配置不变，直至租约到期（如1秒后）。</li>
</ul>
</li>
<li><strong>读取流程</strong>：
<ul>
<li>服务器收到只读请求且租约有效时，根据本地状态计算响应。本地状态包含所有已提交操作，可能含未提交的写操作。</li>
<li>读取依赖的前序写操作需全部提交，方能向客户端发送结果。</li>
</ul>
</li>
</ul>
<p>Grove使用类似TrueTime的<code>GetTimeRange()</code>API，提供当前时间的上下限，解决时钟偏移问题。</p>
</li>
<li>
<p><strong>存储库：状态日志器</strong></p>
<p>副本服务器使用存储库管理持久状态，提供“状态日志器”用于在追加型文件中持久化新操作。状态日志器在内存中缓冲追加操作，后台线程异步追加并同步缓冲区到文件，以提升性能。存储库提供 <code>Wait()</code> 函数，允许等待直到文件的前缀部分被持久化。副本库在回复 RPC 之前使用 <code>Wait()</code> 确保变更被持久存储。</p>
</li>
<li>
<p><strong>基于Paxos的容错配置服务</strong></p>
<p><strong>Paxos 库</strong>用于处理配置服务自身的服务器故障，是一个简单的基于 Paxos 一致性算法的复制库。Paxos在固定服务器集上运行，仅需要多数服务器处理请求，使用 leader 协调操作，但在 leader 崩溃时允许更换。与主-备份复制的差异：</p>
<ul>
<li>Paxos 自行选择新的epoch编号，因为服务器集不会在运行时改变。</li>
<li>仅要求多数服务器提交操作，新 leader 必须从多数服务器获取最新状态。</li>
<li>Paxos 较为简单，不使用租约，每次更新都写入整个状态到磁盘，而非追加操作到日志。</li>
<li>写操作性能较低，但对于配置服务是可接受的；提供快速但弱一致性的读取。</li>
</ul>
<p>Paxos提供的接口如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 返回当前Paxos实例中的复制状态。可能过时或未提交，GetConfig 使用 WeakRead 以确保快速响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Paxos</span><span class="p">)</span> <span class="nf">WeakRead</span><span class="p">()</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 开始一个新的提议过程。它返回当前的复制状态和一个commit回调函数。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Paxos</span><span class="p">)</span> <span class="nf">Begin</span><span class="p">()</span> <span class="p">(</span><span class="nx">oldstate</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">commit</span> <span class="kd">func</span><span class="p">(</span><span class="nx">newstate</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 尝试使当前节点成为领导者。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Paxos</span><span class="p">)</span> <span class="nf">TryBecomingLeader</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>要执行写操作，如下面这段代码所示，configserver使用<code>Begin()</code>方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 参数args在此处未使用，通常用于接收客户端请求的参数。
</span></span></span><span class="line"><span class="cl"><span class="c1">// reply 是方法的输出，它将包含操作的结果状态以及预留的新epoch和配置信息。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">ConfigService</span><span class="p">)</span> <span class="nf">ReserveEpochAndGetConfig</span><span class="p">(</span><span class="nx">args</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">reply</span> <span class="o">*</span><span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 从Paxos实例开始一个新的提议，获取当前状态和提交函数。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 应该在当前的领导者上调用此方法，否则提议无法成功提交。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">oldstate</span><span class="p">,</span> <span class="nx">commit</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">paxos</span><span class="p">.</span><span class="nf">Begin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 反序列化旧状态，以便修改。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">st</span> <span class="o">:=</span> <span class="nf">unmarshal</span><span class="p">(</span><span class="nx">oldstate</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 更新状态中的预留epoch字段，准备进入下一个epoch。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">st</span><span class="p">.</span><span class="nx">reservedEpoch</span> <span class="p">=</span> <span class="nx">st</span><span class="p">.</span><span class="nx">reservedEpoch</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 序列化更新后的状态，准备提交。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">newstate</span> <span class="o">:=</span> <span class="nf">marshal</span><span class="p">(</span><span class="nx">st</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用从Begin获得的提交函数尝试提交新状态。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 此操作会与其他服务器通信，以确保新状态被复制到大多数服务器。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">err</span> <span class="o">:=</span> <span class="nf">commit</span><span class="p">(</span><span class="nx">newstate</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 检查提交是否成功。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果提交失败，将错误状态编码并写入reply。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">*</span><span class="nx">reply</span> <span class="p">=</span> <span class="nx">marshal</span><span class="p">.</span><span class="nf">WriteInt</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="nx">STAT_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果提交成功，将OK状态编码并写入reply。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">*</span><span class="nx">reply</span> <span class="p">=</span> <span class="nx">marshal</span><span class="p">.</span><span class="nf">WriteInt</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="nx">STAT_OK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 编码并写入新的预留epoch到reply。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">*</span><span class="nx">reply</span> <span class="p">=</span> <span class="nx">marshal</span><span class="p">.</span><span class="nf">WriteInt</span><span class="p">(</span><span class="o">*</span><span class="nx">reply</span><span class="p">,</span> <span class="nx">st</span><span class="p">.</span><span class="nx">reservedEpoch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 编码并写入当前配置到reply。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">*</span><span class="nx">reply</span> <span class="p">=</span> <span class="nx">marshal</span><span class="p">.</span><span class="nf">WriteBytes</span><span class="p">(</span><span class="o">*</span><span class="nx">reply</span><span class="p">,</span> <span class="nf">encode_cfg</span><span class="p">(</span><span class="nx">st</span><span class="p">.</span><span class="nx">config</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>版本化状态机API</strong></p>
<p>开发者需实现如下所示的版本化状态机接口，以便在 vRSM 上构建应用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">VersionedStateMachine</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Apply</span>		<span class="kd">func</span><span class="p">(</span><span class="nx">op</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">idx</span> <span class="kt">uint64</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Read</span>		<span class="kd">func</span><span class="p">(</span><span class="nx">op</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="kt">uint64</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">SetState</span> 	<span class="kd">func</span><span class="p">(</span><span class="nx">snap</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">idx</span> <span class="kt">uint64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">GetState</span> 	<span class="kd">func</span><span class="p">()</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>操作执行：
<ul>
<li><code>Apply()</code>：执行应用级别的读写操作。</li>
<li><code>Read()</code>：对当前内存状态执行应用级别的读操作。</li>
</ul>
</li>
<li>状态管理：
<ul>
<li><code>SetState()</code> 和 <code>GetState()</code>：允许序列化内存状态。</li>
<li>vRSM 库：负责状态的磁盘检查点和新副本的状态复制。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>vRSM客户端库（clerk）</strong></p>
<p>vRSM 提供客户端库，简化了通过网络向 vRSM 发送请求的复杂性。Clerk 从配置服务获取并缓存副本服务器地址。</p>
<p>操作执行：</p>
<ul>
<li><code>clerk.Apply(op)</code>：向主服务器发送读写操作。</li>
<li><code>clerk.Read(op)</code>：向任何副本发送只读操作。</li>
</ul>
<p>若服务器不再为主服务器或副本服务器，Clerk 会请求新服务器信息并重试。由于重试，可能导致一个操作被应用许多次，需要更高级库处理操作去重。</p>
</li>
<li>
<p><strong>exactlyonce库</strong></p>
<p>确保使用 vRSM 的应用操作仅执行一次。组件构成：</p>
<ul>
<li>新型 Clerk：包装 vRSM Clerk，通过添加唯一请求 ID 防止操作重复。</li>
<li>状态机转换器：为应用级状态机添加回复表，追踪已应用请求及其回复。</li>
</ul>
<p>操作处理：</p>
<ul>
<li>新请求：调用状态机的 <code>Apply()</code> 并存储回复。</li>
<li>重复请求：不调用状态机，直接返回先前回复。</li>
<li>只读操作：忽略回复表，直接调用状态机的 <code>Read()</code>。</li>
</ul>
</li>
</ol>
<h3 id="vrsm上层应用" class="heading-element"><span>2.3 vRSM上层应用</span>
  <a href="#vrsm%e4%b8%8a%e5%b1%82%e5%ba%94%e7%94%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ol>
<li>
<p><strong>vKV实现</strong></p>
<ul>
<li><strong>vKV 架构</strong>：基于 vRSM 和 exactlyonce 库实现。</li>
<li><strong>服务器端</strong>：实现 vRSM 期望的状态机接口。</li>
<li><strong>客户端</strong>：基于 exactlyonce clerk 实现的 clerk，提供简化的 API（<code>Put</code>、<code>CondPut</code>、<code>Get</code>）。</li>
<li><strong>实现细节</strong>：vKV 实现简单，包括 (反)序列化方法和内存映射的读写函数。</li>
<li><strong>性能优化</strong>：vKV 存储键到值的映射以及键的最后修改操作索引，利用 vRSM 的版本化状态机接口提升读取性能。</li>
</ul>
</li>
<li>
<p><strong>基于租约的客户端缓存-cachekv</strong></p>
<p>cachekv 库通过在 vKV 中存储数据和租约到期时间实现基于租约的客户端缓存。GetAndCache 函数如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">k</span> <span class="o">*</span><span class="nx">CacheKv</span><span class="p">)</span> <span class="nf">GetAndCache</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">cachetime</span> <span class="kt">uint64</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// first attempt to read from the local cache, and if not cached, call vKV&#39;s Get.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">old</span> <span class="o">:=</span> <span class="nx">k</span><span class="p">.</span><span class="nx">kv</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">new</span> <span class="o">:=</span> <span class="nx">old</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">newExpiration</span> <span class="o">:=</span> <span class="nb">max</span><span class="p">(</span><span class="nf">GetTimeRange</span><span class="p">().</span><span class="nx">latest</span><span class="o">+</span><span class="nx">cachetime</span><span class="p">,</span> <span class="nx">old</span><span class="p">.</span><span class="nx">leaseExpiration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">new</span><span class="p">.</span><span class="nx">leaseExpiration</span> <span class="p">=</span> <span class="nx">newExpiration</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Try to update the lease expiration time on the backend
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">resp</span> <span class="o">:=</span> <span class="nx">k</span><span class="p">.</span><span class="nx">kv</span><span class="p">.</span><span class="nf">CondPut</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">old</span><span class="p">,</span> <span class="nx">new</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">resp</span> <span class="o">==</span> <span class="s">&#34;ok&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">k</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nx">k</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="nx">cacheValue</span><span class="p">{</span><span class="nx">v</span><span class="p">:</span> <span class="nx">old</span><span class="p">.</span><span class="nx">v</span><span class="p">,</span> <span class="nx">l</span><span class="p">:</span> <span class="nx">newLeaseExpiration</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">k</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">old</span><span class="p">.</span><span class="nx">v</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>它返回指定键的值，并在内部缓存，使用 <code>CondPut</code> （确保仅在租约过期时更改值）原子增加租约持续时间，确保并发修改不会改变值。</p>
</li>
<li>
<p><strong>锁服务</strong></p>
<p><strong>锁服务接口</strong>基于 vKV 实现，使用 vKV 的 CondPut() 操作实现锁。每个锁对应一个键值对，提供 Acquire() 和 Release() 方法的规范，支持应用实现独占锁。锁服务的规范与传统的并发分离逻辑锁规范不同，简化了资源保护。</p>
</li>
<li>
<p><strong>银行事务</strong></p>
<p>顶层应用，使用基于 vKV clerk 和锁服务接口构建的事务。</p>
<ul>
<li><strong>账户状态存储</strong>：使用 vKV 实例存储账户状态，每个账户余额用一对键值存储。</li>
<li><strong>并发访问控制</strong>：使用锁服务处理账户的并发访问，每次转账操作获取两个锁，确保并发转账的安全执行。</li>
<li><strong>审计功能 (Audit)</strong>：获取所有账户的锁，计算总余额，并释放锁。</li>
<li><strong>容错处理</strong>：若银行节点崩溃，锁服务中的锁将保持锁定状态，恢复需要某种形式的撤销或重做日志，但原型中未实现。</li>
</ul>
</li>
</ol>
<h2 id="grove性能评估" class="heading-element"><span>3 Grove性能评估</span>
  <a href="#grove%e6%80%a7%e8%83%bd%e8%af%84%e4%bc%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ol>
<li>
<p><strong>实验目的</strong>：</p>
<ul>
<li>
<p>证明 Grove 能够验证现实世界中高性能的分布式系统。</p>
</li>
<li>
<p><font color="red">展示 vKV 原型通过 Grove 验证后能够实现高性能</font>。</p>
</li>
<li>
<p>特别强调租约在 vKV 中实现高性能读取的重要性。</p>
</li>
</ul>
</li>
<li>
<p><strong>baseline性能对比</strong>：将vKV与Redis进行比较，后者是高性能键值服务器，以C语言编写。为了使Redis与vKV在持久化保障上可比，Redis开启appendfsync always选项，而vKV运行于单核并禁用备份副本。结果显示，vKV吞吐量为Redis的67%-73%，请求延迟相当，多核下vKV吞吐量更高（例如，8核下YCSB 5%写入情况下，吞吐量提升5.1倍）。</p>
</li>
<li>
<p><strong>重新配置能力</strong>：通过添加新服务器进行系统重配置，同时继续正确处理客户端请求的能力。实验中，主服务器在 10 秒时被杀掉，开始重配置过程。使用 YCSB 工作负载变体，100 个客户端持续写入，100 个客户端持续读取。重配置期间，写入操作会阻塞，但读取可以继续。实验结果显示 vKV 可以在重配置期间继续提供读取服务。</p>
</li>
<li>
<p><strong>租约对读取性能的影响</strong>：<strong>写入密集型工作负载</strong>（50%或100%写入），增加副本会降低性能，因为写入在主服务器遇到更多开销，且其它副本处理的读取不足以抵消成本。对于<strong>读取密集型工作负载</strong>，增加副本可以提升性能，例如，YCSB 5%和0%写入情况下，3台服务器分别达到单服务器1.7倍和2.3倍的吞吐量。</p>
</li>
</ol>
<h2 id="总结" class="heading-element"><span>4 总结</span>
  <a href="#%e6%80%bb%e7%bb%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="grovekv系统" class="heading-element"><span>4.1 GroveKV系统</span>
  <a href="#grovekv%e7%b3%bb%e7%bb%9f" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>GroveKV特点：</p>
<ul>
<li>容错、线性化的键值（KV）服务。</li>
<li>操作（Put/Get）exactlyonce。</li>
<li>崩溃安全且可重配置。</li>
</ul>
<p>要进行重配置，GroveKV使用configservice管理服务器更改。如果没有configservice，类似VMWare-FT的问题，即两个备份可能是网络的彼此分区并且都想成为主分区。这可以通过ZooKeeper之类的配置服务解决。</p>
<p>lab3也是一个容错KV服务，但GroveKV使用主/备份复制而不是Raft。<strong>关键操作</strong>如下：</p>
<ol>
<li>复制：Primary使用goroutines复制到其他服务器，基于RPC。执行操作时需要持有锁。</li>
<li>重配置：封闭当前的服务器组，从中获取状态副本，安装到新服务器。使用epoch编号处理并发重配置。</li>
<li>基于租约的读取：服务器不跟任何人协调回复<code>Get</code>请求。</li>
</ol>
<h3 id="grove核心" class="heading-element"><span>4.2 Grove核心</span>
  <a href="#grove%e6%a0%b8%e5%bf%83" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>在正式验证领域，Grove 的核心在于证明代码在所有可能场景下均能表现得当，这一过程要求对代码执行的数学模型有深刻理解，以及对系统行为“正确”的明确定义。通过引入机械证明检查器，Grove 大幅降低了开发者在证明过程中犯错的可能性。</p>
<p>在 Grove 中，规范由前条件和后条件构成，用于描述操作前后的系统状态。以 GroveKV 为例，Put 和 Get 操作的规范不仅限定了操作的预期结果，还明确了数据所有权的转移。</p>
<p>Concurrent Separation Logic（CSL）是一种针对并发程序的形式化验证方法，Grove 对其进行了创新性的拓展，使之适用于分布式系统。CSL 强调基于资源所有权的代码分析，其中“堆指向”是一个典型的例子，它确保了数据的一致性不受并发访问的影响。</p>
<p>在 Grove 中，不变量指的是系统运行中必须始终保持为真的属性，而时间有界不变量（tinv）则进一步限制了特定资源的有效期。例如，<code>GetTimeRange</code> 函数允许在租约未到期的情况下，临时访问底层资源，这在处理基于租约的读取时尤为关键。</p>
<p>尽管正式验证能够显著减少某些类型的错误，但它并非万能药。验证不能保证所有实际中可能遇到的问题都被解决，特别是那些涉及系统活性性的问题，如死锁或饥饿。此外，编写高质量的证明和测试同样需要大量时间和精力，与开发代码无异，甚至有时还需经历重构的过程。</p>
]]></description></item><item><title>【MIT 6.5840(6.824) 】Lab3:Raft 设计实现</title><link>https://hezephyr.github.io/posts/08.mit-6.58406.824-lab3-raft/</link><pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/08.mit-6.58406.824-lab3-raft/</guid><description><![CDATA[<h2 id="实验要求" class="heading-element"><span>1 实验要求</span>
  <a href="#%e5%ae%9e%e9%aa%8c%e8%a6%81%e6%b1%82" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>在本实验中，要求实现Raft，这是一种复制状态机协议，用于构建一个容错的键/值存储系统。实验的具体要求如下：</p>
<ol>
<li><strong>实现Raft</strong>：
<ul>
<li>将Raft实现为一个Go语言的对象类型，包含相关的方法，以便作为更大服务的一个模块使用。</li>
<li>Raft实例之间通过RPC通信，以维持复制的日志一致性。</li>
<li>支持无限数量的编号命令（日志条目），并能处理这些条目的提交。当一个特定索引的日志条目被提交后，Raft实现应将该条目发送给更大的服务执行。</li>
</ul>
</li>
<li><strong>遵循论文设计</strong>：
<ul>
<li>遵循<a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf"target="_blank" rel="external nofollow noopener noreferrer">Raft论文<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>的设计，重点参考图2。</li>
<li>实现论文中描述的大部分功能，包括持久状态的保存和恢复，即使在节点故障和重启后也能保证数据的完整性。</li>
<li>不需要实现集群成员变更的部分（论文第六节）。</li>
</ul>
</li>
</ol>
<p>论文图2:</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160616514.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160616514.png?size=small" data-sub-html="<h2>image-20240811160616514</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160616514.png" alt="image-20240811160616514" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160616514.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160616514.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160616514.png?size=large 2x" data-title="image-20240811160616514" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>Raft交互图：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=small" data-sub-html="<h2>image-20240811160802518</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png" alt="image-20240811160802518" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811160802518.png?size=large 2x" data-title="image-20240811160802518" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>我的实验代码仓库：https://github.com/HeZephyr/MIT6.5840/tree/main/src/raft，已通过压力测试，代码严格遵守上述按要求实现。</p>
<p><font color="red">注意：下述所贴代码为了简洁以及分块，进行了一定程度的删减，如果需要复现，可以前往仓库</font>。</p>
<h2 id="实验设计" class="heading-element"><span>2 实验设计</span>
  <a href="#%e5%ae%9e%e9%aa%8c%e8%ae%be%e8%ae%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="整体结构" class="heading-element"><span>2.1 整体结构</span>
  <a href="#%e6%95%b4%e4%bd%93%e7%bb%93%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>此Raft结构体基于论文图2，基本上都是其中介绍的字段以及lab自带的字段，其中其他属性论文中也间接简述和支持，以确保Raft节点能够高效、稳定地运作。如选举定时器和心跳定时器，被明确地纳入了Raft结构体中。这些定时器对于触发关键的系统行为至关重要——选举定时器确保在必要时发起选举过程，而心跳定时器则维持着领导者与跟随者之间的连接，防止不必要的选举。</p>
<p>条件变量（<code>sync.Cond</code>）的引入则是为了精妙地控制两个核心后台goroutine的操作节奏：日志应用goroutine（<code>applier</code>，只需要一个，<font color="red">专门用于监控日志条目的提交状态，一旦日志条目被确认提交，它将负责将这些条目应用到状态机中</font>。）和日志复制goroutine（<code>replicator</code>，<font color="red">负责进行日志条目的同步</font>。考虑到集群中每个peer都需要与除了自身以外的其它peer进行日志同步，这意味着我们需要<code>len(peers) - 1</code>个<code>replicator</code> goroutines来分别处理与每个peer的交互）。</p>
<p>此外，还有一个goroutine <code>ticker</code>负责定期检查选举和心跳的超时，确保在适当的时间间隔内触发选举过程或发送心跳信号。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Raft</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mu</span>        <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>        <span class="c1">// Lock to protect shared access to this peer&#39;s state, to use RWLock for better performance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">peers</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">labrpc</span><span class="p">.</span><span class="nx">ClientEnd</span> <span class="c1">// RPC end points of all peers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">persister</span> <span class="o">*</span><span class="nx">Persister</span>          <span class="c1">// Object to hold this peer&#39;s persisted state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">me</span>        <span class="kt">int</span>                 <span class="c1">// this peer&#39;s index into peers[]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dead</span>      <span class="kt">int32</span>               <span class="c1">// set by Kill()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Persistent state on all servers(Updated on stable storage before responding to RPCs)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">currentTerm</span> <span class="kt">int</span>        <span class="c1">// latest term server has seen(initialized to 0 on first boot, increases monotonically)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">votedFor</span>    <span class="kt">int</span>        <span class="c1">// candidateId that received vote in current term(or null if none)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">logs</span>        <span class="p">[]</span><span class="nx">LogEntry</span> <span class="c1">// log entries; each entry contains command for state machine, and term when entry was received by leader(first index is 1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Volatile state on all servers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">commitIndex</span> <span class="kt">int</span> <span class="c1">// index of highest log entry known to be committed(initialized to 0, increases monotonically)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lastApplied</span> <span class="kt">int</span> <span class="c1">// index of highest log entry applied to state machine(initialized to 0, increases monotonically)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Volatile state on leaders(Reinitialized after election)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nextIndex</span>  <span class="p">[]</span><span class="kt">int</span> <span class="c1">// for each server, index of the next log entry to send to that server(initialized to leader last log index + 1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">matchIndex</span> <span class="p">[]</span><span class="kt">int</span> <span class="c1">// for each server, index of highest log entry known to be replicated on server(initialized to 0, increases monotonically)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// other properties
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">state</span>          <span class="nx">NodeState</span>     <span class="c1">// current state of the server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">electionTimer</span>  <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Timer</span>   <span class="c1">// timer for election timeout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">heartbeatTimer</span> <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Timer</span>   <span class="c1">// timer for heartbeat
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">applyCh</span>        <span class="kd">chan</span> <span class="nx">ApplyMsg</span> <span class="c1">// channel to send apply message to service
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">applyCond</span>      <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Cond</span>    <span class="c1">// condition variable for apply goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">replicatorCond</span> <span class="p">[]</span><span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Cond</span>  <span class="c1">// condition variable for replicator goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Make</span><span class="p">(</span><span class="nx">peers</span> <span class="p">[]</span><span class="o">*</span><span class="nx">labrpc</span><span class="p">.</span><span class="nx">ClientEnd</span><span class="p">,</span> <span class="nx">me</span> <span class="kt">int</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">persister</span> <span class="o">*</span><span class="nx">Persister</span><span class="p">,</span> <span class="nx">applyCh</span> <span class="kd">chan</span> <span class="nx">ApplyMsg</span><span class="p">)</span> <span class="o">*</span><span class="nx">Raft</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Raft</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">mu</span><span class="p">:</span>             <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">peers</span><span class="p">:</span>          <span class="nx">peers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">persister</span><span class="p">:</span>      <span class="nx">persister</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">me</span><span class="p">:</span>             <span class="nx">me</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">dead</span><span class="p">:</span>           <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">currentTerm</span><span class="p">:</span>    <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">votedFor</span><span class="p">:</span>       <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">logs</span><span class="p">:</span>           <span class="nb">make</span><span class="p">([]</span><span class="nx">LogEntry</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="c1">// dummy entry at index 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">commitIndex</span><span class="p">:</span>    <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastApplied</span><span class="p">:</span>    <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nextIndex</span><span class="p">:</span>      <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">peers</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">matchIndex</span><span class="p">:</span>     <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">peers</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">state</span><span class="p">:</span>          <span class="nx">Follower</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">electionTimer</span><span class="p">:</span>  <span class="nx">time</span><span class="p">.</span><span class="nf">NewTimer</span><span class="p">(</span><span class="nf">RandomElectionTimeout</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">heartbeatTimer</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTimer</span><span class="p">(</span><span class="nf">StableHeartbeatTimeout</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">applyCh</span><span class="p">:</span>        <span class="nx">applyCh</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">replicatorCond</span><span class="p">:</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Cond</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">peers</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// initialize from state persisted before a crash
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">rf</span><span class="p">.</span><span class="nf">readPersist</span><span class="p">(</span><span class="nx">persister</span><span class="p">.</span><span class="nf">ReadRaftState</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// should use mu to protect applyCond, avoid other goroutine to change the critical section
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">rf</span><span class="p">.</span><span class="nx">applyCond</span> <span class="p">=</span> <span class="nx">sync</span><span class="p">.</span><span class="nf">NewCond</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// initialize nextIndex and matchIndex, and start replicator goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">peer</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">peers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">matchIndex</span><span class="p">[</span><span class="nx">peer</span><span class="p">],</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">nextIndex</span><span class="p">[</span><span class="nx">peer</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getLastLog</span><span class="p">().</span><span class="nx">Index</span><span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">peer</span> <span class="o">!=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">me</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">replicatorCond</span><span class="p">[</span><span class="nx">peer</span><span class="p">]</span> <span class="p">=</span> <span class="nx">sync</span><span class="p">.</span><span class="nf">NewCond</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// start replicator goroutine to send log entries to peer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">go</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">replicator</span><span class="p">(</span><span class="nx">peer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// start ticker goroutine to start elections
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">ticker</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// start apply goroutine to apply log entries to state machine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">applier</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">rf</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="lab3a领导者选举" class="heading-element"><span>2.2 lab3A：领导者选举</span>
  <a href="#lab3a%e9%a2%86%e5%af%bc%e8%80%85%e9%80%89%e4%b8%be" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>此任务需要实现Raft领导人选举和心跳（通过不附加日志条目的RPC）。对于这个要求，论文中其实给出了状态转移图，指导我们怎么去做。这个选举流程逻辑如下：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader?size=small" data-sub-html="<h2>image-20240811140525050</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader" alt="image-20240811140525050" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader?size=large 2x" data-title="image-20240811140525050" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<blockquote>
<p>在lab3A实现过程中，需要注意如下几点：</p>
<ul>
<li>当发起投票时，务必使用goroutine并行发起RPC调用，以避免阻塞<code>ticker</code>协程。这样，即使在等待投票响应期间，候选者（Candidate）仍能响应新的选举超时，从而有机会自增任期并启动新一轮的选举。</li>
<li>有两种常见的实现投票统计的方式：一种是在函数作用域内定义一个局部变量，并利用闭包来维护投票计数；另一种是在<code>Raft</code>结构体中维护一个全局的<code>voteCnt</code>变量。为了保持<code>Raft</code>结构体的简洁，推荐采用局部变量和闭包的方案。</li>
<li>对于过期的RPC请求回复，应直接忽略，不作任何处理。这是因为Raft协议假设网络环境不可靠，可能发生的延迟或重播不应影响当前的决策流程。</li>
<li>如果在RPC通信中，节点A发现其任期小于节点B的任期，不论节点A当前的角色如何，都应立即转换为跟随者（Follower）。这是为了维护任期的权威性，确保集群的一致性。</li>
<li>为防止多个节点几乎同时启动选举，导致资源浪费和潜在的领导权争夺，应为选举超时设置一个随机的误差范围（如150~300ms），以拉长不同节点选举的时间间隔，这里采用时间戳作为随机种子。<font color="red">且每一次一个节点重置自己的选举定时器时，都需要重新选择一个随机的超时时间。避免服务器会以极小的概率选择相同的随机超时时间，那么会永远处于分割选票的场景中</font>。</li>
<li>Go RPC 仅发送名称以大写字母开头的结构体字段。子结构还必须具有大写的字段名称（例如数组中日志记录的字段）。这 <code>labgob</code> 软件包会警告您这一点；不要忽视警告。</li>
<li>在同一个任期内，Follower只能投出一票，这是为了防止出现多个Leader的情况。票数的刷新应在任期转换时进行，以确保投票的有效性和一致性。</li>
<li>为了提高并发性能，应尽量缩短临界区的长度。合理的锁使用策略是只在真正需要保护共享资源的最小时间内使用锁。</li>
</ul>
</blockquote>
<p>核心的Ticker实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">ticker</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">killed</span><span class="p">()</span> <span class="o">==</span> <span class="kc">false</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">rf</span><span class="p">.</span><span class="nx">electionTimer</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nf">ChangeState</span><span class="p">(</span><span class="nx">Candidate</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// start election
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">rf</span><span class="p">.</span><span class="nf">StartElection</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">electionTimer</span><span class="p">.</span><span class="nf">Reset</span><span class="p">(</span><span class="nf">RandomElectionTimeout</span><span class="p">())</span> <span class="c1">// reset election timer in case of split vote
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">rf</span><span class="p">.</span><span class="nx">heartbeatTimer</span><span class="p">.</span><span class="nx">C</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">Leader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// should send heartbeat
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">rf</span><span class="p">.</span><span class="nf">BroadcastHeartbeat</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">rf</span><span class="p">.</span><span class="nx">heartbeatTimer</span><span class="p">.</span><span class="nf">Reset</span><span class="p">(</span><span class="nf">StableHeartbeatTimeout</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>StartElection</code>函数实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">StartElection</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">me</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">genRequestVoteArgs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">grantedVotes</span> <span class="o">:=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">peer</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">peers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">peer</span> <span class="o">==</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">me</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">peer</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">RequestVoteReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">sendRequestVote</span><span class="p">(</span><span class="nx">peer</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">defer</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span> <span class="o">==</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="o">&amp;&amp;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">Candidate</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">VoteGranted</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">grantedVotes</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">						<span class="c1">// check over half of the votes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="k">if</span> <span class="nx">grantedVotes</span> <span class="p">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nx">peers</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">rf</span><span class="p">.</span><span class="nf">ChangeState</span><span class="p">(</span><span class="nx">Leader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">							<span class="nx">rf</span><span class="p">.</span><span class="nf">BroadcastHeartbeat</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span> <span class="p">&gt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">rf</span><span class="p">.</span><span class="nf">ChangeState</span><span class="p">(</span><span class="nx">Follower</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">						<span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span> <span class="p">=</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}(</span><span class="nx">peer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>RequestVote</code>RPC严格按照图2描述实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">RequestVote</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">RequestVoteArgs</span><span class="p">,</span> <span class="nx">reply</span> <span class="o">*</span><span class="nx">RequestVoteReply</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v}&#39;s state is {state %v, term %v}} after processing RequestVote,  RequestVoteArgs %v and RequestVoteReply %v &#34;</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">me</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Reply false if term &lt; currentTerm(§5.1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// if the term is same as currentTerm, and the votedFor is not null and not the candidateId, then reject the vote(§5.2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span> <span class="p">&lt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="o">||</span> <span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">Term</span> <span class="o">==</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="o">&amp;&amp;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span> <span class="o">!=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">CandidateId</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">VoteGranted</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span> <span class="p">&gt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nf">ChangeState</span><span class="p">(</span><span class="nx">Follower</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span> <span class="p">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// if candidate&#39;s log is not up-to-date, reject the vote(§5.4)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">rf</span><span class="p">.</span><span class="nf">isLogUpToDate</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">LastLogIndex</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">LastLogTerm</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">VoteGranted</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span> <span class="p">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">CandidateId</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">electionTimer</span><span class="p">.</span><span class="nf">Reset</span><span class="p">(</span><span class="nf">RandomElectionTimeout</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">VoteGranted</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="lab3b日志" class="heading-element"><span>2.3 lab3B：日志</span>
  <a href="#lab3b%e6%97%a5%e5%bf%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>在Lab3B阶段，我们的目标转向实现Raft协议中至关重要的日志复制机制。其中入口是<code>Start</code>函数（应用程序与Raft的接口）。具体的日志复制流程：</p>
<ul>
<li>一旦Leader接收到新的日志条目，它首先会在自己的日志中追加这个条目。</li>
<li>随后，Leader通过<code>BroadcastHeartbeat</code>函数将这个日志条目广播至集群中的所有Peer，确保所有节点都能同步最新的状态。此过程涉及对日志条目的校验与冲突解决，确保每个Peer的日志保持一致且最新。</li>
<li>在日志条目被发送给Peers后，Leader会等待来自Peer的确认回复。只有当Leader收到大多数Peer（即超过半数）的确认，表明这些Peer已经成功复制了日志条目，Leader才能认为该日志条目已经被安全地复制。这是Raft协议中“多数原则”的体现，确保了即使在部分节点失败的情况下，系统仍然能够达成一致。<font color="red">当然，也需要根据回复确认自己Leader的地位，如果不再是Leader，需要更改为Follower</font>。</li>
<li>一旦日志条目被确认复制到了大多数节点，Leader就会标记这个条目为已提交（committed）。随后，Leader会通过<code>AppendEntries</code> RPC将最新的<code>LeaderCommit</code>信息广播给所有Peer，指示它们哪些日志条目现在可以被提交并应用到各自的状态机中。每个Peer根据接收到的<code>LeaderCommit</code>值来决定其日志中哪些条目可以被提交，从而确保所有活跃Peer的状态机保持一致。</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader_election?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader_election?size=small" data-sub-html="<h2>image-20240811144321194</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader_election" alt="image-20240811144321194" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader_election?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader_election?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/leader_election?size=large 2x" data-title="image-20240811144321194" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<blockquote>
<p>在lab3B实现过程中，需要注意如下几点：</p>
<ul>
<li>在发送RPC、接收RPC、推送和接收channel时，绝对不要持有锁，否则极易引发死锁。这在locking博客中有详细介绍，应时刻牢记。<font color="red">使用读写锁时，对于只读操作，只需持有读锁，避免不必要的写锁持有，以提高并发性能</font>。</li>
<li>对于过期的RPC请求回复，应直接忽略，避免执行任何业务逻辑</li>
<li>根据图2的规定，Raft Leader只能提交属于当前任期的日志条目，不得提交前任期的日志。在根据<code>matchIndex[]</code>判断是否可以提交日志时，必须检查该日志的任期是否与当前Leader的任期相匹配。</li>
<li>Follower对Leader的<code>leaderCommit</code>应无条件服从，无需额外判断。</li>
<li>Leader需维护好<code>matchIndex[]</code>（跟踪Follower的提交状态）和<code>nextIndex[]</code>（追踪Follower的日志复制进度），并在Leader崩溃后正确地初始化这两个数组。</li>
<li>当Follower接收到日志时，需检查RPC中Leader认定的当前Follower的<code>prevLogIndex</code>和<code>prevLogTerm</code>，判断日志是否存在冲突，若存在冲突，需由Leader从冲突点开始强制覆盖Follower的日志。</li>
<li>新的Leader的日志需确保包含了所有已提交的日志条目。Follower可能在Leader提交日志期间进入不可用状态，从而导致被选为新Leader的Follower可能覆盖已提交的日志条目。为避免这种情况，选举时需加入Leader限制机制，即Follower只给任期和日志更新的Candidate投票，具体规则如下：
<ul>
<li>如果任期号不同，任期号较大的Candidate更新；</li>
<li>如果任期号相同，日志索引值较大（即日志更长）的Candidate更新。</li>
</ul>
</li>
</ul>
</blockquote>
<p>核心的<code>AppendEntries</code> RPC实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">AppendEntries</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">AppendEntriesArgs</span><span class="p">,</span> <span class="nx">reply</span> <span class="o">*</span><span class="nx">AppendEntriesReply</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Your code here (3A, 3B).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v}&#39;s state is {state %v, term %v}} after processing AppendEntries,  AppendEntriesArgs %v and AppendEntriesReply %v &#34;</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">me</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Reply false if term &lt; currentTerm(§5.1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span> <span class="p">&lt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Success</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// indicate the peer is the leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span> <span class="p">&gt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span> <span class="p">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nf">ChangeState</span><span class="p">(</span><span class="nx">Follower</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">electionTimer</span><span class="p">.</span><span class="nf">Reset</span><span class="p">(</span><span class="nf">RandomElectionTimeout</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Reply false if log doesn’t contain an entry at prevLogIndex whose term matches prevLogTerm(§5.3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">PrevLogIndex</span> <span class="p">&lt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getFirstLog</span><span class="p">().</span><span class="nx">Index</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Success</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// check the log is matched, if not, return the conflict index and term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// if an existing entry conflicts with a new one (same index but different terms), delete the existing entry and all that follow it(§5.3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">rf</span><span class="p">.</span><span class="nf">isLogMatched</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">PrevLogIndex</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">PrevLogTerm</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Success</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastLogIndex</span> <span class="o">:=</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getLastLog</span><span class="p">().</span><span class="nx">Index</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// find the first index of the conflicting term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">lastLogIndex</span> <span class="p">&lt;</span> <span class="nx">args</span><span class="p">.</span><span class="nx">PrevLogIndex</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// the last log index is smaller than the prevLogIndex, then the conflict index is the last log index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">reply</span><span class="p">.</span><span class="nx">ConflictIndex</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">ConflictTerm</span> <span class="p">=</span> <span class="nx">lastLogIndex</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">firstLogIndex</span> <span class="o">:=</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getFirstLog</span><span class="p">().</span><span class="nx">Index</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// find the first index of the conflicting term
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">index</span> <span class="o">:=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">PrevLogIndex</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">index</span> <span class="o">&gt;=</span> <span class="nx">firstLogIndex</span> <span class="o">&amp;&amp;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="nx">index</span><span class="o">-</span><span class="nx">firstLogIndex</span><span class="p">].</span><span class="nx">Term</span> <span class="o">==</span> <span class="nx">args</span><span class="p">.</span><span class="nx">PrevLogTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">index</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">reply</span><span class="p">.</span><span class="nx">ConflictIndex</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">ConflictTerm</span> <span class="p">=</span> <span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">args</span><span class="p">.</span><span class="nx">PrevLogTerm</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// append any new entries not already in the log
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">firstLogIndex</span> <span class="o">:=</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getFirstLog</span><span class="p">().</span><span class="nx">Index</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">entry</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Entries</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// find the junction of the existing log and the appended log.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">Index</span><span class="o">-</span><span class="nx">firstLogIndex</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">)</span> <span class="o">||</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="nx">entry</span><span class="p">.</span><span class="nx">Index</span><span class="o">-</span><span class="nx">firstLogIndex</span><span class="p">].</span><span class="nx">Term</span> <span class="o">!=</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">Term</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[:</span><span class="nx">entry</span><span class="p">.</span><span class="nx">Index</span><span class="o">-</span><span class="nx">firstLogIndex</span><span class="p">],</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Entries</span><span class="p">[</span><span class="nx">index</span><span class="p">:]</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If leaderCommit &gt; commitIndex, set commitIndex = min(leaderCommit, index of last new entry) (paper)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newCommitIndex</span> <span class="o">:=</span> <span class="nf">Min</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">LeaderCommit</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getLastLog</span><span class="p">().</span><span class="nx">Index</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">newCommitIndex</span> <span class="p">&gt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span> <span class="p">=</span> <span class="nx">newCommitIndex</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">applyCond</span><span class="p">.</span><span class="nf">Signal</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Success</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>replicateOnceRound</code>用来调用<code>AppendEntries</code>RPC，并根据<code>reply</code>继续相应处理：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">replicateOnceRound</span><span class="p">(</span><span class="nx">peer</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">state</span> <span class="o">!=</span> <span class="nx">Leader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">prevLogIndex</span> <span class="o">:=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">nextIndex</span><span class="p">[</span><span class="nx">peer</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">genAppendEntriesArgs</span><span class="p">(</span><span class="nx">prevLogIndex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">AppendEntriesReply</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">sendAppendEntries</span><span class="p">(</span><span class="nx">peer</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="nx">reply</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span> <span class="o">==</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="o">&amp;&amp;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">state</span> <span class="o">==</span> <span class="nx">Leader</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">reply</span><span class="p">.</span><span class="nx">Success</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span> <span class="p">&gt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// indicate current server is not the leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">rf</span><span class="p">.</span><span class="nf">ChangeState</span><span class="p">(</span><span class="nx">Follower</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span> <span class="p">=</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span> <span class="o">==</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// decrease nextIndex and retry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">rf</span><span class="p">.</span><span class="nx">nextIndex</span><span class="p">[</span><span class="nx">peer</span><span class="p">]</span> <span class="p">=</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">ConflictIndex</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">ConflictTerm</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">firstLogIndex</span> <span class="o">:=</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getFirstLog</span><span class="p">().</span><span class="nx">Index</span>
</span></span><span class="line"><span class="cl">						<span class="k">for</span> <span class="nx">index</span> <span class="o">:=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">PrevLogIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">index</span> <span class="o">&gt;=</span> <span class="nx">firstLogIndex</span><span class="p">;</span> <span class="nx">index</span><span class="o">--</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="k">if</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="nx">index</span><span class="o">-</span><span class="nx">firstLogIndex</span><span class="p">].</span><span class="nx">Term</span> <span class="o">==</span> <span class="nx">reply</span><span class="p">.</span><span class="nx">ConflictTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">								<span class="nx">rf</span><span class="p">.</span><span class="nx">nextIndex</span><span class="p">[</span><span class="nx">peer</span><span class="p">]</span> <span class="p">=</span> <span class="nx">index</span>
</span></span><span class="line"><span class="cl">								<span class="k">break</span>
</span></span><span class="line"><span class="cl">							<span class="p">}</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">rf</span><span class="p">.</span><span class="nx">matchIndex</span><span class="p">[</span><span class="nx">peer</span><span class="p">]</span> <span class="p">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">PrevLogIndex</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">Entries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">rf</span><span class="p">.</span><span class="nx">nextIndex</span><span class="p">[</span><span class="nx">peer</span><span class="p">]</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">matchIndex</span><span class="p">[</span><span class="nx">peer</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// advance commitIndex if possible
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">rf</span><span class="p">.</span><span class="nf">advanceCommitIndexForLeader</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Leader应用已提交log的<code>advanceCommitIndexForLeader</code>函数实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">advanceCommitIndexForLeader</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nx">matchIndex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sortMatchIndex</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nb">copy</span><span class="p">(</span><span class="nx">sortMatchIndex</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">matchIndex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sort</span><span class="p">.</span><span class="nf">Ints</span><span class="p">(</span><span class="nx">sortMatchIndex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// get the index of the log entry with the highest index that is known to be replicated on a majority of servers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newCommitIndex</span> <span class="o">:=</span> <span class="nx">sortMatchIndex</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="p">(</span><span class="nx">n</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">newCommitIndex</span> <span class="p">&gt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">isLogMatched</span><span class="p">(</span><span class="nx">newCommitIndex</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span> <span class="p">=</span> <span class="nx">newCommitIndex</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">applyCond</span><span class="p">.</span><span class="nf">Signal</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>每个peer应用已提交的goroutine <code>applier</code>实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">applier</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">killed</span><span class="p">()</span> <span class="o">==</span> <span class="kc">false</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// check the commitIndex is advanced
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span> <span class="o">&lt;=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// need to wait for the commitIndex to be advanced
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">rf</span><span class="p">.</span><span class="nx">applyCond</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// apply log entries to state machine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">firstLogIndex</span><span class="p">,</span> <span class="nx">commitIndex</span><span class="p">,</span> <span class="nx">lastApplied</span> <span class="o">:=</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getFirstLog</span><span class="p">().</span><span class="nx">Index</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">lastApplied</span>
</span></span><span class="line"><span class="cl">		<span class="nx">entries</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">LogEntry</span><span class="p">,</span> <span class="nx">commitIndex</span><span class="o">-</span><span class="nx">lastApplied</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">copy</span><span class="p">(</span><span class="nx">entries</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="nx">lastApplied</span><span class="o">-</span><span class="nx">firstLogIndex</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="nx">commitIndex</span><span class="o">-</span><span class="nx">firstLogIndex</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// send the apply message to applyCh for service/State Machine Replica
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">entry</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">entries</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rf</span><span class="p">.</span><span class="nx">applyCh</span> <span class="o">&lt;-</span> <span class="nx">ApplyMsg</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">CommandValid</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Command</span><span class="p">:</span>      <span class="nx">entry</span><span class="p">.</span><span class="nx">Command</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">CommandIndex</span><span class="p">:</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">Index</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// use commitIndex rather than rf.commitIndex because rf.commitIndex may change during the Unlock() and Lock()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">rf</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">=</span> <span class="nx">commitIndex</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="lab3c持久化" class="heading-element"><span>2.4 lab3C：持久化</span>
  <a href="#lab3c%e6%8c%81%e4%b9%85%e5%8c%96" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>如果基于 Raft 的服务器重新启动，它应该从中断处恢复服务。这要求 Raft 保持在重启后仍然存在的持久状态。论文的图 2 提到了哪种状态应该是持久的，即<code>logs</code>、<code>currentTerm</code>和<code>votedFor</code>。在Lab3C中，我们的任务便是实现<code>persist()</code>和<code>readPersist()</code>这两个核心函数，前者负责保存Raft的状态，后者则是在Raft启动时恢复之前保存的数据。</p>
<p><code>readPersist</code>函数实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">readPersist</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">data</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span> <span class="c1">// bootstrap without any state?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span> <span class="o">:=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">NewBuffer</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d</span> <span class="o">:=</span> <span class="nx">labgob</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">votedFor</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">logs</span> <span class="p">[]</span><span class="nx">LogEntry</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">d</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">currentTerm</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">votedFor</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">d</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">logs</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v} fails to decode persisted state&#34;</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">me</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span> <span class="p">=</span> <span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">votedFor</span><span class="p">,</span> <span class="nx">logs</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">lastApplied</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getFirstLog</span><span class="p">().</span><span class="nx">Index</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getFirstLog</span><span class="p">().</span><span class="nx">Index</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>persist</code>函数实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">encodeState</span><span class="p">()</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span> <span class="o">:=</span> <span class="nx">labgob</span><span class="p">.</span><span class="nf">NewEncoder</span><span class="p">(</span><span class="nx">w</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nf">Encode</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nf">Encode</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nf">Encode</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">w</span><span class="p">.</span><span class="nf">Bytes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">persist</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">persister</span><span class="p">.</span><span class="nf">SaveStateAndSnapshot</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nf">encodeState</span><span class="p">(),</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>实现好后，我们只需要在入口处<code>Make</code>调用<code>readPersist</code>即可，关键需要在什么时候保存状态呢？其实很简单，只需要对我们需要持久化的三个字段修改的时候就进行<code>persist</code>操作。即<code>persist()</code>操作应当在以下几种情况下被触发：</p>
<ul>
<li><strong>日志条目更新</strong>：当有新的日志条目被添加到<code>logs</code>中，或是已有条目被删除或替换时。</li>
<li><strong>任期变更</strong>：当<code>currentTerm</code>发生变化，比如在选举期间或接收到更高任期的领导者信息时。</li>
<li><strong>投票行为</strong>：当<code>votedFor</code>字段被更新，意味着节点投出了新的一票或取消了之前的投票。</li>
</ul>
<h3 id="lab3d日志压缩" class="heading-element"><span>2.5 lab3D：日志压缩</span>
  <a href="#lab3d%e6%97%a5%e5%bf%97%e5%8e%8b%e7%bc%a9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>按照目前的情况，重新启动的服务器会重放完整的 Raft 日志以恢复其状态。然而，对于一个长期运行的服务来说，永远记录完整的 Raft 日志是不切实际的。需要使用快照服务配合，此时Raft会丢弃快照之前的日志条目。lab3D就是需要我们实现日志压缩，具体来说是核心是<code>Snapshot</code>（快照保存函数）以及<code>InstallSnapshot</code>RPC，快照压缩的流程：</p>
<ol>
<li>每个peer都会通过<code>Snapshot</code>捕获当前系统状态的一个快照。这通常包括但不限于状态机的当前状态、任何必要的元数据、以及快照生成时的任期信息。</li>
<li>当Leader认为有必要向Follower发送快照时，它将发起<code>InstallSnapshot</code>RPC调用。这通常发生在Follower的日志状态与Leader严重脱节时，例如日志冲突无法通过常规的<code>AppendEntries</code>RPC解决。</li>
<li>Follower接收到快照后，会验证其完整性和一致性，然后应用快照以替换其当前状态和日志。这包括清除快照点之前的所有日志条目，并将状态机恢复到快照所表示的状态。</li>
<li>Follower在成功应用快照后，应通过RPC回复向Leader确认，表明快照已被正确安装。Leader据此更新其<code>matchIndex</code>和<code>nextIndex</code>数组，以反映Follower的最新状态。</li>
</ol>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811144255744.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811144255744.png?size=small" data-sub-html="<h2>image-20240811144255744</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811144255744.png" alt="image-20240811144255744" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811144255744.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811144255744.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811144255744.png?size=large 2x" data-title="image-20240811144255744" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<blockquote>
<p>在lab3D实现过程中，需要注意以下几点：</p>
<ol>
<li>在更新 <code>lastApplied</code> 时，必须采用前一时刻的 <code>commitIndex</code> 值，而非实时的 <code>rf.commitIndex</code>。这是因为，在执行 <code>push applyCh</code> 过程中，<code>rf.commitIndex</code> 可能因其他操作而动态变化，使用其历史值可以保证 <code>lastApplied</code> 更新的准确性。</li>
<li>需要注意使用<code>CondInstallSnapshot</code>来验证快照的有效性。</li>
<li>在修剪log的时候注意留一个dummy log</li>
<li>使用 <code>Max(rf.lastApplied, commitIndex)</code> 而不是直接使用 <code>commitIndex</code> 来避免并发 InstallSnapshot RPC 导致 <code>lastApplied</code> 回滚</li>
</ol>
</blockquote>
<p><code>InstallSnapshot</code> RPC实现如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">InstallSnapshot</span><span class="p">(</span><span class="nx">args</span> <span class="o">*</span><span class="nx">InstallSnapshotArgs</span><span class="p">,</span> <span class="nx">reply</span> <span class="o">*</span><span class="nx">InstallSnapshotReply</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">reply</span><span class="p">.</span><span class="nx">Term</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// reply immediately if term &lt; currentTerm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span> <span class="p">&lt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span> <span class="p">&gt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">votedFor</span> <span class="p">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">Term</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nf">persist</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nf">ChangeState</span><span class="p">(</span><span class="nx">Follower</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">electionTimer</span><span class="p">.</span><span class="nf">Reset</span><span class="p">(</span><span class="nf">RandomElectionTimeout</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// check the snapshot is more up-to-date than the current log
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">args</span><span class="p">.</span><span class="nx">LastIncludedIndex</span> <span class="o">&lt;=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">applyCh</span> <span class="o">&lt;-</span> <span class="nx">ApplyMsg</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">SnapshotValid</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Snapshot</span><span class="p">:</span>      <span class="nx">args</span><span class="p">.</span><span class="nx">Data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">SnapshotTerm</span><span class="p">:</span>  <span class="nx">args</span><span class="p">.</span><span class="nx">LastIncludedTerm</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">SnapshotIndex</span><span class="p">:</span> <span class="nx">args</span><span class="p">.</span><span class="nx">LastIncludedIndex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>Snapshot</code>函数实现如下，它接收客户端创建的快照。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">Snapshot</span><span class="p">(</span><span class="nx">index</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">snapshot</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">snapshotIndex</span> <span class="o">:=</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getFirstLog</span><span class="p">().</span><span class="nx">Index</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">index</span> <span class="o">&lt;=</span> <span class="nx">snapshotIndex</span> <span class="o">||</span> <span class="nx">index</span> <span class="p">&gt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getLastLog</span><span class="p">().</span><span class="nx">Index</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">DPrintf</span><span class="p">(</span><span class="s">&#34;{Node %v} rejects replacing log with snapshotIndex %v as current snapshotIndex %v is larger in term %v&#34;</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">me</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">snapshotIndex</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">currentTerm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// remove log entries up to index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="nx">index</span><span class="o">-</span><span class="nx">snapshotIndex</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Command</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">persister</span><span class="p">.</span><span class="nf">SaveStateAndSnapshot</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nf">encodeState</span><span class="p">(),</span> <span class="nx">snapshot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>还有一个<code>CondInstallSnapshot</code>，用来peer判断leader发过来的快照是否满足条件，如果满足，则安装快照。这个需要修改到<code>config.go</code>文件中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rf</span> <span class="o">*</span><span class="nx">Raft</span><span class="p">)</span> <span class="nf">CondInstallSnapshot</span><span class="p">(</span><span class="nx">lastIncludedTerm</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">lastIncludedIndex</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">snapshot</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// outdated snapshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">lastIncludedIndex</span> <span class="o">&lt;=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// need dummy entry at index 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">lastIncludedIndex</span> <span class="p">&gt;</span> <span class="nx">rf</span><span class="p">.</span><span class="nf">getLastLog</span><span class="p">().</span><span class="nx">Index</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">LogEntry</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span> <span class="p">=</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="nx">lastIncludedIndex</span><span class="o">-</span><span class="nx">rf</span><span class="p">.</span><span class="nf">getFirstLog</span><span class="p">().</span><span class="nx">Index</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Command</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Term</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">logs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Index</span> <span class="p">=</span> <span class="nx">lastIncludedTerm</span><span class="p">,</span> <span class="nx">lastIncludedIndex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">commitIndex</span><span class="p">,</span> <span class="nx">rf</span><span class="p">.</span><span class="nx">lastApplied</span> <span class="p">=</span> <span class="nx">lastIncludedIndex</span><span class="p">,</span> <span class="nx">lastIncludedIndex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rf</span><span class="p">.</span><span class="nx">persister</span><span class="p">.</span><span class="nf">SaveStateAndSnapshot</span><span class="p">(</span><span class="nx">rf</span><span class="p">.</span><span class="nf">encodeState</span><span class="p">(),</span> <span class="nx">snapshot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="压测脚本" class="heading-element"><span>3 压测脚本</span>
  <a href="#%e5%8e%8b%e6%b5%8b%e8%84%9a%e6%9c%ac" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>我自己实现了一个压测脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># check the number of arguments</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$#</span><span class="s2">&#34;</span> -ne <span class="m">2</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Usage: </span><span class="nv">$0</span><span class="s2"> &lt;test_type&gt; &lt;iterations&gt;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;test_type must be one of 3A, 3B, 3C, 3D&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">test_type</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl"><span class="nv">iterations</span><span class="o">=</span><span class="nv">$2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># check the test_type</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="s2">&#34;</span><span class="nv">$test_type</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;3A&#34;</span> <span class="o">&amp;&amp;</span> <span class="s2">&#34;</span><span class="nv">$test_type</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;3B&#34;</span> <span class="o">&amp;&amp;</span> <span class="s2">&#34;</span><span class="nv">$test_type</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;3C&#34;</span> <span class="o">&amp;&amp;</span> <span class="s2">&#34;</span><span class="nv">$test_type</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;3D&#34;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Invalid test_type: </span><span class="nv">$test_type</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;test_type must be one of 3A, 3B, 3C, 3D&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># check the iterations is a positive integer</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> ! <span class="o">[[</span> <span class="s2">&#34;</span><span class="nv">$iterations</span><span class="s2">&#34;</span> <span class="o">=</span>~ ^<span class="o">[</span>0-9<span class="o">]</span>+$ <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Invalid iterations: </span><span class="nv">$iterations</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;iterations must be a positive integer&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;go test -run </span><span class="nv">$test_type</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span> i&lt;<span class="o">=</span>iterations<span class="p">;</span> i++<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Running test iteration </span><span class="nv">$i</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">output</span><span class="o">=</span><span class="k">$(</span>go <span class="nb">test</span> -run <span class="nv">$test_type</span> 2&gt;<span class="p">&amp;</span>1<span class="k">)</span> <span class="c1">#&gt;&amp;1 redirects stderr to stdout</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[[</span> <span class="nv">$?</span> -ne <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Error in iteration </span><span class="nv">$i</span><span class="s2">:&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$output</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>
</div>
</div><p>网上也提供了一个<a href="https://gist.github.com/JJGO/0d73540ef7cc2f066cb535156b7cbdab"target="_blank" rel="external nofollow noopener noreferrer">测试脚本<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，功能更为强大。压测结果如下所示：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811175403947.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811175403947.png?size=small" data-sub-html="<h2>image-20240811175403947</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811175403947.png" alt="image-20240811175403947" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811175403947.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811175403947.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811175403947.png?size=large 2x" data-title="image-20240811175403947" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h2 id="优化" class="heading-element"><span>4 优化</span>
  <a href="#%e4%bc%98%e5%8c%96" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ol>
<li>
<p>如果我们使用的空间少于数组的一半，我们就替换该数组。这个数字是相当任意的，选择它是为了平衡内存使用与分配数量，这个数字可能还可以改进。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">shrinkEntries</span><span class="p">(</span><span class="nx">entries</span> <span class="p">[]</span><span class="nx">LogEntry</span><span class="p">)</span> <span class="p">[]</span><span class="nx">LogEntry</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">const</span> <span class="nx">lenMultiple</span> <span class="p">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">cap</span><span class="p">(</span><span class="nx">entries</span><span class="p">)</span> <span class="p">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">entries</span><span class="p">)</span><span class="o">*</span><span class="nx">lenMultiple</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEntries</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">LogEntry</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">entries</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nb">copy</span><span class="p">(</span><span class="nx">newEntries</span><span class="p">,</span> <span class="nx">entries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">newEntries</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">entries</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>因为日志的索引是单调递增的，而term则是非递减的。所以这里应该可以使用二分优化。</p>
</li>
</ol>
]]></description></item><item><title>【论文阅读笔记】ZooKeeper: Wait-free coordination for Internet-scale systems</title><link>https://hezephyr.github.io/posts/08.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0zookeeper-wait-free-coordination-for-internet-scale-systems/</link><pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/08.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0zookeeper-wait-free-coordination-for-internet-scale-systems/</guid><description><![CDATA[<h2 id="摘要" class="heading-element"><span>1 摘要</span>
  <a href="#%e6%91%98%e8%a6%81" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>这篇论文介绍了ZooKeeper，一个用于协调分布式应用进程的服务。<font color="red">ZooKeeper旨在提供一个简单且高性能的内核，用于构建更复杂的客户端协调原语。</font>它整合了组消息传递、共享寄存器和分布式锁服务的元素，形成了一个复制的、集中式的服务。Zookeeper提供了一个接口，具有共享寄存器的无等待特性和类似分布式文件系统缓存失效的事件驱动机制，以提供简单而强大的协调服务。ZooKeeper还保证了每个客户端请求的FIFO执行和所有更改ZooKeeper状态的请求的线性化。</p>
<h2 id="介绍" class="heading-element"><span>2 介绍</span>
  <a href="#%e4%bb%8b%e7%bb%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p><strong>分布式系统中的基本协调机制</strong>：</p>
<ul>
<li><strong>配置</strong>：最基本的形式，可能是静态或动态的操作参数列表。</li>
<li><strong>组成员资格和领导者选举</strong>：进程需要了解其他进程的状态及职责。</li>
<li><strong>锁</strong>：实现对临界区的互斥访问的强大协调原语。</li>
</ul>
<p>一种协调方法是为每种不同的协调需求（如队列服务、领导者选举服务）开发服务。也可以使用更强大的服务来实现其他原语（如Chubby是一种具有强同步保证的锁服务，它可以用于实现领导者选举、组成员资格等）。</p>
<p><strong>ZooKeeper的设计原则</strong>：</p>
<ol>
<li><font color="red">API暴露</font>。使开发人员能够实现自己的原语，而不是在服务器端实现特定原语。</li>
<li><font color="red">无等待数据对象</font>。避免使用阻塞原语（如锁），使系统性能更高、容错性更好。</li>
<li><font color="red">操作顺序保证</font>。实现FIFO客户端排序和可线性化写入。</li>
</ol>
<p>Zookeeper实现了一个API，用于操作<strong>像文件系统那样层次化组织</strong>的简单无等待数据对象。ZooKeeper服务由一组使用复制来实现高可用性和高性能的服务器组成，并且使用流水线架构实现，该架构支持大量未完成请求，保持低延迟。这样的流水线自然地支持了单个客户端按FIFO顺序执行操作。保证FIFO客户端顺序使得客户端可以异步提交操作。通过异步操作，客户端可以同时有多个未完成的操作。</p>
<p>为了保证更新操作满足可线性化，作者实现了一个基于领导者的原子广播协议，称为Zab。<font color="red">然而，Zookeeper应用程序的典型工作负载主要是读操作，因此需要进行读操作优化，即不使用Zab对它们进行全序排序，而是本地处理读操作，利用客户端缓存和监视机制（只缓存不直接管理）提高性能。</font>Chubby直接管理客户端缓存，其使用租约来防止故障客户端无限期地阻塞系统。然而，租约只能限制慢或故障客户端的影响，而ZooKeeper的监视机制则完全避免了这个问题。</p>
<h2 id="zookeeper服务" class="heading-element"><span>3 Zookeeper服务</span>
  <a href="#zookeeper%e6%9c%8d%e5%8a%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>客户端通过ZooKeeper客户端库的API向ZooKeeper服务提交请求，该库不仅提供了服务接口，还负责管理客户端与服务器之间的网络连接。客户端在连接ZooKeeper时建立<strong>会话</strong>，并通过会话句柄发送请求。</p>
<p>相关术语：</p>
<ul>
<li><strong>客户端</strong>：ZooKeeper服务的用户</li>
<li><strong>服务器</strong>：提供ZooKeeper服务的进程</li>
<li><strong>znode</strong>：ZooKeeper数据中的内存数据节点，该数据节点组织在称为<strong>数据树</strong>的分层命名空间中</li>
<li><strong>&ldquo;update&quot;和&quot;write&rdquo;</strong>：来指代任何修改数据树状态的操作。</li>
</ul>
<h3 id="服务概述" class="heading-element"><span>3.1 服务概述</span>
  <a href="#%e6%9c%8d%e5%8a%a1%e6%a6%82%e8%bf%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>ZooKeeper服务为客户端提供了数据节点（znodes）的抽象概念，这些节点在层次命名空间中组织，类似于文件系统（如/A/B/C表示znode C的路径，其中C父节点是B），便于用户理解和组织数据。每个znode都存储数据，除了临时znode外，都可以有子节点。客户端可以创建两种类型znode：</p>
<ul>
<li><strong>常规znode</strong>：客户端显示创建和删除</li>
<li><strong>临时znode</strong>：客户端显示创建和删除，或者在创建它们的会话终止后由系统自动删除。、</li>
</ul>
<p>创建znode时，可以设置顺序标志，使用顺序标志创建的znode在其名称后附加一个单调递增的计数器值，确保节点名称的唯一性。</p>
<p><font color="red">ZooKeeper的监视机制允许客户端在变更发生时接收通知，无需轮询</font>。这种机制是一次性的，与会话关联，触发后或会话关闭时取消。<font color="red">客户端通过监视事件得知数据变化，但不会获得变化的具体内容</font>。</p>
<p>ZooKeeper的数据模型本质是一个简化API的文件系统或具有层次键的键值表，<font color="red">层次化命名空间对于不同应用程序的命名空间分配子树和设置这些子树的访问权限非常有用</font>。znode不是为一般数据存储设计，而是作为客户端应用协调的抽象。</p>
<p>例如，在下图中，有两个子树，一个用于app1（<code>/app1</code>），另一个用于app2（<code>/app2</code>）。app1的子树实现了一个简单的组成员协议：每个客户端进程<code>p_i</code>在<code>/app1</code>下创建一个znode <code>p_i</code>，该znode在进程运行期间持续存在。ZooKeeper允许客户端用znode存储一些可以用于分布式计算的元数据或配置的信息（例如当前领导者信息）。znode还包含时间戳和版本计数器，使客户端能够追踪变更并执行条件更新。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811214958210.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811214958210.png?size=small" data-sub-html="<h2>image-20240811214958210</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811214958210.png" alt="image-20240811214958210" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811214958210.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811214958210.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811214958210.png?size=large 2x" data-title="image-20240811214958210" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>客户端与ZooKeeper的会话具有超时机制，超时未收到信息即认为客户端故障。当客户端显式关闭会话句柄或ZooKeeper检测到客户端故障时，会话结束。<font color="red">会话期间，客户端可以跨服务器透明迁移，保持状态连续性</font>。</p>
<h3 id="客户端api" class="heading-element"><span>3.2 客户端API</span>
  <a href="#%e5%ae%a2%e6%88%b7%e7%ab%afapi" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>以下是ZooKeeper API的相关子集：</p>
<ul>
<li><code>create(path, data, flags)</code>：创建一个具有路径名<code>path</code>的znode，存储<code>data[]</code>，并返回新znode的名称。<code>flags</code>使客户端可以选择znode的类型：常规、临时，并设置顺序标志。</li>
<li><code>delete(path, version)</code>：如果znode的版本与预期版本匹配，则删除路径为<code>path</code>的znode。</li>
<li><code>exists(path, watch)</code>：如果路径为<code>path</code>的znode存在，则返回true，否则返回false。<code>watch</code>标志允许客户端在znode上设置监视。</li>
<li><code>getData(path, watch)</code>：返回与znode关联的数据和元数据（如版本信息）。<code>watch</code>标志的工作方式与<code>exists()</code>相同，只是如果znode不存在，ZooKeeper不会设置监视。</li>
<li><code>setData(path, data, version)</code>：如果znode的版本号是当前版本，则将<code>data[]</code>写入路径为<code>path</code>的znode。</li>
<li><code>getChildren(path, watch)</code>：返回znode的子节点名称集合。</li>
<li><code>sync(path)</code>：等待在操作开始时挂起的所有更新传播到客户端连接的服务器。当前忽略路径。</li>
</ul>
<p>所有方法在API中都有同步和异步版本。当应用程序需要执行单个ZooKeeper操作且没有并发任务时，使用同步API，使其阻塞直到完成。而异步API允许应用程序执行多个ZooKeeper操作和其他任务，ZooKeeper客户端保证按顺序调用每个操作的相应回调。</p>
<blockquote>
<p>ZooKeeper不使用句柄访问znode。每个请求都包括被操作的znode的完整路径。这不仅简化了API（没有<code>open()</code>或<code>close()</code>方法），还消除了服务器需要维护的额外状态。每个更新方法都接受一个预期版本号，如果znode的实际版本号与预期版本号不匹配，更新将失败并返回版本错误。<font color="red">如果版本号为-1，则不进行版本检查。</font></p>
</blockquote>
<h3 id="zookeeper保证" class="heading-element"><span>3.3 Zookeeper保证</span>
  <a href="#zookeeper%e4%bf%9d%e8%af%81" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>ZooKeeper通过两项基本的顺序保证来确保操作的一致性和可预测性：</p>
<ul>
<li><strong>线性化写入</strong>：所有更新ZooKeeper状态的请求都是可序列化的，并且遵循优先级。</li>
<li><strong>FIFO客户端顺序</strong>：来自同一客户端的所有请求按照它们被发送的顺序执行。</li>
</ul>
<p>ZooKeeper的线性化定义扩展了Herlihy的原始定义，称为异步线性化，允许客户端有多个未完成的操作，并保证这些操作的FIFO顺序。</p>
<p>这种顺序保证对于分布式系统中的领导者选举和配置更新至关重要。例如，当新领导者需要更新大量配置参数时，可以利用ZooKeeper的顺序保证来确保配置的一致性和完整性。新领导者通过创建一个<code>ready</code> znode来控制配置的更新，其他进程只有在该znode存在时才会采用新的配置。新领导者通过删除<code>ready</code>、更新各种配置znode和创建<code>ready</code>来进行配置更改。<font color="red">所有这些更改可以流水线处理，并异步发布，以快速更新配置状态</font>。</p>
<p>此外，ZooKeeper的通知机制确保了客户端能够及时接收到变更通知，而sync操作则允许客户端在需要时强制更新读取，以获取最新的系统状态。</p>
<p>ZooKeeper的设计允许它在保持高吞吐量的同时，也保证了系统的<strong>活性和持久性</strong>。只要大多数服务器处于活动状态并能够通信，服务就能保持可用。<font color="red">而且，一旦服务成功响应了更改请求，那么只要法定数量的服务器能够恢复，这些更改能在任何数量的故障中持久化</font>。</p>
<h3 id="原语示例" class="heading-element"><span>3.4 原语示例</span>
  <a href="#%e5%8e%9f%e8%af%ad%e7%a4%ba%e4%be%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>ZooKeeper API提供了实现复杂原语的能力，这些原语完全在客户端实现，服务端并不感知。无论是配置管理、汇合点、组成员关系还是锁机制，ZooKeeper都能通过其API提供支持。ZooKeeper的顺序保证允许高效地推理系统状态，而监视则允许高效地等待。</p>
<ul>
<li>
<p><strong>配置管理</strong>：最简单的形式是将配置存储在一个 znode（$z_c$）中。进程启动时获取 $z_c$ 的完整路径名。启动的进程通过读取 $z_c$ 并将监视标志设置为 true 来获得其配置。如果 $z_c$ 中的配置被更新，进程会收到通知并读取新配置，重新设置监视标志为 true。</p>
<blockquote>
<p>在这种方案中，尽管有很多次变化，但通常进程只会收到一次，这并不会影响进程的行为，因为监视是用来通知进程它已经知道的信息：它所拥有的 $z_c$ 信息是过时的。</p>
</blockquote>
</li>
<li>
<p><strong>汇合点</strong>：在分布式系统中，有时并不总是能事先明确最终的系统配置。可以使用 ZooKeeper 处理这种情况，通过一个称为汇合点的 znode（$z_r$），这是由客户端创建的节点。客户端将 $z_r$ 的完整路径名作为启动参数传递给主进程和工作进程。当主进程启动时，它会将其使用的地址和端口信息填充到 $z_r$ 中。当工作进程启动时，它们会读取 $z_r$ 并将监视设置为 true。如果 $z_r$ 尚未填充，工作进程将等待被通知 $z_r$ 更新。如果 $z_r$ 是一个临时节点，主进程和工作进程可以监视 $z_r$ 的删除，并在客户端结束时进行清理。</p>
</li>
<li>
<p><strong>组成员关系</strong>：我们利用临时节点允许查看创建该节点的会话状态。首先指定一个 znode（$z_g$）来代表组。当组中的一个进程成员启动时，它会在 $z_g$ 下创建一个临时子 znode。如果每个进程都有唯一的名称或标识符，则该名称用于子 znode 的名称；否则，进程将使用 <code>SEQUENTIAL</code> 标志创建 znode 以获得唯一的名称分配。</p>
<p><font color="red">进程可以将进程信息放入子 znode 的数据中，例如进程使用的地址和端口</font>。在 $z_g$ 下创建子 znode 后，进程正常启动，不需要做其他任何事情。如果进程失败或结束，代表它的 znode 在 $z_g$ 下自动移除。进程可以通过列出 $z_g$ 的子节点来获取组信息。如果进程想监视组成员变动，可以将监视标志设置为 true，并在收到变动通知时刷新组信息（始终将监视标志设置为 true）。</p>
</li>
<li>
<p><strong>简单锁</strong>：尽管 ZooKeeper 不是一个锁服务，但它可以用来实现锁，以实现各种通用同步原语。最简单的锁实现使用“锁文件”。锁由一个 znode 表示。</p>
<ul>
<li>要获取锁，客户端尝试创建带有 <code>EPHEMERAL</code> 标志的指定 znode。如果创建成功，客户端持有锁。否则，客户端可以读取 znode 并设置监视标志，以便在当前持有锁的客户端死亡时收到通知。</li>
<li>客户端在死亡或显式删除 znode 时释放锁。等待锁的其他客户端在观察到 znode 被删除后再次尝试获取锁。</li>
</ul>
<p>虽然这种简单的锁协议有效，但它确实存在一些问题。</p>
<ul>
<li><font color="red">它遭受群体效应</font>。如果有许多客户端等待获取锁，当锁被释放时，它们都会争夺锁，尽管只有一个客户端可以获取锁。</li>
<li><font color="red">它只实现了独占锁</font>。</li>
</ul>
<p>以下两个原语展示了如何克服这两个问题。</p>
</li>
<li>
<p><strong>无群体效应的简单锁</strong>：我们定义一个锁 znode（$l$）来实现这样的锁。直观上，我们将所有请求锁的客户端排队，每个客户端按请求到达的顺序获取锁。因此，客户端希望获取锁时执行以下操作：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Lock</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 SEQUENTIAL 标志将客户端获取锁的尝试按与其他所有尝试的顺序排列。n代表Zookeeper自动分配的唯一序列号</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="n">n</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="err">“</span><span class="o">/</span><span class="n">lock</span><span class="o">-</span><span class="err">”</span><span class="p">,</span> <span class="n">EPHEMERAL</span><span class="o">|</span><span class="n">SEQUENTIAL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 获取锁路径下所有子节点的列表。</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="n">C</span> <span class="o">=</span> <span class="n">getChildren</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果当前创建的节点 n 是子节点列表 C 中最小的一个，即没有其他节点有更小的序号，那么这个客户端获得了锁，退出。</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span> <span class="k">if</span> <span class="n">n</span> <span class="ow">is</span> <span class="n">lowest</span> <span class="n">znode</span> <span class="ow">in</span> <span class="n">C</span><span class="p">,</span> <span class="n">exit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 果当前节点 n 不是最小的，找到列表中直接排在 n 前面的节点 p。（即每个都等待前一个，这样避免了群体效应，因为只有一个进程在锁被释放或锁请求被放弃时被唤醒）</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="n">p</span> <span class="o">=</span> <span class="n">znode</span> <span class="ow">in</span> <span class="n">C</span> <span class="n">ordered</span> <span class="n">just</span> <span class="n">before</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 检查节点 p 是否仍然存在。由于节点是临时的，如果持有锁的客户端断开了连接，节点 p 将被自动删除。</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span> <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">true</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">	<span class="c1"># 设置一个监视器，等待节点 p 的状态变化事件</span>
</span></span><span class="line"><span class="cl">	<span class="n">wait</span> <span class="k">for</span> <span class="n">watch</span> <span class="n">event</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果 p 不存在，说明那个客户端已经释放了锁，仍然有一个更低序列号的 znode 正在等待或持有锁，所以当前客户端应该再次检查自己是否是最小的节点。</span>
</span></span><span class="line"><span class="cl"><span class="mi">6</span> <span class="n">goto</span> <span class="mi">2</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Unlock</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="n">delete</span><span class="p">(</span><span class="n">n</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这种锁方案具有以下优点：</p>
<ol>
<li><font color="red">znode 的删除只会唤醒一个客户端</font>，因为每个 znode 只有一个其他客户端在监视，所以我们没有群体效应；</li>
<li>没有轮询或超时；</li>
<li>由于我们实现锁的方式，<font color="red">我们可以通过浏览 ZooKeeper 数据查看锁争用情况、破坏锁和调试锁问题</font>。</li>
</ol>
</li>
<li>
<p><strong>读/写锁</strong>：为了实现读/写锁，我们稍微更改了锁过程，并有单独的读锁和写锁过程。解锁过程与全局锁的情况相同。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Write Lock</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="n">n</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="err">“</span><span class="o">/</span><span class="n">write</span><span class="o">-</span><span class="err">”</span><span class="p">,</span> <span class="n">EPHEMERAL</span><span class="o">|</span><span class="n">SEQUENTIAL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="n">C</span> <span class="o">=</span> <span class="n">getChildren</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span> <span class="k">if</span> <span class="n">n</span> <span class="ow">is</span> <span class="n">lowest</span> <span class="n">znode</span> <span class="ow">in</span> <span class="n">C</span><span class="p">,</span> <span class="n">exit</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="n">p</span> <span class="o">=</span> <span class="n">znode</span> <span class="ow">in</span> <span class="n">C</span> <span class="n">ordered</span> <span class="n">just</span> <span class="n">before</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span> <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">true</span><span class="p">)</span> <span class="n">wait</span> <span class="k">for</span> <span class="n">event</span>
</span></span><span class="line"><span class="cl"><span class="mi">6</span> <span class="n">goto</span> <span class="mi">2</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Read Lock</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="n">n</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="n">l</span> <span class="o">+</span> <span class="err">“</span><span class="o">/</span><span class="n">read</span><span class="o">-</span><span class="err">”</span><span class="p">,</span> <span class="n">EPHEMERAL</span><span class="o">|</span><span class="n">SEQUENTIAL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="n">C</span> <span class="o">=</span> <span class="n">getChildren</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span> <span class="k">if</span> <span class="n">no</span> <span class="n">write</span> <span class="n">znodes</span> <span class="n">lower</span> <span class="n">than</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">C</span><span class="p">,</span> <span class="n">exit</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="n">p</span> <span class="o">=</span> <span class="n">write</span> <span class="n">znode</span> <span class="ow">in</span> <span class="n">C</span> <span class="n">ordered</span> <span class="n">just</span> <span class="n">before</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span> <span class="k">if</span> <span class="n">exists</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">true</span><span class="p">)</span> <span class="n">wait</span> <span class="k">for</span> <span class="n">event</span>
</span></span><span class="line"><span class="cl"><span class="mi">6</span> <span class="n">goto</span> <span class="mi">3</span></span></span></code></pre></td></tr></table>
</div>
</div><p>此锁过程与之前的锁略有不同。写锁仅在命名上有所不同。读锁第 3 行和第 4 行有所不同，因为只有较早的写锁 znode 会阻止客户端获取读锁。看起来当有多个客户端等待读锁时，会出现“群体效应”，并在较低序列号的“write-” znode 被删除时收到通知；实际上，这正是我们所期望的行为。<font color="red">一旦写锁被释放，所有等待读锁的客户端都应该被唤醒，因为它们现在有可能共同持有读锁</font>。这是因为读锁是可以共享的，一旦没有任何写锁存在，所有的读锁请求都可以被满足，所有等待读锁的客户端都能继续它们的操作，无需再等待。这种机制确保了读操作的高并发性，同时保证了写操作的独占性，从而维护了数据的一致性和完整性。</p>
</li>
<li>
<p><strong>双重屏障</strong>：双重屏障机制为客户端提供了一种优雅的方式来同步计算阶段的启动与终止，确保所有参与方在统一的信号下协同行动。当加入屏障的进程数量超过屏障阈值时，标志着计算活动的开启；而随着各进程完成任务并相继退出，屏障亦随之解除。在这一机制中，屏障自身以ZooKeeper中的 znode 表示，我们将其命名为 $b$。</p>
<p>每当进程 $p$ 欲进入屏障，它首先通过在 $b$ 下创建一个子 znode 来进行注册，表明自身已加入计算预备队列；而当进程准备撤离屏障，即宣告任务完成之时，它将移除先前创建的子 znode，以此来注销。<font color="red">屏障的激活与释放，分别对应于 $b$ 下子节点数目越过阈值及全部子节点被清除这两个条件</font>。</p>
<p>为了确保进程高效等待进入与退出条件的达成，Zookeeper巧妙地运用了监视器。在进程寻求进入屏障时，它会设置监视器以监听 $b$ 的某个子 znode 的存在状态——这个子 znode 是由导致子节点数量首次超越屏障阈值的那个进程创建的。如此一来，进程得以实时知晓屏障开启的瞬间。相反，在进程意欲退出屏障之际，它将监视某个特定的子 znode 的消失，只有当这个标记着屏障即将解除的子 znode 被移除后，进程才检查是否满足退出条件，进而安全有序地脱离屏障环境。</p>
</li>
</ul>
<h2 id="zookeeper应用" class="heading-element"><span>4 ZooKeeper应用</span>
  <a href="#zookeeper%e5%ba%94%e7%94%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>ZooKeeper作为一种强大的协调服务，在多种应用程序中发挥着关键作用。</p>
<ul>
<li>Yahoo!的抓取服务（FS）利用ZooKeeper来<strong>管理配置元数据</strong>、<strong>进行领导者选举</strong>，并从主进程故障中恢复，确保服务的高可用性。此外，ZooKeeper的监视机制允许FS在不直接与服务器通信的情况下，通过读取ZooKeeper中的状态信息来向健康的服务器发送请求。</li>
<li>Katta作为一个非Yahoo!的分布式索引器，使用ZooKeeper进行协调，通过分片来分配索引工作。Katta使用ZooKeeper来跟踪主从服务器的状态（<strong>组成员关系</strong>），并处理主服务器的故障转移（<strong>领导者选举</strong>）。Katta还使用ZooKeeper来跟踪和管理分片分配给从服务器的分配（<strong>配置管理</strong>）。</li>
<li>Yahoo!消息代理（YMB）是一个分布式发布-订阅系统。该系统管理数千个主题，客户端可以发布消息并接收消息。为了提供可扩展性，主题分布在一组服务器中。每个主题都使用主-备方案进行复制，确保消息被复制到两台机器上，以确保可靠地消息传递。构成YMB的服务器使用无共享分布式架构，这使得协调对于正确操作至关重要。<font color="red">YMB使用ZooKeeper来管理主题的分配（配置元数据），处理系统中机器的故障（故障检测和组成员关系），以及控制系统操作</font>。YMB的znode数据布局显示了如何通过ZooKeeper实现对活跃服务器的负载和状态信息的监控，以及如何通过集中控制实现对服务的管理和协调。</li>
</ul>
<h2 id="zookeeper实现" class="heading-element"><span>5 Zookeeper实现</span>
  <a href="#zookeeper%e5%ae%9e%e7%8e%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>ZooKeeper通过在构成其服务的每台服务器上进行数据复制来保障高可用性。这一设计考虑到了服务器可能发生的故障，同时假设故障服务器在后期能够恢复。为了维持服务的连续性和一致性，ZooKeeper采用了所下图所展示的一系列关键组件，确保了即使在单个服务器故障的情况下，整体服务仍能继续运行。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811220635787.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811220635787.png?size=small" data-sub-html="<h2>image-20240811220635787</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811220635787.png" alt="image-20240811220635787" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811220635787.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811220635787.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240811220635787.png?size=large 2x" data-title="image-20240811220635787" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>当ZooKeeper服务器接收到请求时，首先通过请求处理器进行预处理。如果请求涉及服务器间的协作（如写操作），则会启动一个基于原子广播协议的共识机制。这种机制确保所有服务器最终将请求导致的变更同步至完全复制的数据库中，从而维护数据的一致性。对于只读请求，则可以直接从服务器本地的数据库副本中获取数据并形成响应，无需触发复杂的共识过程，这大大提升了读取操作的效率。</p>
<p>数据库是内存中的，包含整个数据树，每个znode默认存储最大1MB的数据，但此值可配置。为了确保可恢复性，更新高效地记录到磁盘，且在应用于内存数据库前，强制写入磁盘。<font color="red">如同Chubby，我们维护一个重播日志，即写前日志，记录已提交的操作，并定期生成内存数据库的快照</font>。</p>
<p>每个ZooKeeper服务器服务于客户端，客户端连接至某一台服务器提交请求。读请求从各服务器本地数据库的副本中服务，而写请求则通过共识协议处理。作为共识协议的一部分，写请求被转发至被称为领导者的单一服务器。其余服务器，即跟随者，接收来自领导者的状态变更提议，并对状态变更达成一致。</p>
<h3 id="请求处理" class="heading-element"><span>5.1 请求处理</span>
  <a href="#%e8%af%b7%e6%b1%82%e5%a4%84%e7%90%86" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>由于消息层的原子性，Zookeeper保证本地副本不会分歧，尽管任一时刻某些服务器可能应用了更多事务。不同于客户端发出的请求，事务是幂等的。当领导者接收到写请求时，它计算出写操作应用后的系统状态，并转换为捕捉新状态的事务。必须计算未来状态，因为可能有尚未应用到数据库的待处理事务。例如，客户端执行条件<code>setData</code>操作，如果请求中的版本号与待更新znode的未来版本号匹配，服务生成包含新数据、新版本号和更新时间戳的<code>setDataTXN</code>。若出现错误，如版本号不匹配或待更新的znode不存在，将生成<code>errorTXN</code>。</p>
<h3 id="原子广播" class="heading-element"><span>5.2 原子广播</span>
  <a href="#%e5%8e%9f%e5%ad%90%e5%b9%bf%e6%92%ad" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>所有更新ZooKeeper状态的请求均转发至领导者。领导者执行请求并通过Zab，一种原子广播协议，广播状态变更。接收客户端请求的服务器在交付相应状态变更时响应客户端。<font color="red">Zab默认使用简单多数票机制决定提案，因此Zab和ZooKeeper仅在多数服务器正常（即在$2f+1$服务器中可容忍$f$次故障）时工作</font>。</p>
<p>为了实现高吞吐量，ZooKeeper尽力保持请求处理管道满载，可能有成千上万的请求处于管道的不同部分。由于状态变更依赖于先前状态变更的应用，Zab提供了比常规原子广播更强的顺序保证：</p>
<ul>
<li>由领导者广播的变更按照发送顺序交付</li>
<li>所有来自之前领导者的变更在新领导者广播自身变更前交付。</li>
</ul>
<p><font color="red">使用TCP作为传输层简化了实施，因为消息顺序由网络维护</font>。Zab选出的领导者同时也是ZooKeeper的领导者，创建事务的同时也提议事务。使用日志作为内存数据库的写前日志，避免了两次写磁盘。Zab在常规操作中确实按顺序和恰好一次交付所有消息，但由于Zab未持久记录每个已交付消息的ID，因此在恢复过程中可能重传消息。由于使用了幂等事务，只要按顺序交付，多次交付是可以接受的。</p>
<h3 id="复制数据库" class="heading-element"><span>5.3 复制数据库</span>
  <a href="#%e5%a4%8d%e5%88%b6%e6%95%b0%e6%8d%ae%e5%ba%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>每个副本在内存中保存一份ZooKeeper状态的拷贝。当服务器从崩溃中恢复，需要恢复此内部状态。重放所有已交付的消息以恢复状态可能耗时过长，故ZooKeeper使用周期性快照，仅要求重传自快照开始以来的消息。<font color="red">我们称ZooKeeper快照为模糊快照，因为不锁定ZooKeeper状态来生成快照；相反，进行深搜，原子读取每个znode的数据和元数据，写入磁盘</font>。但是，由于快照的生成并非瞬时完成，这意味着在快照生成的过程中，新的状态变更可能会发生。因此，最终的快照可能包含了部分已提交但未被快照捕获的状态变更，导致快照中的数据并不完全反映某个时间点的系统状态。<font color="red">然而，由于状态变更是幂等的，我们可以按顺序重复应用它们。</font></p>
<p>例如，假设ZooKeeper数据树中两个节点<code>/foo</code>和<code>/goo</code>分别具有值<code>f1</code>和<code>g1</code>，且版本均为$1$，当模糊快照开始时，以下状态变更流<code>&lt;transactionType, path, value, new-version&gt;</code>到达：</p>
<ul>
<li><code>&lt;SetDataTXN, /foo, f2, 2&gt;</code></li>
<li><code>&lt;SetDataTXN, /goo, g2, 2&gt;</code></li>
<li><code>&lt;SetDataTXN, /foo, f3, 3&gt;</code></li>
</ul>
<p>处理这些状态变更后，<code>/foo</code>和<code>/goo</code>的值分别为<code>f3</code>和<code>g2</code>，版本为$3$和$2$。然而，模糊快照可能记录了<code>/foo</code>和<code>/goo</code>的值为<code>f3</code>和<code>g1</code>，版本为$3$和$1$，即第一个变更和第三个变更被快照捕获，但第二个变更之前快照生成完成，这不是ZooKeeper数据树的有效状态。</p>
<p><font color="red">当服务器崩溃并重新启动时，它会从最近的快照恢复，然后重放自该快照之后的所有事务日志。由于事务是幂等的，即使快照中的状态与实际的某时刻状态不完全一致，重放事务日志也能确保服务器恢复到最后一致的状态</font>。</p>
<h3 id="客户端-服务器交互" class="heading-element"><span>5.4 客户端-服务器交互</span>
  <a href="#%e5%ae%a2%e6%88%b7%e7%ab%af-%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%ba%a4%e4%ba%92" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>ZooKeeper通过客户端-服务器交互实现高效的分布式协调。服务器在处理写请求时，会发送并清除相关监视通知，保证通知的顺序性。服务器顺序处理写请求，而读请求则在本地服务器上独立处理，每个读请求都会标记一个zxid，代表服务器已看到的最后事务，从而确保读写请求的部分顺序性。</p>
<p>本地处理读请求带来了出色的读取性能，因为它仅仅是本地服务器上的内存操作，无需磁盘活动或运行协议。然而，这种快速读取可能不保证读操作的顺序性，可能会返回过时的数据。为了解决这个问题，<font color="red">ZooKeeper提供了同步操作<code>sync()</code>，通过领导者异步执行并排序，客户端只需读取后立即调用<code>sync()</code>，确保读操作能够返回最新（<code>sync</code>之前所有的变更）的数据</font>。</p>
<p>ZooKeeper服务器使用FIFO顺序处理客户端请求，并在响应中包含相关的zxid，确保客户端即使在服务器间切换时也能看到最新的数据（需要检查zxid）。此外，<font color="red">ZooKeeper使用超时机制来检测客户端会话故障，客户端通过发送心跳消息（包含最后一个zxid）来维持会话，如果无法与当前服务器通信，会自动切换到其他服务器</font>。</p>
<h2 id="评估" class="heading-element"><span>6 评估</span>
  <a href="#%e8%af%84%e4%bc%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>ZooKeeper展现出了卓越的性能，其<strong>高吞吐量和低请求延迟</strong>在多个基准测试中得到了证明。在模仿Chubby基准的测试中，即使处理的数据量增加，ZooKeeper的吞吐量也达到了Chubby的三倍以上。具体来说，单个工作进程在三个服务器上的平均请求延迟仅为1.2毫秒，在九个服务器上为1.4毫秒。</p>
<p>在屏障性能测试中，ZooKeeper处理屏障操作的能力随着屏障数量和客户端数量的增加而线性增长，显示出对并发访问的高效管理，并没有出现意外的延迟。即使在高比例的读操作下（80%），ZooKeeper的屏障操作吞吐量也保持在每秒1,950到3,100次之间，远高于实际应用中所需的性能。</p>
]]></description></item><item><title>好用的工具</title><link>https://hezephyr.github.io/posts/03.%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/03.%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/</guid><description><![CDATA[<h2 id="tunnelmole" class="heading-element"><span>1 tunnelmole</span>
  <a href="#tunnelmole" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p><a href="https://tunnelmole.com/docs/"target="_blank" rel="external nofollow noopener noreferrer">source<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>
Tunnelmole 是一个简单的工具，可以为本地运行的 HTTP(s) 服务器提供公共 URL。例如，您可以获得一个公共 URL：</p>
<ul>
<li>网络服务器</li>
<li>Docker容器</li>
<li>API</li>
<li>静态网站</li>
<li>etc..</li>
</ul>
<p>安装方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl -O https://install.tunnelmole.com/n3d5g/install <span class="o">&amp;&amp;</span> sudo bash install</span></span></code></pre></td></tr></table>
</div>
</div><p>使用方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tmole &lt;your_server_port&gt;</span></span></code></pre></td></tr></table>
</div>
</div><p>例如：
<a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240802191925244.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240802191925244.png?size=small" data-sub-html="<h2>image-20240802191925244</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240802191925244.png" alt="image-20240802191925244" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240802191925244.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240802191925244.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240802191925244.png?size=large 2x" data-title="image-20240802191925244" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
]]></description></item><item><title>【MIT 6.5840(6.824)学习笔记】Raft</title><link>https://hezephyr.github.io/posts/07.raft/</link><pubDate>Thu, 25 Jul 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/07.raft/</guid><description><![CDATA[<h2 id="脑裂" class="heading-element"><span>1 脑裂</span>
  <a href="#%e8%84%91%e8%a3%82" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>许多容错系统使用一个单主节点来决定主副本。</p>
<ul>
<li><strong>MapReduce</strong>：由单主节点控制计算复制。</li>
<li><strong>GFS</strong>：主备复制数据，并由单主节点确定主拷贝的位置。</li>
<li><strong>VMware FT</strong>：主虚机和备份虚机之间复制指令，需要单点的Test-and-Set服务确认主虚机。</li>
</ul>
<p>这三个例子都是一个多副本系统，<font color="red">系统容错的关键点转移到这个主节点上</font>。</p>
<p>使用单主节点，我们则需要避免<strong>脑裂（Split-Brain）问题</strong>。脑裂指的是在多副本系统中，因网络分裂导致多个副本都认为自己是主副本，从而出现数据不一致或功能冲突的问题。</p>
<p>这里有两种<strong>解决方案</strong></p>
<ol>
<li>构建高可靠网络：如果网络完全不出现故障，客户端无法访问的服务器即被认为是关机，这样可以排除脑裂的可能。<font color="red">但需要大量资金和控制物理环境</font>。</li>
<li>人工解决问题：客户端默认等待两个服务器的响应。如果只收到一个响应，需人工检查两个服务器的状态。<font color="red">人工检查虽然能解决问题，但可能不够及时</font>。</li>
</ol>
<h2 id="过半票决" class="heading-element"><span>2 过半票决</span>
  <a href="#%e8%bf%87%e5%8d%8a%e7%a5%a8%e5%86%b3" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>在构建能自动恢复，同时又避免脑裂的多副本系统时，关键点在于<strong>过半票决（Majority Vote）</strong>，这是Raft论文中提出的一个基本概念，<font color="red">即在一个多副本系统中，任何操作必须得到超过一半的服务器同意才能完成</font>。为了有效使用过半票决，服务器数量应该是奇数。这样在出现网络分区时，一个分区无法拥有超过半数的服务器，从而避免脑裂。对于过半票决，可以用下面这个通用方程来描述：</p>
<p>如果系统有$2\times F+1$个服务器，那么系统最多可以接受$F$个服务器出现故障。</p>
<p>Raft协议依赖过半票决来进行Leader选举和日志提交。每个操作需要过半的服务器批准。任何两个操作的过半服务器至少有一个重叠。</p>
<ul>
<li><strong>Leader选举</strong>：新选出的Leader必然获得过半服务器的选票，而这些服务器与旧Leader的服务器有重叠，因此知道旧Leader的任期号。</li>
<li><strong>日志一致性</strong>：新Leader的过半服务器包含了旧Leader的操作，确保日志一致性。</li>
</ul>
<h2 id="raft概述" class="heading-element"><span>3 Raft概述</span>
  <a href="#raft%e6%a6%82%e8%bf%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Raft协议作为库（Library）存在于服务中，每个Raft副本包含应用程序代码和Raft库。<font color="red">应用程序代码处理RPC或其他客户端请求，Raft库负责同步多副本之间的操作</font>。</p>
<p><strong>操作流程</strong>如下：</p>
<ol>
<li>
<p><strong>客户端请求</strong>：客户端发送请求（如Put或Get）到Raft集群的Leader节点。</p>
</li>
<li>
<p><strong>请求处理</strong>：</p>
<ul>
<li><strong>Raft层</strong>：Leader节点将请求操作传递给Raft层，要求将操作写入日志。Raft节点之间的交互确保操作被过半节点复制。当Leader节点确认过半副本都有操作的拷贝后，通知应用程序层执行操作。</li>
</ul>
<ul>
<li><strong>应用程序层</strong>：仅在收到Raft层的确认后才执行操作（更新数据库或读取值）。</li>
</ul>
</li>
<li>
<p><strong>操作提交</strong>：</p>
<ul>
<li><strong>Raft层</strong>：通知应用程序层，操作已在过半副本中复制完成，可以执行。</li>
<li><strong>应用程序层</strong>：执行操作并最终返回结果给客户端。</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>为何不需要拷贝到所有节点？</strong></p>
<p>为了容错，系统只需过半的副本即可完成操作，这样即使部分服务器故障，系统仍能继续工作。</p>
<p><strong>除了Leader节点，其他节点的应用程序层会有什么样的动作？</strong></p>
<p>在操作在Leader节点提交后，其他副本的Raft层将操作传递给本地应用程序层，确保所有副本的操作序列一致，状态最终保持一致。</p>
</blockquote>
<h2 id="日志" class="heading-element"><span>4 日志</span>
  <a href="#%e6%97%a5%e5%bf%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>如下图所示，展示了Raft协议在处理客户端请求时的消息交互流程，AE代表<code>AppendEntries</code> RPC。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240724224709014.png?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240724224709014.png?size=small" data-sub-html="<h2>image-20240724224709014</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240724224709014.png" alt="image-20240724224709014" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240724224709014.png?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240724224709014.png?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240724224709014.png?size=large 2x" data-title="image-20240724224709014" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<ol>
<li><strong>客户端请求</strong>：客户端发送一个Put请求到当前Raft集群的Leader节点（S1）。</li>
<li><strong>Leader节点处理</strong>：S1的Raft层发送AppendEntries RPC到其他两个副本节点（S2、S3）。S1等待至少一个Follower节点（S2或S3）的响应以达到过半节点的响应。</li>
<li><strong>Follower节点响应</strong>：S2、S3接收AppendEntries RPC并返回响应给Leader（S1）。S1只需等待一个Follower节点的正确响应即可。</li>
<li><strong>操作提交</strong>：一旦S1收到过半节点的正确响应（包括自己），S1执行客户端请求并返回结果给客户端。</li>
<li><strong>通知其他副本</strong>：S2、S3在收到AppendEntries后不确定请求是否被Leader提交。Leader需要在下一次AppendEntries或心跳消息中通知其他副本请求已被commit。其他副本收到此消息后，更新本地状态，执行已提交的请求。</li>
</ol>
<p>Raft系统对Log的关注有几个关键原因：</p>
<ol>
<li><strong>操作排序</strong>：所有副本不仅要执行相同的操作，还要以相同的顺序执行这些操作。Log由编号的槽位（类似一个数组）组成，槽位的数字表示了Leader选择的顺序。</li>
<li><strong>临时存储</strong>：Follower收到操作但还未执行时，需要将操作存放在某处，直到收到Leader发送的commit号。Log就是这个临时存储的地方。Follower在操作commit前不确定这些操作是否会被执行，有时这些操作可能会被丢弃。</li>
<li><strong>重传机制</strong>：Leader记录操作在其Log中，因为这些操作可能需要重传给Follower。如果Follower短时间离线或丢失了一些消息，Leader需要能够向Follower重传丢失的Log消息。即使是已commit的请求，为了向丢失相应操作的副本重传，Leader也需要在Log中存储这些操作。</li>
<li><strong>状态恢复</strong>：Log帮助重启的服务器恢复状态。故障重启后的服务器使用存储在磁盘中的Log，从头执行其中的操作，重建故障前的状态并继续运行。每个Raft节点都需要将Log写入磁盘，确保故障重启后Log能保留，帮助服务器恢复状态。</li>
</ol>
<h2 id="应用层接口" class="heading-element"><span>5 应用层接口</span>
  <a href="#%e5%ba%94%e7%94%a8%e5%b1%82%e6%8e%a5%e5%8f%a3" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>在Raft集群中，每一个副本上，应用层（如key-value数据库）和Raft层之间主要有两个接口。这两个接口分别用于转发客户端请求给Raft层，以及Raft层通知应用层请求已被commit。</p>
<p>第一个接口是key-value层用来转发客户端请求的接口—Start函数。当客户端发送请求给key-value层时，key-value层会将请求转发给Raft层，并告诉Raft层将请求存放在Log中。Start函数只接收一个参数，即客户端请求。Start函数的返回值包括：</p>
<ul>
<li>请求在Log中的位置（index）</li>
<li>当前的任期号（term number）</li>
<li>其他信息</li>
</ul>
<p>第二个接口是<code>applyCh</code> channel，<font color="red">以Go <code>channel</code>中的一条消息形式存在</font>。Raft层会通过发送ApplyMsg消息给applyCh来通知key-value层哪些请求已经commit，key-value层读取这些消息。ApplyMsg包含：</p>
<ul>
<li>请求（command）</li>
<li>对应的Log位置（index）</li>
</ul>
<p>所有的副本都会收到ApplyMsg消息，知道应该执行请求并应用在本地状态中。Leader需要知道ApplyMsg中的请求对应哪个客户端请求，以便响应客户端请求。</p>
<h2 id="leader-选举" class="heading-element"><span>6 Leader 选举</span>
  <a href="#leader-%e9%80%89%e4%b8%be" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>引入Leader的原因：</p>
<ul>
<li>
<p>有Leader系统效率更高，因为请求只需一轮消息即可获得过半认可。</p>
</li>
<li>
<p>无Leader系统需要一轮消息确认临时Leader，再一轮确认请求，效率较低。</p>
</li>
</ul>
<p>Raft使用任期号（term number）区分不同的Leader。每个任期最多有一个Leader。Followers只需知道当前的任期号。</p>
<p>Leader选举过程如下：</p>
<ol>
<li>如果Follower在选举定时器时间内未收到Leader消息，会认为Leader下线，开始选举。</li>
<li>当前节点增加任期号，发起选举。</li>
<li>节点发送<code>RequestVote</code> RPC给其他节点，自己投票给自己。</li>
<li>节点需要获得过半服务器的认可投票才能成为Leader。</li>
</ol>
<p>任期内每个节点只投一次票，就不可能有两个候选人同时获得过半的选票，确保每个任期最多一个Leader。成功当选后，Leader立即发送<code>AppendEntries</code>消息（心跳）通知其他节点自己当选。</p>
<p>如果Leader在网络分区中少数服务器内，无法获得过半认可，不能commit请求。旧Leader在小分区内运行，但不能执行客户端请求，只能发送心跳。</p>
<blockquote>
<p><strong>有没有可能出现极端的情况，导致单向的网络出现故障，进而使得Raft系统不能工作？</strong></p>
<p>如果当前Leader的网络单边出现故障，Leader可以发出心跳，但是又不能收到任何客户端请求。它发出的心跳被送达了，因为它的出方向网络是正常的，那么它的心跳会抑制其他服务器开始一次新的选举。但是它的入方向网络是故障的，这会阻止它接收或者执行任何客户端请求。这个场景是Raft并没有考虑的众多极端的网络故障场景之一。</p>
<p>可以通过一个双向的心跳机制来解决。即Leader发送心跳，Follower要响应这个心跳，如果Leader没有收到响应，则会决定卸任。</p>
</blockquote>
<p>所有Raft节点收到任何一条AppendEntries消息都会重置其选举定时器。只要Leader以合理的速率发送心跳或其他AppendEntries消息，Followers就会重置选举定时器，阻止其他节点成为候选人。在没有网络故障或丢包的情况下，<font color="red">连续的心跳消息会防止新的选举发生</font>。</p>
<p>如果出现<strong>服务器故障或网络问题</strong>或者<strong>分割选票（多个候选人几乎同时竞选，选票分散）</strong>，可能导致无法凑齐过半服务器，无法选出Leader，这次选举就失败了。</p>
<p>Raft不能完全避免分割选票问题，但可以大大降低发生概率。通过随机选择选举定时器的超时时间，减少同步超时的概率。</p>
<p><strong>超时时间设置</strong>：</p>
<ul>
<li><strong>下限</strong>：至少大于Leader的心跳间隔，多次心跳间隔更好（例如3次心跳间隔）。</li>
<li><strong>上限</strong>：远小于服务器两次故障之间的平均时间。</li>
<li><strong>时间差</strong>：足够大以确保第一个超时节点能够完成一轮选举，至少需要大于发送一条RPC的往返时间。</li>
</ul>
<blockquote>
<center>lab tip
</center>
<p><font color="red">每一次一个节点重置自己的选举定时器时，都需要重新选择一个随机的超时时间。</font>避免服务器会以极小的概率选择相同的随机超时时间，那么会永远处于分割选票的场景中</p>
</blockquote>
<h2 id="日志恢复" class="heading-element"><span>7 日志恢复</span>
  <a href="#%e6%97%a5%e5%bf%97%e6%81%a2%e5%a4%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p><strong>Leader正常运行时</strong>，Follower必须同意并接收Leader的日志。但<strong>Leader故障后</strong>，新Leader需要整理各副本可能不一致的日志。</p>
<p>新Leader会发送包含<code>prevLogIndex</code>和<code>prevLogTerm</code>的AppendEntries RPC。</p>
<p>Follower检查本地日志是否匹配：</p>
<ul>
<li><strong>不匹配</strong>：拒绝AppendEntries，Leader减少nextIndex并重试。</li>
<li><strong>匹配</strong>：接受AppendEntries，更新本地日志。</li>
</ul>
<blockquote>
<p><strong>为什么Raft系统可以安全的删除不一致的日志？</strong></p>
<p>如果日志条目未存在于过半服务器中，旧Leader不可能commit该条目，也就不可能将它应用到应用程序的状态中，安全删除无影响。<font color="red">并且如果客户端未收到回复，将重发请求，确保请求最终被处理</font>。</p>
<p><strong>为什么总是删除Followers的Log的结尾部分？</strong></p>
<p>Leader具有完整的Log记录，可以在任何需要的时候填充Followers的日志。如果系统刚启动，或发生反常情况，Leader能够从第一条记录开始恢复Followers的日志，因为它有所有必要的信息。</p>
</blockquote>
<h2 id="选举约束" class="heading-element"><span>8 选举约束</span>
  <a href="#%e9%80%89%e4%b8%be%e7%ba%a6%e6%9d%9f" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>为了保证系统的正确性，并非任意节点都可以成为Leader。不是说第一个选举定时器超时了并触发选举的节点，就一定是Leader。Raft对于谁可以成为Leader，存在一些限制。限制条件如下：</p>
<ul>
<li>候选人最后一条Log条目的任期号<strong>大于</strong>本地最后一条Log条目的任期号；</li>
<li>或者，候选人最后一条Log条目的任期号<strong>等于</strong>本地最后一条Log条目的任期号，且候选人的Log记录长度<strong>大于等于</strong>本地Log记录长度。</li>
</ul>
<p>所以Raft更倾向于选择拥有更高任期号记录的候选人，确保系统一致性。</p>
<h2 id="快速恢复" class="heading-element"><span>9 快速恢复</span>
  <a href="#%e5%bf%ab%e9%80%9f%e6%81%a2%e5%a4%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>基于上述介绍，Leader<strong>现行机制</strong>是每次回退一条Log条目来解决日志冲突。如果Follower长时间关机，错过大量AppendEntries消息。Leader重启后需逐条RPC回退Log条目，耗时较长。</p>
<p>Raft论文中提供了一个快速恢复方法。<font color="red">Follower返回足够信息给Leader，使Leader能按任期（Term）为单位回退，而非逐条回退</font>。Follower拒绝AppendEntries消息时，返回以下3个信息：</p>
<ul>
<li><strong>XTerm</strong>：Follower中与Leader冲突的Log条目的任期号。</li>
<li><strong>XIndex</strong>：Follower中，任期号为XTerm的第一条Log条目的槽位号。</li>
<li><strong>XLen</strong>：Follower中空白Log槽位数。</li>
</ul>
<blockquote>
<p>可以使用二分查找等更高效的方法进一步加速。</p>
</blockquote>
<h2 id="持久化" class="heading-element"><span>10 持久化</span>
  <a href="#%e6%8c%81%e4%b9%85%e5%8c%96" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>在Raft协议中，持久化存储（persistence）和非持久化存储（volatile）的区别在于服务器重启时的状态保持。持久化存储确保服务器重启后能够恢复到之前的状态，从而保证服务的连续性和数据的一致性。持久化存储通常使用磁盘或电池供电的RAM来保存数据。</p>
<p>根据Raft论文图2，以下三个数据需要持久化存储：</p>
<ul>
<li><strong>Log</strong>：保存所有的日志条目，是唯一记录应用程序状态的地方。</li>
<li><strong>currentTerm</strong>：当前的任期号，用于确保每个任期只有一个Leader。</li>
<li><strong>votedFor</strong>：记录当前任期投票给了哪个服务器，用于确保每个任期内只有一个Leader被选举出来。</li>
</ul>
<p>每当Log、currentTerm或votedFor发生变化时，服务器必须将这些数据写入磁盘以确保其持久化。这可以通过调用系统的<code>write</code>和<code>fsync</code>函数来实现，其中<code>fsync</code>确保数据在磁盘上安全存储。</p>
<p>为了提高性能，可以采用批量操作的方法。例如，当Leader接收到多个客户端请求时，可以累积这些请求，然后一次性持久化存储多个Log条目，减少持久化存储的次数。</p>
<h2 id="日志快照" class="heading-element"><span>11 日志快照</span>
  <a href="#%e6%97%a5%e5%bf%97%e5%bf%ab%e7%85%a7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>在Raft一致性算法中，日志条目（Log entries）会随着系统运行时间的延长而不断增加。这会带来两个问题：</p>
<ol>
<li><strong>存储空间</strong>：日志条目数量过多，会占用大量的内存和磁盘空间。</li>
<li><strong>系统重启</strong>：如果服务器重启，需要重放所有日志条目来恢复状态，耗时较长。</li>
</ol>
<p>为了应对上述问题，Raft引入了快照机制。快照是对应用程序状态的压缩表示。通过创建快照，可以丢弃部分已应用的日志条目，减少存储空间，并加快重启时的恢复过程。</p>
<p>Raft会将应用程序创建的快照存储在磁盘上，确保数据的持久性。服务器重启时，Raft会从磁盘读取最近的快照，并将其传递给应用程序，恢复到快照对应的状态。然后，从快照之后的日志条目开始继续恢复。</p>
<p>如果某个Follower的日志比Leader的短，且短于Leader快照的起始位置，那么Leader无法通过发送日志条目来同步Follower的日志。Raft引入了<code>InstallSnapshot</code> RPC。当Follower的日志长度不够时，Leader会发送快照给Follower，然后继续通过<code>AppendEntries</code> RPC发送后续的日志条目。</p>
<p>快照的生成和恢复需要应用程序与Raft组件之间的紧密协同。应用程序负责生成和吸纳快照，Raft负责管理快照和日志条目的持久化存储。Leader可能并发发送多个RPC消息，包括<code>AppendEntries</code>和<code>InstallSnapshot</code>，需要处理可能的乱序和冗余消息。</p>
<blockquote>
<p><strong>快照生成是否依赖应用程序</strong></p>
<p>是的，快照生成函数是应用程序的一部分，应用程序负责生成和恢复快照。只有应用程序自己才知道自己的状态（进而能生成快照）。而通过快照反向生成应用程序状态的函数，同样也是依赖应用程序的。</p>
</blockquote>
<h2 id="课程qa" class="heading-element"><span>12 课程QA</span>
  <a href="#%e8%af%be%e7%a8%8bqa" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<ol>
<li><strong>Raft 通常用于什么？是否用于实际软件中？</strong></li>
</ol>
<p>Raft（以及 Paxos）主要用于构建容错的“配置服务”，跟踪在大型部署中的服务器职责分配。这种服务对复制部署尤为重要，可以避免脑裂问题。Raft 还被一些数据库（如 Spanner、CockroachDB）用于数据复制。</p>
<p>有多个实际应用使用 Raft，如 Docker、etcd 和 MongoDB。许多基于 Paxos 的系统（如 Chubby、ZooKeeper）也在实际生产环境中使用。</p>
<ol start="2">
<li><strong>Raft 如何与 VMware FT 比较？</strong></li>
</ol>
<p>Raft 更具容错性，没有单点故障，而 VMware FT 存在一个测试和设置服务器作为单点故障。Raft 用作库集成在应用软件中，而 VMware FT 可用于任何虚拟机。</p>
<ol start="3">
<li><strong>Raft 如何防止恶意攻击？</strong></li>
</ol>
<p>Raft 默认没有防御恶意攻击的机制。实际部署中需要通过防火墙保护，或使用加密验证 Raft 数据包。</p>
<ol start="4">
<li><strong>Raft 的“非拜占庭”条件是什么？</strong></li>
</ol>
<p>Raft 假设服务器要么按协议运行，要么停止运行。拜占庭故障指计算机执行错误操作，这可能导致 Raft 发送不正确的结果。</p>
<ol start="5">
<li><strong>Raft 可以在地理分布的数据中心中使用吗？</strong></li>
</ol>
<p>通常，Raft 部署在单一数据中心。<font color="red">跨数据中心的系统（如 Spanner）更适合无领导协议，以便客户可以与本地副本通信</font>。</p>
<ol start="6">
<li><strong>Raft 的日志为何是从 1 开始编号的？</strong></li>
</ol>
<p>日志从零编号，但第一个条目（索引为 0）具有Term 0，使得初始 AppendEntries RPC 可以包含有效的 PrevLogIndex。</p>
<ol start="7">
<li><strong>Raft 的副本优化是什么？</strong></li>
</ol>
<p>副本优化通过在服务快照时使用 fork()，实现了“写时复制”。操作系统会延迟实际的内存复制，优化了性能。</p>
<ol start="8">
<li><strong>为什么新领导在其任期开始时需要提交一个无操作（no-op）日志条目？</strong></li>
</ol>
<p>新领导提交无操作日志条目可以确保其日志中所有之前的条目都是已提交的。这是为了防止新领导在自己失败时，前一个领导的日志条目未被提交，从而保持系统一致性。</p>
<ol start="9">
<li><strong>使用心跳机制提供租约（leases）进行只读操作是如何工作的？为什么需要时间同步？</strong></li>
</ol>
<p>领导者通过在心跳消息中暗示下一段时间内不能选举新领导，从而提供只读操作的租约。为了保证安全，服务器的时钟需要保持同步，确保租约时间的准确性。</p>
<ol start="10">
<li><strong>在 Raft 的配置变更过程中，如何理解旧配置（$C_\text{old}$）到新配置（$C_\text{new}$）的过渡？</strong></li>
</ol>
<p>在联合共识阶段（$C_\text{old,new}$），领导者需要获得旧配置和新配置的多数支持。配置变更日志条目需要同时被旧配置和新配置的多数服务器确认。</p>
<ol start="11">
<li><strong>快照（snapshot）的创建和恢复过程中的数据是否需要压缩？</strong></li>
</ol>
<p>快照通常会对数据进行压缩，以减少传输和存储成本。压缩方案应根据具体应用的数据类型来选择，如使用 JPEG 压缩图像数据，或使用通用压缩算法如 ZIP。</p>
<ol start="12">
<li><strong>领导者如何决定什么时候向跟随者发送快照？</strong></li>
</ol>
<p>领导者会在跟随者的 <code>matchIndex</code> 小于其日志开始索引时发送快照，以确保跟随者能够赶上最新的日志状态。</p>
<ol start="13">
<li><strong>在 Raft 中，添加日志条目是否算作执行操作？</strong></li>
</ol>
<p>不算。仅当领导者将日志条目标记为已提交后，服务器才会执行日志条目中的操作。执行操作指的是将日志条目交给实际服务进行处理。</p>
</blockquote>
]]></description></item><item><title>【论文阅读笔记】 SkexGen: Autoregressive Generation of CAD Construction Sequences with Disentangled Codebooks</title><link>https://hezephyr.github.io/posts/06.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0skexgen/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/06.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0skexgen/</guid><description><![CDATA[<h2 id="摘要" class="heading-element"><span>1 摘要</span>
  <a href="#%e6%91%98%e8%a6%81" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>SkexGen是一种新颖的<font color="red">自回归生成模型</font>，用于创建CAD构造序列，其中包含<font color="red">草图和拉伸建模操作</font>。这个模型利用不同的Transformer架构将构造序列中的<strong>拓扑、几何和拉伸变化</strong>编码到<strong>解耦的码本</strong>中。<strong>自回归</strong>Transformer解码器根据码本向量生成具有特定属性的CAD构造序列。广泛的实验表明，我们的解耦码本表示可以生成多样且高质量的CAD模型，增强了用户的控制能力，并能够有效探索设计空间。</p>
<p><a href="https://github.com/samxuxiang/SkexGen"target="_blank" rel="external nofollow noopener noreferrer">【code】<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<h2 id="引言" class="heading-element"><span>2 引言</span>
  <a href="#%e5%bc%95%e8%a8%80" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>SkexGen是一种新颖的自回归生成模型，使用离散码本进行CAD模型生成。作者采用草图和拉伸建模语言来描述CAD构造序列，其中草图操作创建二维原语，拉伸操作将它们提升并组合成三维。<font color="red">Transformer编码器学习到解耦的潜在表示，作为三个码本，分别捕捉构造序列的拓扑、几何和拉伸变化</font>。给定码本向量，自回归Transformer解码器生成草图和拉伸构造序列，进而处理成CAD模型。</p>
<p>作者在一个大规模草图和拉伸数据集（<a href="https://drive.google.com/drive/folders/1mSJBZjKC-Z5I7pLPTgb4b5ZP-Y6itvGG"target="_blank" rel="external nofollow noopener noreferrer">DeepCAD数据集，需要将其转换为SkexGen格式<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>）上评估了SkexGen。与多个baseline和最先进方法进行的定性和定量评估表明，SkexGen生成了更真实和多样的CAD模型，同时实现了有效的控制和高效的设计空间探索，这是以往方法无法实现的。作者做出了以下贡献：</p>
<ul>
<li><strong>SkexGen架构</strong>，自回归生成高质量和多样化的CAD构造序列。</li>
<li><strong>解耦的码本</strong>，编码构造序列的拓扑、几何和拉伸变化，实现了设计的有效控制和探索。</li>
<li>在<strong>公共基准</strong>上的广泛定性和定量评估，展示了最先进的性能。</li>
</ul>
<h2 id="相关工作" class="heading-element"><span>3 相关工作</span>
  <a href="#%e7%9b%b8%e5%85%b3%e5%b7%a5%e4%bd%9c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li>
<p><strong>构造性实体几何（CSG）</strong></p>
<p>3D形状由参数化基元通过布尔运算组成的CSG树表达。这种轻量级表示已广泛用于与程序合成、神经引导程序合成、无监督学习和专用参数化基元结合的重建任务中。<font color="red">但参数化CAD仍主导机械设计，并且广泛使用草图和拉伸建模操作</font>。</p>
</li>
<li>
<p><strong>构造序列生成</strong></p>
<ul>
<li>PolyGen开创：使用Transformer和指针网络预测n-gon网格顶点和面。</li>
<li>数据集推动：大规模CAD建模操作数据集促进直接学习用户建模操作。</li>
<li>拉伸操作预测：预测拉伸操作序列以部分恢复构造序列，但没有底层草图信息。<font color="red">预测线、弧、圆等草图基元的序列是形成CAD二维基础的关键构造块，可通过添加拉伸操作轻松扩展到3D</font>。</li>
<li>Transformer架构的应用：应用于草图和拉伸序列生成，<font color="red">但在用户控制方面存在局限</font>。</li>
</ul>
<p>现有的方法通常将<font color="red">网络条件设置为用户提供的图像、点云或手绘草图</font>，只是将现有设计转换为CAD构造序列表示，<font color="red">而没有提供对拓扑和几何的单独控制</font>来探索相关设计的空间。作者的方法则提供对拓扑和几何的单独控制。</p>
</li>
<li>
<p><strong>码本架构</strong></p>
<p>自引入以来，码本已在许多图像和音频生成任务中证明有效，提高了生成图像的多样性并提供了额外的用户控制。由于其高结构规律性，它们特别适合于编码CAD建模序列。</p>
</li>
</ul>
<h2 id="草图和拉伸构造序列" class="heading-element"><span>4 草图和拉伸构造序列</span>
  <a href="#%e8%8d%89%e5%9b%be%e5%92%8c%e6%8b%89%e4%bc%b8%e6%9e%84%e9%80%a0%e5%ba%8f%e5%88%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>作者定义了一个草图和拉伸构造序列表示法，作为基元的层次结构，这一构造基于TurtleGen和DeepCAD的基础，并进行了若干修改，使表示法更具表现力和学习适应性，如下图所示，该示例模型由两个草图组成，这些草图由面、环和曲线构成。序列以拓扑token（$T_1$）开始，表示曲线的起点（类型为弧线），接着两个几何token（$G_1,G_2$），每个token存储一个二维点坐标，。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/SkexGen_Construction_Seq_Example.png" alt="image-20240709221547861" style="zoom: 50%;" />
<p><strong>基元层次结构：</strong></p>
<ul>
<li><strong>曲线</strong>：最低级别的基元，包括直线、弧线或圆。</li>
<li><strong>环</strong>：一个闭合路径，由一个（例如圆）或多个曲线（例如直线-弧线-直线）组成。</li>
<li><strong>面</strong>：<font color="red">一个由环限定的二维区域</font>，这是我们的表示法中新增加的。具体来说，<font color="red">一个面由一个外环和若干内环（洞）构成</font>，这在许多CAD系统中是一个惯例。</li>
<li><strong>草图</strong>：由一个或多个面组成。</li>
<li><strong>拉伸草图</strong>：通过拉伸草图形成的三维体积。</li>
<li><strong>草图和拉伸模型</strong>：通过布尔操作（例如交集、并集和差集）由多个拉伸草图组成。<font color="red">注意，DeepCAD的表示法没有面基元，无法表示具有多个面的草图（例如Figure 1中的ES1）</font>。</li>
</ul>
<h2 id="skexgen架构" class="heading-element"><span>5 SkexGen架构</span>
  <a href="#skexgen%e6%9e%b6%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>SkexGen 是一种自回归生成模型，通过两个网络分支中的三个解耦码本学习草图和拉伸模型的变体。图2展示了SkexGen的架构。“草图”分支学习二维草图的拓扑和几何变体，“拉伸”分支学习三维拉伸的变体（如方向）。两个分支架构类似，本节重点介绍草图分支，包含两个编码器和一个解码器。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/SkexGen_Architecture.png" alt="image-20240709221648006" style="zoom:50%;" />
<h3 id="拓扑编码器" class="heading-element"><span>5.1 拓扑编码器</span>
  <a href="#%e6%8b%93%e6%89%91%e7%bc%96%e7%a0%81%e5%99%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>拓扑编码器接收输入的子序列，token为：</p>
<ol>
<li>
<p><strong>拓扑token（T）</strong>：表示三种曲线类型之一（直线/弧线/圆）。</p>
</li>
<li>
<p><strong>结束基元token（E）</strong>：表示三种基元类型之一（环/面/草图）的结束。</p>
</li>
<li>
<p><strong>结束序列token（End）</strong>：表示序列的结束。</p>
</li>
</ol>
<p>因此，token初始化为一个7维（= 3+3+1）的独热向量</p>
<ul>
<li>
<p><strong>嵌入</strong></p>
<p>独热向量转换为256维嵌入。作者考虑拓扑token $T$，其中$h_{T} ^{tp}$是7维独热向量，$i_T$表示其在输入子序列中的索引，其嵌入向量计算公式为：</p>
<p>$$
T \leftarrow \mathbf{W}^\text{tp} h_{T} ^{tp} + \mathbf{p}^{(i_T)}
$$</p>
<p>其中$\mathbf{W}^\text{tp}\in \mathbb{R}^{d_E\times 7}$表示可学习矩阵，$\mathbf{p}^{(i_T)}$表示拓扑子序列索引$i_T$处的可学习位置编码。</p>
</li>
<li>
<p><strong>架构</strong></p>
<p>编码器基于Transformer（<font color="red">四层，每层包含八头自注意层、层规范化和前馈层</font>）。根据Vision Transformer，<strong>输入的拓扑信息编码为一个“码token”</strong>，预先加入到输入中，并初始化为一个可学习的嵌入$Z_{tp}$。令$Z_{tp}^e$为编码器输出的码token嵌入。嵌入$Z_{tp}^e$被量化为大小为$N({\mathbf{b}_{tp}\text{ | }i=1,2\cdots N})$的<strong>码本最近码</strong>。</p>
<p>编码和量化后的最终码token $Z_{tp}^Q$被传递给解码器。</p>
<p>$$
Z^Q_{tp} \leftarrow \mathbf{b}^{(k)}_{tp}, \text{where }
k = \text{argmin}_{j} | Z^e_{_{tp}} - b^{(j)}_{tp} |^2
$$</p>
<p>f这里为了简单起见，只假设了一个码token，拓扑编码器实际上由四个码token，并产生四个输出码token（$Z^{Q_{(1)}}_{tp},Z^{Q_{(2)}}_{tp},Z^{Q_{(3)}}_{tp},Z^{Q_{(4)}}_{tp}$）。作者尝试了不同的码本大小，发现 $N = 500$ 可以取得良好效果。</p>
</li>
</ul>
<h3 id="几何编码器" class="heading-element"><span>5.2 几何编码器</span>
  <a href="#%e5%87%a0%e4%bd%95%e7%bc%96%e7%a0%81%e5%99%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>
<p><strong>输入token</strong></p>
<ul>
<li>
<p>几何token（G）：包含一个二维点坐标</p>
</li>
<li>
<p>结束基元token（E）：表示四种基元类型之一（曲线/面/环/草图）的结束</p>
</li>
<li>
<p>结束序列token（End）</p>
</li>
</ul>
<p>几何token G 指定沿曲线的一个二维点坐标。由于坐标是数值型的，作者将<font color="red">草图离散化</font>为$64\times 64$（6位）像素，并考虑$64^2$个可能的像素位置。因此，一个$4101(=64^2+4+1)$维的独热向量唯一确定了token信息。</p>
</li>
<li>
<p><strong>嵌入</strong></p>
<p>我们按照4.1中的嵌入公式并使用$\mathbf{W^{ge}}\in\mathbb{R}^{d_E\times 4101}$和位置编码来初始化输入token嵌入。token E和End类似于拓扑Token的初始化，通过将它们的独热向量$h^{ge}_G\in \mathbb{R}^{4101}$乘以$\mathbf{W^{ge}}$并加上位置编码。几何Token G的初始化不同：</p>
<p>$$
G \leftarrow \mathbf{W^{ge}} h^{ge}_G + \mathbf{W}^xh^x_G +
\mathbf{W}^y h^y_G + \mathbf{p}^{(i_G)}.
$$</p>
<p>几何token $G$具有附加的坐标嵌入，$h^x_G,h^y_G\in \mathbb{R}^{64}$是指示像素的$x,y$坐标的独热向量。坐标嵌入是可选的，但可以进一步提高实验结果。</p>
</li>
<li>
<p><strong>架构</strong></p>
<ul>
<li>类似于拓扑编码器，基于Transformer。</li>
<li>生成嵌入 $Z^{{e_{(i)}}}_{ge}$ 和量化后的码token $Z^{Q_{(i)}}_{ge}$ 。</li>
<li>使用两个码token，码本大小 $N = 1000$。</li>
</ul>
</li>
</ul>
<h3 id="草图解码器" class="heading-element"><span>5.3 草图解码器</span>
  <a href="#%e8%8d%89%e5%9b%be%e8%a7%a3%e7%a0%81%e5%99%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>草图解码器以拓扑和几何码本为输入，生成几何token $G$和结束基元token $E$（用于曲线/环/面/草图），以恢复草图子序列。</p>
<blockquote>
<p>注意，不生成拓扑标记T，因为它们可以根据每条曲线内的几何标记数量推断出来（即，直线/弧线/圆分别有1/2/4个G标记）。这意味着几何编码器和草图解码器有相似的子序列（Figure 2）。</p>
</blockquote>
<ul>
<li>
<p><strong>输入</strong></p>
<p>给定前$k-1$个token，自回归解码器预测第$k$个token的条件概率。训练输入序列向右移一位，前面添加“start”符号（由位置编码初始化）。由于解码器中可能的token类型与几何编码器相同，我们使用相同的$4101$维独热编码方案，并使用带有位置编码的可学习矩阵（大小为 $d_E \times 4101$）初始化嵌入向量。</p>
</li>
<li>
<p><strong>输出</strong></p>
<p>解码器生成“向左移一位”的子序列，即预测输入中的原始$k$个标记（见Figure 2）。令$K$为草图解码器输出中的一个标记，其具有 $d_E$ 维嵌入。我们使用可学习矩阵 $\mathbf{W^{out}} \in \mathbb{R}^{4101 \times d_E}$ 来预测4101个类别的概率：$h^\text{out}_K \leftarrow \text{softmax} (\mathbf{W^\text{out}} K)$</p>
</li>
<li>
<p><strong>交叉注意力</strong></p>
<p><font color="red">Transformer架构通过交叉注意力从拓扑和几何码本中分别取四个和两个量化码本向量</font>。为了区分两个不同的码本，我们借鉴位置编码的思想，分别向拓扑码 ${ Z^{Q_{(i)}}_{tp} }$ 和几何码 ${ Z^{Q_{(i)}}_{ge} }$ 添加可学习嵌入向量 $\mathbf{p}^{(q_{tp})} \in \mathbb{R}^{4 \times d_E}$和 $\mathbf{p}^{(q_{ge})} \in \mathbb{R}^{2 \times d_E}$ ：</p>
<p>$$
Z^{{Q_{(i)}}}_{tp} + p^{(q_{tp})} \quad \text{or} \quad
Z^{Q_{(i)}}_{ge}+ p^{(q_{ge})}.
$$</p>
<p>基础网络设置与编码器相同（即四层，每层八头），<font color="red">但它是带掩码的自回归（仅关注先前的标记）</font>。</p>
</li>
</ul>
<h3 id="训练" class="heading-element"><span>5.4 训练</span>
  <a href="#%e8%ae%ad%e7%bb%83" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>拓扑编码器、几何编码器和草图解码器通过三种损失函数联合训练：</p>
<p>$$
\sum_K \text{CrossEntropy}(h^\text{out}_K, h^\text{gt}_K) + \
| \text{sg} (Z^{e}_{tp}) - \mathbf{b}_{tp} |_2^2 + \beta
| Z^{e}_{tp} - \text{sg} (\mathbf{b}_{tp}) |_2^2 + \
| \text{sg} (Z^{e}_{ge}) - \mathbf{b}_{ge}
|_2^2 + \beta | Z^{e}_{ge} - \text{sg} (b_{ge}) |_2^2.
$$</p>
<ul>
<li>
<p>第一行计算序列重建损失，其中 $h^\text{out}_K$ 是草图解码器预测的概率， $h^\text{gt}_K$ 是真实的独热向量，<font color="red">利用交叉熵损失衡量准确度</font>。</p>
</li>
<li>
<p>第二行和第三行是VQ-VAE使用的标准码本和承诺损失。 $\text{sg}$ 表示<strong>停止梯度操作</strong>，在前向传播中是恒等函数，但在后向传播中阻止梯度。 $\beta$ <strong>缩放承诺损失</strong>，设为$0.25$，用于调整承诺损失的权重，这确保编码器输出绑定一个码向量。</p>
</li>
</ul>
<p>为了简化，我们省略了每个编码器中多个码本标记的明确写出。<font color="red">给定一个真实子序列，我们运行两个编码器并自回归地运行解码器，直到生成相同数量的标记</font>。训练采用教师强制的方式，即将真实token而非预测token输入解码器，保证每次迭代解码器仅专注于单步训练，从而简化训练流程并提升效率</p>
<h3 id="生成" class="heading-element"><span>5.5 生成</span>
  <a href="#%e7%94%9f%e6%88%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>SkexGen 生成 CAD 模型分两步：</p>
<ol>
<li>从三个码本生成码。
<ul>
<li>
<p>采用训练完成的编码器（拓扑、几何、拉伸）从样本中提取码。</p>
</li>
<li>
<p>Transformer解码器被训练来生成这些<font color="red">非正态分布的量化码，即从码本中挑选码索引</font>。</p>
</li>
<li>
<p>允许架构微小修改以支持条件码生成，如“拓扑条件码选择器”，它基于给定拓扑码来挑选相应的几何和拉伸码。</p>
</li>
</ul>
</li>
<li>给定码生成草图和拉伸构造序列。
<ul>
<li>
<p>给定码，草图和拉伸解码器便通过核采样，自回归方式生成构造子序列。</p>
</li>
<li>
<p>这些子序列整合成完整的草图和拉伸序列，最终由CAD软件解析为边界表示。</p>
</li>
</ul>
</li>
</ol>
<h2 id="实验" class="heading-element"><span>6 实验</span>
  <a href="#%e5%ae%9e%e9%aa%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>实验验证目标：</p>
<ul>
<li>
<p>SkexGen生成高质量和多样化结果的能力</p>
</li>
<li>
<p>码本对生成过程控制的程度</p>
</li>
<li>
<p>SkexGen在设计探索和插值应用中的表现</p>
</li>
</ul>
<h3 id="实验设置" class="heading-element"><span>6.1 实验设置</span>
  <a href="#%e5%ae%9e%e9%aa%8c%e8%ae%be%e7%bd%ae" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>
<p><strong>数据集</strong>：使用DeepCAD数据集，包含178,238个序列，经去重和无效操作剔除，最终训练集含<strong>74,584个草图子序列</strong>与<strong>86,417个拉伸子序列</strong>。针对单一草图实验，经过从构造序列的步骤中提取草图并去重后，<strong>最终收集到114,985个训练样本</strong>。</p>
</li>
<li>
<p><strong>实现细节</strong>：SkexGen基于PyTorch开发，在RTX A5000上训练。采用与DeepCAD一致的设置，四层Transformer结构，每层含八个注意力头，层规范化，前馈维度512，输入嵌入256维，Dropout率0.1。使用Adam优化器，学习率0.001。线性预热和梯度裁剪与 DeepCAD 一致。<font color="red">我们在前25个epoch中跳过代码量化，发现这有助于稳定码本训练。对于数据增强，我们向几何标记的坐标添加小的随机噪声</font>。训练300个epoch，批量大小128。草图与拉伸子序列最大长度分别为200与100。在测试时，我们使用核采样方法以自回归方式采样码选择器和解码器。</p>
</li>
<li>
<p><strong>指标</strong>：</p>
<ul>
<li>
<p><strong>Fréchet Inception Distance (FID)</strong>：比较真实和生成数据分布的均值和协方差来衡量生成的保真度。</p>
</li>
<li>
<p><strong>覆盖率（COV）</strong>：基于表面上2,000个均匀采样点的最小 Chamfer 距离来衡量真实数据与生成数据的匹配百分比。</p>
</li>
<li>
<p><strong>最小匹配距离 (MMD)</strong>：生成样本与其在真实数据集中最近邻的平均最小匹配距离。</p>
</li>
<li>
<p><strong>Jensen-Shannon散度 (JSD)</strong>：基于边缘点分布衡量真实和生成分布的相似性。</p>
</li>
<li>
<p><strong>Novel Score</strong>：生成数据中未出现在训练集中的百分比。</p>
</li>
<li>
<p><strong>Unique Score</strong>：生成样本中仅出现一次的数据百分比，如果序列中的所有token在6位量化后相同，我们认为两个数据样本是相同的。</p>
</li>
</ul>
</li>
</ul>
<h3 id="随机生成" class="heading-element"><span>6.2 随机生成</span>
  <a href="#%e9%9a%8f%e6%9c%ba%e7%94%9f%e6%88%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>为了评估 SkexGen 生成高质量和多样化结果的能力，我们随机生成每种类型的20,000个样本，并将 SkexGen 与四个其他基线进行比较：</p>
<ul>
<li>
<p>CurveGen</p>
</li>
<li>
<p>DeepCAD</p>
</li>
<li>
<p>单一码本的 SkexGen</p>
</li>
<li>
<p>带 VAE 的 SkexGen。</p>
</li>
</ul>
<blockquote>
<p>由于其他来自同时研究的草图生成模型依赖于草图约束标签，并且理想情况下需要草图约束求解器，这使得它们无法直接比较。</p>
</blockquote>
<p><strong>草图生成评估</strong>：结果如下表所示。SkexGen<strong>FID分数</strong>表现最优，证明其生成的草图质量最高。SkexGen在<strong>Novel</strong>上虽不及DeepCAD，但在<strong>Unique</strong>上与CurveGen相当或更优。且定性分析显示，DeepCAD虽然<strong>Novel</strong>得分高，但存在大量无效结果，如自相交曲线和未闭合几何，影响了FID评分。总体而言：</p>
<ul>
<li>
<p>SkexGen 生成的草图在<strong>质量上更好，形状更复杂，自相交更少，对称性更强</strong>。</p>
</li>
<li>
<p>CurveGen 也生成了质量不错的结果，<strong>但矩形和圆的复杂排列较少</strong>。</p>
</li>
<li>
<p>DeepCAD 可以生成比 CurveGen 更复杂的形状，<strong>但噪音很多</strong>。</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240709222143401.png" alt="image-20240709222143401" style="zoom:50%;" />
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240709222229350.png" alt="image-20240709222229350" style="zoom:33%;" />
<p><strong>CAD模型生成评估</strong>：结果如下表所示，SkexGen在所有评估指标上领先，尤其在形状复杂度、对称性以及频繁使用弧线方面表现出色。<font color="red">SkexGen能生成涉及多步骤草图和拉伸序列的CAD模型，而DeepCAD则主要生成单步模型</font>。表中间两行展示了多个解耦码本的有效性。减少到单个码本后，生成质量下降，SkexGen 类似于 VQ-VAE。当不使用码本时，结果最差，SkexGen 实际上变成了 VAE。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240709222201905.png" alt="image-20240709222201905" style="zoom:50%;" />
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240709222300874.png" alt="image-20240709222300874" style="zoom: 33%;" />
<p><strong>运行时间评估</strong>：尽管SkexGen的自回归采样过程使其比DeepCAD慢，但比CurveGen（具有两个依赖的自回归解码器）快，显示出采样效率的优化空间。</p>
<h3 id="可控生成" class="heading-element"><span>6.3 可控生成</span>
  <a href="#%e5%8f%af%e6%8e%a7%e7%94%9f%e6%88%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>解耦码本实现了设计控制与探索，如下图所示：左侧“拓扑条件”：固定拓扑码，其他码通过核采样获得，展示相同结构的不同变体。右侧“几何条件”：固定几何码，改变其他码，体现一致几何下的多样形态。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240709222419490.png" alt="image-20240709222419490" style="zoom: 33%;" />
<p>为了定量衡量三个码本之间的解耦程度，作者参考了$\beta\text{-VAE}$的评估方法。通过保持一个拓扑、几何或拉伸标记相同，并对其他部分进行采样，生成一对草图和拉伸序列。然后训练一个小型基于Transformer的分类器，通过编码潜在空间中所有数据对的平均成对差异来识别固定的码。SkexGen的分类准确率为99.8 ± 0.1%，证实码本间解耦效果显著。</p>
<h3 id="应用" class="heading-element"><span>6.4 应用</span>
  <a href="#%e5%ba%94%e7%94%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>
<p><strong>插值应用</strong></p>
<p>利用线性插值技术在模型的码之间探索，生成过渡模型。过程包括：编码模型提取关键码、线性插值这些码，再量化及生成插值模型。插值结果示例如Figure所示，线条演化为圆，矩形实体转为圆形空心盘，显示拓扑和几何动态变化。插值效果可能不平滑，因涉及复杂的离散拓扑变换。</p>
</li>
<li>
<p><strong>码混合应用</strong></p>
<p>通过混合不同数据的拓扑、几何和拉伸码，创造新颖设计组合。图8示例：保持拓扑形状，调整几何位置，如多个圆柱按方形布局排列。这些混合结果体现了系统的创新设计能力，超越了传统方法的局限。</p>
</li>
</ul>
<h2 id="总结" class="heading-element"><span>7 总结</span>
  <a href="#%e6%80%bb%e7%bb%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>SkexGen是一种新颖的自回归生成模型，专为CAD构造序列设计。它利用不同的Transformer架构将CAD构造序列中的拓扑、几何和拉伸变化编码为解耦码本。这些解码器可以生成具有特定属性的CAD构造序列。SkexGen的优势在于其能够生成多样且高质量的CAD模型，同时提高用户的控制能力和设计空间的探索效率。</p>
<p>模型的评估在一个大规模的CAD数据集上进行，结果表明，SkexGen相比多个基准和最新方法，生成的CAD模型更为真实和多样。此外，SkexGen的架构也增强了用户在设计过程中的控制能力，使其能够更有效地探索不同设计空间。</p>
<h4 id="限制" class="heading-element"><span>7.0.1 限制</span>
  <a href="#%e9%99%90%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><ol>
<li><strong>数据依赖</strong>：SkexGen依赖于大量的已标注CAD数据集，这些数据集的质量和多样性直接影响模型的表现。</li>
<li><strong>模型复杂性</strong>：该模型使用多个Transformer编码器和解码器来处理复杂的CAD构建序列，这增加了模型的复杂性和计算成本。</li>
<li><strong>拓扑和几何的分离</strong>：虽然这种分离有助于提高控制和生成多样性，但在实际应用中可能会导致模型难以学习到拓扑和几何之间的复杂关系。</li>
<li><strong>有限的建模操作</strong>：SkexGen主要关注草图和拉伸操作，未涉及其他的CAD建模操作，如旋转、扫掠、布尔运算等，限制了其应用范围（<font color="red">但可以通过导入CAD工具后编辑实现其他CAD建模操作</font>）。</li>
</ol>
<h4 id="创新点" class="heading-element"><span>7.0.2 创新点</span>
  <a href="#%e5%88%9b%e6%96%b0%e7%82%b9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><ol>
<li><strong>自回归生成模型</strong>：SkexGen是一个自回归生成模型，能够生成高质量和多样化的CAD构建序列。</li>
<li><strong>解耦码本</strong>：使用了解耦码本架构，分别编码CAD构建序列中的拓扑、几何和拉伸变化，提高了用户控制和设计空间的探索效率。</li>
</ol>
]]></description></item><item><title>【论文阅读笔记】Hierarchical Neural Coding for Controllable CAD Model Generation</title><link>https://hezephyr.github.io/posts/07.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0hierarchical-neural-coding-for-controllable-cad-model-generation/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/07.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0hierarchical-neural-coding-for-controllable-cad-model-generation/</guid><description><![CDATA[<h2 id="摘要" class="heading-element"><span>1 摘要</span>
  <a href="#%e6%91%98%e8%a6%81" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>作者提出了一种CAD的创新生成模型，该模型将CAD模型的高级设计概念表示为从全局部件排列到局部曲线几何的三层神经代码的层级树，并且通过指定目标设计的代码树来控制CAD模型的生成或完成。具体而言，<font color="red">一种带有“掩码跳过连接”的向量量化变分自编码器(VAE)的新变体在三个层次上提取设计变化作为神经码本。两阶段的级联自回归Transformer学习从不完整的CAD模型生成代码树，然后根据预期设计完成CAD模型</font>。广泛的实验表明，在<strong>无条件生成等传统任务</strong>上表现出优越性能，同时在<strong>条件生成任务</strong>中实现了新颖的交互能力。</p>
<p><a href="https://github.com/samxuxiang/hnc-cad"target="_blank" rel="external nofollow noopener noreferrer">【code】<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<h2 id="引言" class="heading-element"><span>2 引言</span>
  <a href="#%e5%bc%95%e8%a8%80" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>大多数现代CAD设计工具采用“草图和拉伸”风格的工作流程，<font color="red">以这种方式创建的CAD模型具有自然的树结构，支持局部编辑</font>。树叶处的曲线可以调整并重新生成拉伸以更新最终形状。对于设计师来说，重要的是编辑要保留“设计意图”。而设计意图定义也有不同：</p>
<ul>
<li>
<p>Otey等人将设计意图定义为“在修改时CAD模型的预期行为”</p>
</li>
<li>
<p>Martin描述为“对象之间的关系，使得对一个对象的更改可以自动传播到其他对象”。</p>
</li>
</ul>
<p>虽然“草图和拉伸”允许局部更改，但它不提供在编辑模型时给出预期行为所需的关系。一个能理解设计意图的计算系统将彻底改变CAD的实践。这种系统可以帮助设计师在：</p>
<ol>
<li>
<p>根据高级设计概念生成多样化的CAD模型；</p>
</li>
<li>
<p>在约束某些模型属性的情况下修改现有的CAD模型；</p>
</li>
<li>
<p>交互式地自动完成设计（如下图）。</p>
 <img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Example_For_User_Editing" alt="image-20240710195839501" style="zoom:33%;" />
</li>
</ol>
<p>但目前还没有这样的系统，当前行业标准通过手动指定参数和方程，以定义轮廓的位置和尺寸，以及用于对齐几何的约束，这种称为<font color="red">参数化CAD</font>的过程需要<font color="red">专业技能，并且在意外编辑时很容易出错</font>。下图展示了编辑约束不良的CAD模型的几何形状时原始设计意图被破坏的示例。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Example_failures_of_parametric_CAD.png" alt="image-20240710195948645" style="zoom:50%;" />
<p><strong>现有的工作并未利用CAD设计的层次性来提供有效的设计控制</strong>。作者提出了一种新颖的生成网络，将CAD模型的设计意图捕获为从局部几何特征到全局部件排列的三层神经代码树，并根据编码树或不完整的CAD模型指定的设计意图控制CAD模型的生成或完成。CAD模型以建模操作的序列形式生成，然后转换为工业标准的边界表示（B-Rep）格式，以便在CAD软件中进行编辑。</p>
<p>具体来说，作者提出了一种带有“掩码跳过连接”的矢量量化VAE变体，从大规模草图和拉伸CAD数据集（<a href="https://drive.google.com/drive/folders/1mSJBZjKC-Z5I7pLPTgb4b5ZP-Y6itvGG"target="_blank" rel="external nofollow noopener noreferrer">DeepCAD数据集<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>）中学习设计变化形成三个神经码本。掩码跳过连接简单但有效，可以提取高度抽象的码本，使代码与生成的几何形状之间的关系变得直观。然后，两阶段级联自回归Transformer学习生成：</p>
<ol>
<li>
<p>给定不完整CAD模型的三层代码树</p>
</li>
<li>
<p>给定编码树和不完整数据的完整CAD模型</p>
</li>
</ol>
<p>设计师还可以直接提供编码树以生成模型。</p>
<p>与其他生成baseline的定性和定量评估表明，在随机生成任务中，该系统生成了更逼真和复杂的模型。在用户控制的条件生成任务中，系统展示了灵活和优越的几何控制，这得益于层次编码树表示，优于当前最先进的基于深度学习的生成模型（例如SkexGen，DeepCAD）。总之，我们的贡献包括：</p>
<ul>
<li>编码层次设计概念的神经代码树表示，支持高质量和复杂模型的生成、设计意图感知的用户编辑和设计自动完成。</li>
<li>带有掩码跳过连接的新型向量量化变分自编码器，用于增强代码簿学习。</li>
<li>在CAD模型生成方面相对于之前的最先进方法的性能提升。</li>
</ul>
<h2 id="相关工作" class="heading-element"><span>3 相关工作</span>
  <a href="#%e7%9b%b8%e5%85%b3%e5%b7%a5%e4%bd%9c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li>
<p><strong>构造性实体几何（CSG）</strong></p>
<p>3D形状由参数化基元通过布尔运算组成的CSG树表达。这种轻量级表示通过程序合成和无监督学习重建CAD形状。但参数化CAD仍主导机械设计，并且广泛使用草图和拉伸建模操作。</p>
</li>
<li>
<p><strong>直接CAD生成</strong></p>
<p>最近一些工作专注于<font color="red">在没有任何CAD建模序列监督的情况下直接生成CAD模型</font>。作者更专注于以草图和拉伸序列形式进行的参数化CAD的可控生成。</p>
</li>
<li>
<p><strong>草图和拉伸CAD生成</strong></p>
<p>最近大规模参数化CAD数据集的可用性使基于学习的方法能够利用CAD建模序列历史和草图约束生成工程草图和实体模型。生成的序列可以用实体建模内核解析，以获得包含2D工程草图或3D CAD形状的可编辑参数化CAD文件。此外，生成可以受目标B-rep、草图、图像、体素网格或点云的影响。<font color="red">但这种控制是全局级别的，而作者旨在支持设计保持编辑和自动完成等应用程序的全局和局部级别的层次控制</font>。</p>
</li>
<li>
<p><strong>用户控制的CAD生成</strong></p>
<p>提供用户对生成过程的控制，同时保持设计意图，是生成模型在实际CAD软件中采用的关键。尽管以前的方法可以基于高级指导生成多样化的形状，但使用户能够控制生成过程更具挑战性。Sketch2CAD和Free2CAD专注于设计过程的局部控制，并且需要大量的输入。最近的一些工作还利用文本提示和用户指定的指导。SkexGen允许用户通过解耦全局控制CAD形状的拓扑和几何来探索设计变化。然而，其方法仅有助于从零开始创建新设计，<strong>无法轻易修改以提供用户期望的智能编辑CAD模型或自动完成下一步操作的交互体验</strong>。<font color="red">与现有工作不同，作者的方法利用CAD模型内部存在的自然层次结构，提供对生成过程的全局和局部控制。</font></p>
</li>
</ul>
<h2 id="层次cad属性" class="heading-element"><span>4 层次CAD属性</span>
  <a href="#%e5%b1%82%e6%ac%a1cad%e5%b1%9e%e6%80%a7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>草图和拉伸的CAD模型具有自然的层次结构，如下图所示。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Model_for_CAD.png" alt="image-20240710200053395" style="zoom: 33%;" />
<p>其中一个环定义了一条封闭的曲线路径，一个轮廓在草图平面内由一个外环和一些内环限定了一个封闭区域，而一个实体则表示一组拉伸的轮廓组合成整个模型。我们的目标是实现在生成CAD模型时的局部和全局控制，即用户可以编辑任何一个实体，并期望其余部分自动进行合理的更新。为了实现这一目标，我们在神经网络的潜在空间中捕捉这种层次结构。<font color="red">在层次结构的较高层上，网络学习较低层次几何实体的相对位置，即构成模型的轮廓和拉伸的边界框</font>。具体来说，我们将CAD模型视为一个实心（S）—轮廓（P）—环（L）树：</p>
<ul>
<li>
<p><strong>环（L）</strong> ：在树的叶子上，我们有环。每个环由一组线和弧或一个圆组成。环（L）的属性定义为一系列由特殊$\text{&lt;SEP&gt;}$ token分隔的x-y坐标：
$$
L = {(x_1, y_1), (x_2, y_2), \text{&lt;SEP&gt;}, (x_3, y_3), \ldots}.
$$</p>
<p>线由两个点（起点和终点）的xy坐标表示；弧由三个点表示，包括起点、中点和终点；圆由曲线上四个均匀分布的点表示。使用这种表示法，<strong>可以通过点的数量识别曲线类型</strong>。我们对环中的曲线进行排序，使得初始曲线是起点坐标最小的曲线，下一条是与其逆时针方向相连的曲线。</p>
</li>
<li>
<p><strong>轮廓（P）</strong>：轮廓位于叶子层之上。由于环的几何结构在叶子层捕捉，轮廓节点的属性定义为草图平面内环的二维边界框参数系列：</p>
<p>$$
P = {(x_i, y_i, w_i, h_i)}_{i=1}^{N^{\text{loop}}_i}.
$$</p>
<p>其中$i$是轮廓内$N^{\text{loop}}_i$个环的索引。$(x_i, y_i)$是边界框的左下角，$(w_i, h_i)$是宽度和高度。<font color="red">我们通过对所有二维边界框的左下角进行升序排序来确定轮廓$P$中边界框参数的顺序</font>。</p>
</li>
<li>
<p><strong>实体（S）</strong>：在轮廓层之上，我们有通过拉伸一个或多个轮廓形成的三维实体模型。实体节点的属性捕获拉伸轮廓的排列，使用一系列三维边界框参数：</p>
<p>$$
S = {(x_j, y_j, z_j, w_j, h_j, d_j)}_{j=1}^{N^{\text{profile}}_j}.
$$</p>
<p>其中$j$是模型中$N^{\text{profile}}_j$个拉伸轮廓的索引。$(x_j, y_j, z_j)$是边界框的左下角，$(w_j, h_j, d_j)$是其尺寸。同样，$S$中的参数按所有拉伸的三维边界框的左下角进行升序排序。</p>
</li>
</ul>
<h2 id="三层码本学习" class="heading-element"><span>5 三层码本学习</span>
  <a href="#%e4%b8%89%e5%b1%82%e7%a0%81%e6%9c%ac%e5%ad%a6%e4%b9%a0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>给定一个以S-P-L树格式表示的草图和拉伸CAD模型数据集，一种新的向量量化VAE（VQ-VAE）变体学习它们的潜在模式，作为三个离散的码本，这些码本将CAD模型编码为一棵神经码树，用于下游应用。</p>
<p>遵循SkexGen，我们用于学习码本的架构基础是一个VQ-VAE，由一个Transformer编码器$E$和解码器$D$组成，如下图所示。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Architecture_CAD?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Architecture_CAD?size=small" data-sub-html="<h2>image-20240710200229628</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Architecture_CAD" alt="image-20240710200229628" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Architecture_CAD?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Architecture_CAD?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Architecture_CAD?size=large 2x" data-title="image-20240710200229628" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>我们独立学习L、P和S的码本。与SkexGen和之前的掩码学习工作不同，我们在从编码器输入到解码器输入的跳过连接上应用掩码。直观来说，一个标准的VQ-VAE（即没有跳过连接）被训练用来恢复实例特定的输入细节，这对于正在学习实例无关设计模式的量化码来说是一个挑战。一个天真的跳过连接允许解码器通过直接复制输入来作弊。<font color="red">掩码跳过连接迫使解码器从未掩码元素中关联部分细节和填补缺失部分，其中关系由编码在码中的设计模式引导</font>。</p>
<ul>
<li>
<p><strong>编码器：</strong> 考虑一个$L$（方程1），包含一系列的x-y坐标和特殊的$\text{&lt;SEP&gt;}$ token。我们使用65维的独热向量来表示一个token，其中一个坐标被量化为6位（即64维），$\text{&lt;SEP&gt;}$需要一个额外的维度。设$T^E_t$表示Transformer编码器的第$t$个token的256维嵌入。嵌入初始化为：</p>
<p>$$
T_t^E\leftarrow\begin{cases}\text{MLP}(W_\text{emb}x_t\parallel
W_\text{emb}y_t)+\gamma_t\quad\text{(for x-y)},\\text{MLP}
(W_\text{emb}&lt;\text{SEP}&gt;\parallel W_\text{emb}&lt;\text{SEP}&gt;)+
\gamma_t.\end{cases}
$$</p>
<p>$W_\text{emb}$是一个$65\times 32$的token嵌入矩阵。$\parallel$是拼接运算符。$\text{MLP}$是一个两层的多层感知器。$\gamma_t$是一个可学习的256维位置嵌入。第二种情况是对于$\text{&lt;SEP&gt;}$，其值重复两次。对于P和S，我们处理每个二维或三维边界框参数的方式与$x_t, y_t$坐标相同，但没有$\text{&lt;SEP&gt;}$ token。</p>
</li>
<li>
<p><strong>向量量化：</strong> 编码器$E$的输出，序列长度为$T$，首先进行平均池化，形成$\overline{E}(T^E)$。然后应用标准的向量量化程序来获得一个256维的码本向量$c$。更具体地说，我们比较码本向量$\mathbf{b}$和编码的$\overline{E}(T^E)$之间的欧几里得距离，并执行最近邻查找。
$$
\mathbf{c}\leftarrow\mathbf{b}_k,\quad\text{where}\quad
k=\mathrm{argmin}_i\left|\left|\overline{E}(T^E)-\mathbf{b}_i\right|\right|^2.
$$</p>
</li>
<li>
<p><strong>带掩码跳过连接的解码器：</strong> 解码器接收量化码$c$和掩码的x-y坐标和$\text{&lt;SEP&gt;}$ token序列，并预测被掩码的token。例如，在一个环节点的情况下，任何$x_t, y_t$和$\text{&lt;SEP&gt;}$ token都可以被掩码（具体来说，每个模型随机掩码30%到70%的token）。设$T^D_t$表示为解码器输入的第$t$个token的嵌入。每个token的嵌入方式与编码器嵌入方程完全相同，只是被掩码的token的嵌入被一个可学习的共享32维掩码token嵌入$m$取代。来自编码器的256维码本向量$c$与${T^D_t}$拼接在一起并传递给解码器$D$，解码器有四个自注意力层。这里的思想是迫使编码器学习有用的潜在特征，可以帮助解码器预测被掩码的token。最后，在解码器后对每个token嵌入（除了码本向量）应用一个MLP，以生成(2 × 65)维的logits，即一对在65类标签上的概率值，分别用于预测xy坐标或$\text{&lt;SEP&gt;}$ token。</p>
</li>
<li>
<p><strong>损失函数：</strong> 训练损失由三项组成：</p>
<p>$$
\begin{aligned}&amp;\sum_{t}\mathrm{EMD}\Big(D(\mathbf{c},{T_{t}^{D}})
, \mathbb{1}_{T_{t}}\Big)+\&amp;\left|\left|sg[\overline{E}(T^{E})]-\mathbf{c}\right|\right|_{2}^{2}+\beta\left|\left|\overline{E}(T^{E})-sg[\mathbf{c}]\right|\right|_{2}^{2}.\end{aligned}
$$</p>
<p>第一项是解码器输出概率和相应数据属性的独热编码$\mathbb{1}_{T_t}$之间的平方EMD损失。损失仅应用于被掩码的token。我们使用的EMD损失函数，该函数假设有序的类标签，并对接近真实值的预测进行较少的惩罚。这比交叉熵损失更好，因为x-y坐标携带距离关系，使得损失可以集中在远离真实值的预测上。注意，我们对环数据属性中的$\text{&lt;SEP&gt;}$ token处理不同，应用标准的交叉熵损失，因为这不是一个有序类标签。</p>
<p>第二和第三项是VQ-VAE中使用的码本和承诺损失。$sg$表示停止梯度操作，在前向传播中是恒等函数，但在后向传播中阻止梯度。$\beta$缩放承诺损失，设为$0.25$。我们使用衰减率为$0.99$的指数移动平均更新。</p>
</li>
</ul>
<h2 id="可控cad生成" class="heading-element"><span>6 可控CAD生成</span>
  <a href="#%e5%8f%af%e6%8e%a7cad%e7%94%9f%e6%88%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>环、轮廓和实体码本使我们能够将CAD模型的设计概念表达为层次化的神经代码，从而实现多样化和高质量的生成、新颖的用户控制以指定设计意图，以及自动完成不完整的CAD模型。具体来说，给定一个不完整的CAD模型作为草图和拉伸构建序列：</p>
<ol>
<li>模型编码器将输入序列转换为潜在嵌入；</li>
<li>自回归Transformer<strong>根据嵌入的输入序列</strong>生成代码树；</li>
<li>第二个自回归Transformer<font color="red">根据嵌入的输入序列和代码树</font>生成完整的CAD模型。</li>
</ol>
<ul>
<li>
<p><strong>模型编码器：</strong> 模型编码器的主体是标准的Transformer编码器模块，具有6个自注意力层。我们借用了SkexGen中使用的格式，并将模型表示为一个token序列，每个token是一个独热向量，唯一确定一个曲线类型、量化曲线参数和量化拉伸参数。编码器将独热向量转换为一系列256维的潜在嵌入${T^E_t}$。</p>
</li>
<li>
<p><strong>编码树生成器：</strong> $G_\text{code}$是一个自回归解码器，它生成代码的层次结构${T^C_t}$。每个实体、轮廓或环从相应的码本中分配一个代码，条件是编码的嵌入${T^E_t}$。类似于层次属性表示，层次代码表示为一系列特征向量，指示代码或分隔token。具体来说，一个特征是一个独热向量，其大小是三个码本中代码的总数加上一个分隔符。例如，考虑上图示例中的代码树，包含一个实体、两个轮廓和两个或四个环。这个树的特征表示为$[S, \text{&lt;SEP&gt;}, P, L, L, \text{&lt;SEP&gt;}, P, L, L, L, L]$。这里我们执行神经代码树的深度优先遍历，边界命令$\text{&lt;SEP&gt;}$用于指示轮廓和环代码的新分组。</p>
<p>$G_\text{code}$有6个自注意力（SA）层与6个交叉注意力（CA）层交替。第一个SA层是在查询token${T^{\bar{C}}_t}$上，每个查询token由位置编码$\gamma_t$初始化并自回归估计。每个CA层的输入是${T^E_t}$。每个SA或CA层都有8个头的注意力，随后是一个Add-Norm层。一个查询token ${T^{\bar{c}}_t}$将有一个生成的代码索引，该索引转换为一个代码${T^C_t}$。分隔符被一个可学习的嵌入取代。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240729230535954.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240729230535954.png?size=small" data-sub-html="<h2>image-20240729230535954</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240729230535954.png" alt="image-20240729230535954" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240729230535954.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240729230535954.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/image-20240729230535954.png?size=large 2x" data-title="image-20240729230535954" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>Codebook表示从代码索引到代码的映射。我们使用标准的交叉熵损失训练$G_\text{code}$。注意，对于无条件生成，我们删除部分CAD模型编码器，并仅使用查询token ${T^{\bar{C}}_t}$训练SA层，没有交叉注意力层和${T^E_t}$。</p>
</li>
<li>
<p><strong>模型生成器：</strong> 模型生成器是第二个自回归解码器$G_\text{cad}$，生成一个草图和拉伸的CAD模型。$G_\text{cad}$与SkexGen解码器相同，不同的是部分CAD模型嵌入${T^E_t}$和层次神经代码${T^C_t}$通过交叉注意力层控制生成，而SkexGen仅允许全局代码的指定。架构规格与第一个解码器相同。查询token ($T^\text{out}_t$)包含生成的CAD命令序列作为独热向量，我们使用相同的标准交叉熵损失。</p>
</li>
</ul>
<h2 id="实验" class="heading-element"><span>7 实验</span>
  <a href="#%e5%ae%9e%e9%aa%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>本节展示了无条件和有条件生成的结果，证明了以下几点：</p>
<ol>
<li>相较于当前最先进的技术，生成的质量更高、种类更多、复杂性更强；</li>
<li>通过层次化神经代码实现可控生成；</li>
<li>两个重要应用，用户编辑和自动补全。</li>
</ol>
<h3 id="实验设置" class="heading-element"><span>7.1 实验设置</span>
  <a href="#%e5%ae%9e%e9%aa%8c%e8%ae%be%e7%bd%ae" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>
<p><strong>数据集</strong>: 使用大规模DeepCAD数据集，包含178,238个草图及拉伸模型，按90%训练、5%验证、5%测试划分。去除重复模型和属性，并限制训练模型的复杂度（最多5个实体、20个环/轮廓、60条曲线/环、200个命令/序列），最终训练集包含102,114个实体、60,584个轮廓、150,158个环和124,451个草图和拉伸序列用于CAD模型训练。对于CAD工程图，我们遵循SkexGen并从DeepCAD中提取草图。在移除重复后，共有99,650个草图用于训练。</p>
</li>
<li>
<p><strong>实施细节</strong>: 在Nvidia RTX A6000 GPU上训练，批次大小256。码本模块和生成模块分别训练250和350轮。采用改进的Transformer主干，输入嵌入维度256，前馈维度512，Dropout率0.1，各含6层、每层8头注意力。码本学习网络有4层。使用AdamW优化器，学习率0.001，线性预热2000步。测试时采用核采样，对输入曲线坐标添加随机噪声减少过拟合，针对码本坍塌问题采取重新初始化策略。最优代码本大小约为轮廓和实体3,500，环2,500，压缩比约60x、17x和29x。</p>
</li>
</ul>
<h3 id="指标" class="heading-element"><span>7.2 指标</span>
  <a href="#%e6%8c%87%e6%a0%87" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>五个已建立的指标定量评估随机生成</p>
<ul>
<li>
<p><strong>点云指标</strong>：基于模型表面采样的2000点比较生成和真实数据的点云集，评估多样性与质量。</p>
<ul>
<li>覆盖率（COV）：至少匹配一个生成样本的真实模型百分比，反映生成形状的多样性。</li>
<li>最小匹配距离（MMD）：平均最小匹配距离，衡量两组之间的接近程度。</li>
<li>Jensen-Shannon散度（JSD）：两个概率分布间的相似性，计算占用相同空间位置的频率。</li>
</ul>
</li>
<li>
<p><strong>token指标</strong>：衡量唯一性。数值字段量化为6位。</p>
<ul>
<li>新颖性（Novel）：未出现在训练集中的生成CAD序列比例。</li>
<li>唯一性（Unique）：在生成集中仅出现一次的数据比例。</li>
</ul>
</li>
</ul>
<h3 id="无条件生成" class="heading-element"><span>7.3 无条件生成</span>
  <a href="#%e6%97%a0%e6%9d%a1%e4%bb%b6%e7%94%9f%e6%88%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>对比DeepCAD与SkexGen，所有方法生成10,000个CAD模型，与测试集随机选取的2,500个真实模型比较。</p>
<ul>
<li>
<p>**定量评估：**如下表所示，我们的方法在所有三个点云评估指标上超越baseline，展现显著的质量和多样性提升。在Unique指标上，我们的方法与SkexGen相当，远超DeepCAD。Novel指标上略逊于SkexGen，但明显优于DeepCAD；此差距源于较小且多样性不足的训练集，且仅包含少量复杂形状所致。SkexGen因无法生成非常复杂的模型而受此影响较小。</p>
  <img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240710200626544.png" alt="image-20240710200626544" style="zoom:50%;" />
</li>
<li>
<p><strong>定性评估：</strong> 下图显示我们的方法能生成结构良好、几何形状复杂、部件布局精细的CAD模型，与真实世界实例相似。</p>
  <img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Quanlitative_Evaluation" alt="image-20240710200812020" style="zoom: 33%;" />
</li>
<li>
<p><strong>人工评估：</strong> 通过亚马逊众包平台进行人类感知质量评估，针对具有三个或更多拉伸的模型。在与真实模型并列展示的情况下，我们的方法在“真实感”评分上表现突出，分布对称，表明生成模型难以被区分。比较之下，DeepCAD和SkexGen的分布偏向“较不真实”，表明易被识别为简单或不规范的模型。我们的方法中有49.2%的生成模型被认定为比训练数据更“真实”，SkexGen为46.9%，DeepCAD为38.7%。</p>
  <img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/human_evaluation" alt="image-20240710200951339" style="zoom:50%;" />
</li>
</ul>
<h3 id="可控生成" class="heading-element"><span>7.4 可控生成</span>
  <a href="#%e5%8f%af%e6%8e%a7%e7%94%9f%e6%88%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>我们在两种“编辑”和一种“自动补全”应用场景中展示了可控生成。</p>
<ul>
<li>
<p><strong>代码树编辑：</strong> 用户可编辑不同层次的代码节点，实现局部到全局的CAD层次修改，这是以往方法所不具备的。编辑结果多样化且控制精确，如下图所示。</p>
  <img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240710201053164.png" alt="image-20240710201053164" style="zoom:50%;" />
</li>
<li>
<p><strong>保持设计的编辑：</strong> 在固定代码树的基础上，用户可迭代地调整模型参数以细化设计，同时保持当前设计不变。如下图所示，局部尺寸调整后，相关部分会自动调整以适应更改。</p>
  <img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240710201145516.png" alt="image-20240710201145516" style="zoom: 33%;" />
</li>
<li>
<p><strong>从用户输入的自动补全：</strong> 根据用户提供的部分轮廓或环，预测可能的代码集以完成CAD模型。图9和图10展示了从部分轮廓和拉伸轮廓开始的自动补全结果，每行展示不同生成代码的结果。相比最近邻搜索baseline，我们的方法在多样性和精确匹配用户输入方面表现更优，如图11所示。</p>
  <img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/image-20240710201749115.png" alt="image-20240710201749115" style="zoom: 33%;" />
</li>
</ul>
<h2 id="总结" class="heading-element"><span>8 总结</span>
  <a href="#%e6%80%bb%e7%bb%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>作者引入了一种新颖的可控CAD生成模型。方法的关键是三层神经编码，它在建模层次结构的不同层次上捕获设计模式和意图。本文在包含用户反馈的智能生成设计方向上又迈出了重要一步。广泛的评估显示，生成质量有了显著提升，并展示了作者的分层神经编码在意图感知编辑和自动补全等应用中的巨大潜力。其主要创新点和限制如下：</p>
<p><strong>创新点：</strong></p>
<ol>
<li><strong>分层神经编码</strong>：提出了一种三层次的神经编码方法，将CAD模型的高级设计概念表示为从全局部件布局到局部曲线几何的树状结构。</li>
<li><strong>设计意图的捕捉与控制</strong>：通过指定目标设计来生成或完成CAD模型，使用代码树来控制生成过程。</li>
<li><strong>新型变分自编码器（VAE）</strong>：提出了一种新型的向量量化VAE变体，具有“掩蔽跳跃连接”，用于从大规模草图和挤出CAD数据集中提取设计变化作为神经代码本。</li>
<li><strong>两阶段级联自回归变换器</strong>：用于从不完整的CAD模型生成代码树，然后根据预期设计完成CAD模型。</li>
</ol>
<p><strong>限制：</strong></p>
<ol>
<li><strong>有效性问题</strong>：当前系统在生成具有自相交边或实体的CAD模型时可能存在有效性问题，因为损失函数没有明确地惩罚无效的几何形状。<font color="red">未来的工作是增加一个损失函数，利用领域知识明确对 CAD 模型的无效性进行惩罚</font>。</li>
<li><strong>恢复失败的能力</strong>：系统在面对失败情况时，缺乏从错误中恢复的能力，这主要是因为缺乏“无效CAD模型数据集”来训练这种恢复机制。</li>
<li><strong>模型格式限制</strong>：该方法使用的是草图和拉伸CAD格式，这可能排除了其他流行的建模操作，如旋转、镜像和扫掠等。</li>
</ol>
]]></description></item><item><title>【论文阅读笔记】In Search of an Understandable Consensus Algorithm (Extended Version)</title><link>https://hezephyr.github.io/posts/03.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0in-search-of-an-understandable-consensus-algorithm-extended-version/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/03.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0in-search-of-an-understandable-consensus-algorithm-extended-version/</guid><description><![CDATA[<h2 id="介绍" class="heading-element"><span>1 介绍</span>
  <a href="#%e4%bb%8b%e7%bb%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>分布式一致性共识算法指的是在分布式系统中，使得所有节点对同一份数据的认知能够达成共识的算法。且算法允许所有节点像一个整体一样工作，即使其中一些节点出现故障也能够继续工作。之前的大部分一致性算法实现都是基于Paxos，但Paxos难以理解和实现，为此作者开始寻找一种新的易于理解的一致性算法，Raft则是作者工作的产出。</p>
<p>在设计Raft的过程中，作者采用了一系列策略来增强其可理解性，包括：</p>
<ul>
<li><strong>算法分解</strong>：Raft将核心功能模块化，<font color="red">分离出领导人选举、日志复制和安全性三个关键部分</font>，使每个部分的逻辑更加清晰。</li>
<li><strong>状态空间缩减</strong>：相比于Paxos，Raft减少了不确定性和服务器间的不一致性状态，简化了状态机模型，从而降低了理解和实现的难度。</li>
</ul>
<p>Raft 算法在许多方面和现有的一致性算法都很相似，但是它也有一些特性：</p>
<ul>
<li><strong>强领导人机制</strong>：Raft采用了更强的领导人角色，<font color="red">所有日志条目仅由领导人发送给其他服务器</font>，这种集中控制方式简化了日志管理，增强了算法的直观性。</li>
<li><strong>领导人选举</strong>：<font color="red">Raft使用随机计时器来触发领导人选举</font>，这种机制在心跳机制的基础上增加了少许复杂性，<strong>但有效地解决了选举冲突，实现了快速而简单的决策过程</strong>。</li>
<li><strong>成员关系调整</strong>：Raft 使用一种<strong>联合共识</strong>的方法来处理集群成员变换的问题，在这种方法下，处于调整过程中的两种不同的配置集群中大多数机器会有重叠，这就使得集群在成员变换的时候依然可以继续工作。</li>
</ul>
<h2 id="复制状态机" class="heading-element"><span>2 复制状态机</span>
  <a href="#%e5%a4%8d%e5%88%b6%e7%8a%b6%e6%80%81%e6%9c%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>复制状态机是共识算法的核心应用背景，它是指一组服务器上的状态机生成相同状态的副本，即使部分服务器宕机也能持续运行。这种架构在大规模分布式系统中尤其重要，因为它能够解决一系列容错问题。例如，大规模的系统中通常都有一个集群领导人，像 GFS、HDFS 和 RAMCloud，典型应用就是<font color="red">一个独立的复制状态机去管理领导人选举和存储配置信息并且在领导人宕机的情况下也要存活下来</font>。比如 Chubby 和 ZooKeeper。</p>
<p>复制状态机通常都是基于复制日志实现的，如图 1。每个服务器存储一个包含一系列指令的日志，并且按照日志的顺序进行执行。所有日志都包含相同的指令序列，确保状态机一致，因为每个状态机都是确定的，每一次执行操作都产生相同的状态和同样的序列。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be1.jpeg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图1.jpeg?size=small" data-sub-html="<h2>https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图1.jpeg</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be1.jpeg" alt="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图1.jpeg" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be1.jpeg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be1.jpeg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be1.jpeg?size=large 2x" data-title="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图1.jpeg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p><font color="red">一致性算法的任务是保证复制日志的一致</font>性。服务器上的一致性模块接收客户端发送的指令然后添加到自己的日志中。它和其他服务器上的一致性模块进行通信来保证每一个服务器上的日志最终都以相同的顺序包含相同的请求，即使有些服务器发生故障。一旦指令被正确的复制，每一个服务器的状态机按照日志顺序处理他们，然后输出结果被返回给客户端。因此，服务器集群看起来形成了一个高可靠的状态机。</p>
<p>实际系统中使用的一致性算法主要有以下特性：</p>
<ul>
<li>安全性保证（绝对不会返回一个错误的结果）。</li>
<li>即使部分服务器失败，只要多数服务器运行，系统依然可用。</li>
<li>不依赖于时序，能够应对时钟错误和消息延迟。</li>
<li>大多数情况下，指令可以在一轮远程过程调用后完成，不受少数慢节点影响。</li>
</ul>
<h2 id="paxos的问题" class="heading-element"><span>3 Paxos的问题</span>
  <a href="#paxos%e7%9a%84%e9%97%ae%e9%a2%98" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ol>
<li>
<p>Paxos极其难以理解。</p>
</li>
<li>
<p>没有为构建实际系统实现提供良好的基础。</p>
</li>
</ol>
<h2 id="为了可理解性的设计" class="heading-element"><span>4 为了可理解性的设计</span>
  <a href="#%e4%b8%ba%e4%ba%86%e5%8f%af%e7%90%86%e8%a7%a3%e6%80%a7%e7%9a%84%e8%ae%be%e8%ae%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>设计Raft算法的初衷：</p>
<ol>
<li>
<p>必须提供一个完整的实际的系统实现基础，减少开发者工作量；</p>
</li>
<li>
<p>必须在任何情况下都是安全的并且在大多数的情况下都是可用的；</p>
</li>
<li>
<p>它的大部分操作必须是高效的；</p>
</li>
<li>
<p>可理解性，它必须保证对于普遍的人群都可以十分容易的去理解；</p>
</li>
<li>
<p>便于系统构建者形成直观理解，便于实际应用和扩展；</p>
</li>
</ol>
<p>Raft设计原则：</p>
<ol>
<li>
<p><strong>问题分解</strong>：将复杂问题拆解为独立、易于理解和解决的子问题。例如，Raft 的领导人选举、日志复制、安全性和成员变更。</p>
</li>
<li>
<p><strong>状态空间简化</strong>：减少状态数量，降低系统复杂性并在可能的时候消除不确定性。确保日志无空洞，限制日志不一致的可能性。</p>
</li>
<li>
<p><strong>随机化应用</strong>：在领导人选举中使用随机化，简化机制，快速解决冲突。</p>
</li>
</ol>
<h2 id="raft一致性算法" class="heading-element"><span>5 Raft一致性算法</span>
  <a href="#raft%e4%b8%80%e8%87%b4%e6%80%a7%e7%ae%97%e6%b3%95" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Raft 是一种管理复制日志的一致性算法，通过选举领导人并由其管理日志来实现一致性。领导人从客户端接收日志条目，把日志条目复制到其他服务器上，并告诉其他的服务器什么时候可以安全地将日志条目应用到他们的状态机中。这一决策过程无需与其他服务器进行商议，从而简化了整个复制日志的管理流程，并且数据都从领导人流向其他服务器。一个领导人可能会发生故障，或者和其他服务器失去连接，在这种情况下一个新的领导人会被选举出来。</p>
<p>Raft算法的一致性问题被巧妙地分解为三个关键子问题：</p>
<ul>
<li><strong>领导选举</strong>：当领导人发生故障的时候, 一个新的领导人需要被选举出来，确保系统的连续性和稳定性（5.2）</li>
<li><strong>日志复制</strong>：领导人必须从客户端接收日志条目然后复制到集群中的其他节点，并强制要求其他节点的日志和自己保持一致。</li>
<li><strong>安全性</strong>：Raft通过特定的机制（5.4）确保一旦日志条目被应用到某个服务器的状态机中，其他服务器不会在同一日志索引位置应用不同的指令，从而保障了系统状态的一致性和安全性。</li>
</ul>
<h3 id="raft基础" class="heading-element"><span>5.1 Raft基础</span>
  <a href="#raft%e5%9f%ba%e7%a1%80" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>一个 Raft 集群由若干个服务器节点构成，如常见的 5 节点配置，能容忍最多 2 个节点失效。节点有以下三种状态：</p>
<ul>
<li>
<p>领导人：唯一决策者，处理所有客户端请求，并且管理复制日志。</p>
</li>
<li>
<p>跟随者：被动角色，仅响应领导人和候选人的请求。</p>
</li>
<li>
<p>候选人：竞选状态，用于选举新领导人</p>
</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be4.jpeg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图4.jpeg?size=small" data-sub-html="<h2>server_state</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be4.jpeg" alt="server_state" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be4.jpeg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be4.jpeg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be4.jpeg?size=large 2x" data-title="server_state" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p><font color="red">跟随者在收不到消息时，升级为候选人，启动选举；获得多数票的候选人成为领导人；领导人宕机或发现任期过期，降级为跟随者。</font></p>
<p>Raft 通过任期来划分时间，每个任期都始于一次选举。任期用整数标记，每段任期有其选举过程。如果选举成功，选出的领导人将负责管理集群，直到该任期结束。任期在Raft中充当逻辑时钟的作用，帮助节点检测过期信息，如过期的领导人。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be5.jpeg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图5.jpeg?size=small" data-sub-html="<h2>Term_Figure</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be5.jpeg" alt="Term_Figure" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be5.jpeg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be5.jpeg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be5.jpeg?size=large 2x" data-title="Term_Figure" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>每个节点维护一个当前任期号，通信时交换任期号，节点自动更新至较大值，领导人或候选人如果发现任期号过期，会恢复为跟随者；节点拒绝过期任期请求。</p>
<p>在 Raft 算法中，节点间的通信依赖于RPC。基本的一致性算法主要使用两种类型的 RPCs：</p>
<ul>
<li>
<p><strong>请求投票RPC</strong>：候选人发起，用于选举。</p>
</li>
<li>
<p><strong>附加条目RPC</strong>：领导人发起，复制日志和提供心跳机制。</p>
</li>
<li>
<p><strong>安装快照PRC</strong>：领导人发起，安装快照。为了提高性能，服务器在未及时收到响应时会重试 RPC，并且能够并行发起 RPC。</p>
</li>
</ul>
<h3 id="领导人选举" class="heading-element"><span>5.2 领导人选举</span>
  <a href="#%e9%a2%86%e5%af%bc%e4%ba%ba%e9%80%89%e4%b8%be" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Raft 算法采用心跳机制来触发领导人选举过程。服务器启动时，<strong>默认处于跟随者状态</strong>，仅当接收到来自领导人或候选人的有效 RPC 时才保持这一状态。领导人定期向所有跟随者发送心跳包，即不含日志项的附加条目RPC，以此维护其领导地位。若跟随者<font color="red">在设定的选举超时时间内未收到任何消息</font>，它将假定无有效领导人并发起选举，以选出新的领导人。</p>
<p>选举流程开始时，跟随者增加自己的当前任期号并转换为候选人状态，然后向集群中其他服务器节点发送请求投票RPC来给自己投票。候选人保持该状态，直至出现以下三种情况之一：</p>
<ul>
<li>
<p>赢得选举。</p>
</li>
<li>
<p>其他服务器成为领导人。</p>
</li>
<li>
<p>在一定时间内无明确获胜者。</p>
</li>
</ul>
<p>赢得选举的条件是获得集群大多数服务器节点的选票，<font color="red">每台服务器对同一任期号的投票遵循先来先服务原则</font>，并有额外限制（5.4）以确保选举安全性，避免了脑裂（同一人气，集群出现两个领导人）。一旦当选，候选人即刻转变为领导人，通过发送心跳消息确立领导地位并阻止发起新选举。</p>
<p>在等待投票的过程中，候选人可能接收到领导人发送的附加条目RPC，如果该领导人任期号不低于候选人的任期号，候选人将认可其合法性，回归跟随者状态；反之，候选人将拒绝RPC，继续竞选。<font color="red">若多个候选人同时发起选举，选票分散可能导致无人胜出，所有候选人均会因超时而重新开始选举，但任期号会递增。</font></p>
<p>为防止选票分散，Raft算法引入了<font color="red">随机化选举超时时间策略</font>。各服务器在固定时间范围内（例如$[150,200]$）随机选取超时值，使得通常情况下仅有一台服务器超时，进而顺利赢得选举并在其他服务器超时前发送心跳。即使发生选票分散，随机化的超时机制也降低了下一轮选举中再次分散的可能性。</p>
<p>作者最初设计考虑过引入排名系统以决定优先级，但发现这可能导致高排名服务器故障时的可用性问题，且算法调整复杂，难以确保没有副作用。经过多次调整，最终确定随机重试方法更为直观易懂，且避免了排名系统带来的复杂性和潜在问题。</p>
<h3 id="日志复制" class="heading-element"><span>5.3 日志复制</span>
  <a href="#%e6%97%a5%e5%bf%97%e5%a4%8d%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>一旦选举产生领导人，它便开始处理客户端请求，每个请求携带一条被复制状态机执行的指令。领导人将此指令作为新日志条目追加至日志中，并并行发起附加条目RPC给其他服务器复制，日志条目在被安全复制后，领导人将其应用到状态机并将执行结果返回给客户端，即使面对跟随者崩溃、延迟或网络丢包，领导人也会持续重试RPC（<font color="red">尽管已经回复了客户端</font>）直至所有跟随者存储所有日志条目。</p>
<p>日志结构如图6所示，条目按序编号，包含创建时的任期号及待执行指令。日志条目在满足一定条件时变为可提交状态，即安全地应用到状态机中。<font color="red">领导人决定何时提交日志条目，Raft算法保证所有提交条目持久化并最终被执行</font>。日志条目在被复制到多数服务器时即被提交，包括前任领导人创建的条目。领导人追踪最大已提交条目索引，并在附加条目RPC中包含该索引，使跟随者同步应用已提交条目。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be6-20240719213332262.jpeg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图6-20240719213332262.jpeg?size=small" data-sub-html="<h2>https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图6-20240719213332262.jpeg</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be6-20240719213332262.jpeg" alt="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图6-20240719213332262.jpeg" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be6-20240719213332262.jpeg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be6-20240719213332262.jpeg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be6-20240719213332262.jpeg?size=large 2x" data-title="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图6-20240719213332262.jpeg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>Raft的日志机制维持不同服务器日志之间的高层次一致性，简化系统行为并增强可预测性，是安全性的重要组成部分。关键特性是<font color="red">若两日志条目索引和任期号相同，则它们存储相同指令，并且前序条目也相同。</font>。这是因为日志匹配特性，领导人最多在一个任期内特定索引创建日志条目，且日志条目位置固定不变。<font color="red">附加条目RPC包含前一条目的索引和任期号，若跟随者找不到匹配条目则拒绝，确保日志匹配特性</font>。</p>
<p>正常运行时，领导人与跟随者日志一致，但在领导人崩溃后可能出现不一致，如图7所示。领导人通过强制跟随者复制自己的日志解决不一致，覆盖冲突条目。领导人维护<code>nextIndex</code>记录每个跟随者下一个待发送条目索引，初始化为自身最后条目索引+1。<font color="red">当一致性检查失败，领导人就会减小<code>nextIndex</code>直至找到共同点，删除跟随者冲突条目并发送自身条目</font>。成功后，跟随者日志与领导人保持一直。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be7.jpeg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图7.jpeg?size=small" data-sub-html="<h2>https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图7.jpeg</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be7.jpeg" alt="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图7.jpeg" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be7.jpeg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be7.jpeg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be7.jpeg?size=large 2x" data-title="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图7.jpeg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<blockquote>
<p>算法可优化减少拒绝次数，跟随者可返回冲突条目任期号及对应最小索引，领导人据此一次性跳过冲突任期所有条目。但实践中，这种优化可能非必需，因不一致性罕见且涉及条目不多。</p>
</blockquote>
<p>通过日志复制机制，领导人无需特殊操作即可恢复一致性，只需执行常规流程，日志在响应一致性检查失败时自动对齐。领导人从不覆盖或删除自身日志，确保一致性。日志复制机制体现了高可用性、快速复制及对慢跟随者的容忍度。</p>
<h3 id="安全性" class="heading-element"><span>5.4 安全性</span>
  <a href="#%e5%ae%89%e5%85%a8%e6%80%a7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>在 Raft 算法中，尽管已经描述了领导人的选举和日志的复制过程，但这些机制本身并不足以保证所有状态机按照相同的顺序执行相同的指令。存在一种情况，即一个跟随者在领导人提交了若干日志条目后变得不可用，之后这个跟随者可能被选举为新的领导人，并可能覆盖这些已提交的日志条目，导致不同状态机可能执行不同的指令序列。</p>
<p>为了解决这个问题，Raft 算法在领导选举时增加了限制，确保任何给定任期的领导人都拥有之前任期的所有已提交的日志条目（即<strong>领导人完整特性</strong>）。这一限制简化了提交规则，并为复制状态机的正确行为提供了证明。</p>
<h4 id="选举限制" class="heading-element"><span>5.4.1 选举限制</span>
  <a href="#%e9%80%89%e4%b8%be%e9%99%90%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>在基于领导人的一致性算法中，领导人都必须存储所有已提交的日志条目。Raft 算法通过简单的方法确保新选举的领导人拥有之前任期中所有已提交的日志条目，避免了额外的日志传输机制和复杂性。</p>
<p>Raft 使用投票机制来阻止未包含所有已提交日志条目的候选人赢得选举。<font color="red">候选人必须获得集群中大多数节点的同意，这确保了所有已提交的日志条目至少存在于一个节点上</font>。如果候选人的日志至少和大多数的服务器节点一样新，那么他一定持有了所有已经提交的日志条目。请求投票RPC 实现了这样的限制：<font color="red">RPC 中包含了候选人的日志信息，然后投票人会拒绝掉那些日志没有自己新的投票请求</font>。</p>
<p>Raft通过比较日志中最后一条条目的任期号和索引来判断哪个日志更“新”。</p>
<ul>
<li>如果任期号不同，任期号更大的日志更“新”。</li>
<li>如果任期号相同，则条目更多（索引值更大）的日志更“新”。</li>
</ul>
<h4 id="提交之前任期内的日志条目" class="heading-element"><span>5.4.2 提交之前任期内的日志条目</span>
  <a href="#%e6%8f%90%e4%ba%a4%e4%b9%8b%e5%89%8d%e4%bb%bb%e6%9c%9f%e5%86%85%e7%9a%84%e6%97%a5%e5%bf%97%e6%9d%a1%e7%9b%ae" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>领导人在当前任期内创建的日志条目，当被复制到大多数服务器上时，则可认为是可提交的。如果一个领导人在提交日志条目之前崩溃了，未来后续的领导人会继续尝试复制这条日志记录。然而，<font color="red">对于之前任期中的日志条目，即使它们已经被复制到大多数服务器上，也不能简单地通过副本数量来确定它们是否已提交</font>，如图8所示。这是因为在领导人崩溃和重新选举的过程中，可能会出现新的领导人并不包含所有之前任期的日志条目，这可能导致已复制的日志被覆盖。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be8.jpeg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图8.jpeg?size=small" data-sub-html="<h2>https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图8.jpeg</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be8.jpeg" alt="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图8.jpeg" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be8.jpeg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be8.jpeg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be8.jpeg?size=large 2x" data-title="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图8.jpeg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>为了避免这种情况，<font color="red">Raft不会通过副本数目去提交一个之前任期内的日志条目，只有当前任期的日志条目才能通过复制到大多数服务器来提交</font>。一旦当前任期的日志条目被提交，根据日志匹配特性，之前任期的日志条目也会被间接的提交。</p>
<p><font color="red">Raft 在处理日志时保留了原始的任期号</font>，这虽然增加了提交规则的复杂性，但简化了日志的识别和管理。与其它算法不同，Raft 在复制之前任期日志不需要使用新的任期号，在提交前不用发送冗余的日志条目来重新编号，</p>
<h4 id="安全性论证" class="heading-element"><span>5.4.3 安全性论证</span>
  <a href="#%e5%ae%89%e5%85%a8%e6%80%a7%e8%ae%ba%e8%af%81" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>在 Raft 算法中，领导人完整性特性是确保一致性的关键。这一特性保证了在任期 T 的领导人提交的日志条目，必须被存储在未来任期的领导人日志中。</p>
<p>设任期U（&gt;T）的领导人U缺失该条目，如下图所示，在U的选举中，至少存在一个节点（如S3）同时持有T任期的日志并投票给U。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be9.jpeg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图9.jpeg?size=small" data-sub-html="<h2>https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图9.jpeg</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be9.jpeg" alt="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图9.jpeg" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be9.jpeg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be9.jpeg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be9.jpeg?size=large 2x" data-title="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图9.jpeg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<ul>
<li><strong>关键点</strong>：此节点在投票前接受T任期已提交日志，且在投票时仍保存该条目。</li>
<li><strong>矛盾一</strong>：此节点把自己选票投给领导人 U 时，<strong>说明领导人 U 的日志必须和投票者自己一样新</strong>。但假设U不包含T任期提交的日志。</li>
<li><strong>矛盾二</strong>：若U最后日志任期大于此节点，<strong>则前领导人必含提交日志，由日志匹配特性知U亦应含该日志</strong>，产生矛盾。</li>
</ul>
<p>故所有大于T任期的领导人必定包含T任期中所有已提交日志条目。<strong>日志匹配原则</strong>确保未来领导人同样包含间接提交的条目。<font color="red">领导人完整性特性支撑状态机安全特性，防止不同日志在相同索引值上被应用</font>。</p>
<h3 id="追随者和候选人崩溃" class="heading-element"><span>5.5 追随者和候选人崩溃</span>
  <a href="#%e8%bf%bd%e9%9a%8f%e8%80%85%e5%92%8c%e5%80%99%e9%80%89%e4%ba%ba%e5%b4%a9%e6%ba%83" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li><strong>崩溃影响</strong>：崩溃导致后续RPC失败，影响通信和一致性。</li>
<li><strong>处理机制</strong>：
<ul>
<li><strong>无限重试</strong>：系统通过持续重试RPC来处理这类失败。</li>
<li><strong>重启恢复</strong>：当崩溃服务器重启，未完成的RPC能够继续执行至成功。</li>
</ul>
</li>
<li><strong>RPC幂等性保障</strong>：<font color="red">指多次执行相同操作产生的效果等同于一次执行</font>，故重复执行RPC也不会引起不一致或错误状态。</li>
</ul>
<h3 id="时间和可用性" class="heading-element"><span>5.6 时间和可用性</span>
  <a href="#%e6%97%b6%e9%97%b4%e5%92%8c%e5%8f%af%e7%94%a8%e6%80%a7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Raft 算法的一个核心要求是安全性不应依赖于时间，即系统不应因为事件的快慢而产生错误的结果。然而，系统的可用性，即及时响应客户端的能力，不可避免地依赖于时间因素。特别是在领导人选举过程中，时间要求尤为关键。</p>
<p>关键的时间因素有：</p>
<ul>
<li><strong>广播时间 (Broadcast Time)</strong>：服务器向集群成员并行发送RPC并接收响应的平均时间。</li>
<li><strong>选举超时时间 (Election Timeout)</strong>：跟随者等待领导人心跳的最长时限，过期则发起选举。</li>
<li><strong>平均故障间隔时间 (Mean Time Between Failures, MTBF)</strong>：服务器两次故障之间的平均时间。</li>
</ul>
<p>Raft 要求满足以下时间不等式以保证系统正常运行：</p>
<p>$\text{Broadcast Time}\ll\text{Election Timeout}\ll\text{MTBF}$</p>
<p><font color="red">广播时间和平均故障间隔时间是由系统决定的，但是选举超时时间是我们自己选择的</font>。广播时间受存储技术影响，范围约为$[0.5,20]\text{ ms}$，选举超时时间基于广播时间设置，要比广播时间大几个数量级，一般在$[10,500]\text{ ms}$，而MTBF通常数月以上，远大于选举超时时间，满足系统稳定运行需求。</p>
<h2 id="集群成员变化" class="heading-element"><span>6 集群成员变化</span>
  <a href="#%e9%9b%86%e7%be%a4%e6%88%90%e5%91%98%e5%8f%98%e5%8c%96" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Raft 算法在设计时假设集群配置是固定的，但在实际应用中，集群配置需要动态调整，如替换宕机的机器或改变复制级别。直接更改集群配置存在风险，可能导致同一任期内两个领导人同时存在，因此需要一种安全的配置变更机制。为了确保配置变更的安全性，必须采用两阶段方法。在Raft中，集群切换到一个过渡配置，称为联合共识，结合了新旧配置：</p>
<ul>
<li>日志条目被复制给新旧配置的所有服务器。</li>
<li>新旧配置的服务器都可以成为领导人。</li>
<li>达成一致（选举和提交）需要分别在新旧配置上获得大多数支持。</li>
</ul>
<p><font color="red">联合共识允许独立的服务器在不影响安全性的前提下，在不同的时间进行配置转换过程</font>。此外，联合共识可以让集群在配置转换的过程中依然响应客户端的请求。配置变更过程如下图所示：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be11.jpeg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图11.jpeg?size=small" data-sub-html="<h2>https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图11.jpeg</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be11.jpeg" alt="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图11.jpeg" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be11.jpeg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be11.jpeg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be11.jpeg?size=large 2x" data-title="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图11.jpeg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<ol>
<li><strong>请求接收</strong>：领导人接收到从 $C_\text{old}$ 到 $C_\text{new}$ 的配置变更请求。</li>
<li><strong>联合共识日志条目</strong>：领导人创建 $C_\text{old,new}$ 配置条目并将其作为日志条目存储和复制。</li>
<li><strong>提交联合共识</strong>：一旦 $C_\text{old,new}$ 被提交，<font color="red">新旧配置都不能单方面做出决定</font>，只有拥有 $C_\text{old,new}$ 日志条目的服务器才能成为领导人。</li>
<li><strong>新配置日志条目</strong>：这个时候，领导人创建 $C_\text{new}$ 配置条目并复制给集群，最终在 $C_\text{new}$ 规则下提交，旧的配置变得无关紧要。</li>
</ol>
<h2 id="日志压缩" class="heading-element"><span>7 日志压缩</span>
  <a href="#%e6%97%a5%e5%bf%97%e5%8e%8b%e7%bc%a9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Raft 算法通过复制日志来维护一致性，但随着时间的推移，日志会不断增长，占用大量空间并影响性能。为了解决这个问题，Raft 使用<strong>快照技术</strong>压缩日志，通过存储系统状态至持久化存储，随后丢弃先前日志。</p>
<p>下图展示了快照的基本思想，<strong>每个服务器独立创建快照，只包含已提交的日志条目，主要的工作包括将状态机的状态写入快照中</strong>。Raft也包含一些少量元数据到快照中：最后索引和任期号。保留这些数据是为了支持一致性检查，允许服务器清除过期日志。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be12.jpeg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图12.jpeg?size=small" data-sub-html="<h2>https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图12.jpeg</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be12.jpeg" alt="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图12.jpeg" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be12.jpeg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be12.jpeg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-%e5%9b%be12.jpeg?size=large 2x" data-title="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/raft-图12.jpeg" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>领导人偶尔也需要通过安装快照RPC将快照分块发送给一些落后的追随者，追随者收到快照后，他必须自己决定对于已经存在的日志该如何处理，一般来说是覆盖冲突日志，保留后续未冲突日志。</p>
<p>在快照时，有两个性能相关的因素需要考虑：</p>
<ul>
<li><strong>创建时机</strong>：服务器需要决定何时创建快照，以避免频繁写入或存储空间耗尽。Raft 的策略是当日志大小达到一个阈值之后，就开始快照。</li>
<li><strong>写入时间</strong>：写入快照可能需要显著时间，为了不影响正常的操作，应通过写时复制技术避免影响正常操作。</li>
</ul>
<h2 id="客户端交互" class="heading-element"><span>8 客户端交互</span>
  <a href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e4%ba%a4%e4%ba%92" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Raft中的客户端发送所有请求给领导人。客户端初始化时随机选择服务器，非领导人服务器会拒绝客户端请求并提供最近接收到的领导人信息。如果领导人崩溃后，客户端请求超时，重启随机选择过程直至找到新领导人。</p>
<p>Raft目标是要实现线性化语义，由于Raft是可能同时执行同一条命令多次的，为了解决这个问题，<strong>客户端为每条指令分配唯一序列号，状态机跟踪每个客户端的最新序列号和相应响应。如果接收到的指令序列号已经被执行，状态机直接返回结果而不重新执行</strong>。</p>
<p>只读操作可以不写入日志直接处理。但不记录日志可能导致返回脏数据，即领导人在不知情的情况下被新领导人取代。线性化的读操作必须不能返回脏数据，Raft 需要使用两个额外的措施在不使用日志的情况下保证这一点。</p>
<ol>
<li>
<p><strong>最新提交日志信息</strong>：<font color="red">领导人需要知道任期内所有被提交的日志条目</font>。Raft 通过让领导人在任期开始时提交一个空白日志条目来实现。</p>
</li>
<li>
<p><strong>领导人状态检查</strong>：在处理只读请求前，领导人必须检查自己是否已被废黜。Raft 通过让领导人在响应只读请求前与集群大多数节点交换心跳信息来处理这个问题。</p>
</li>
</ol>
<h2 id="总结" class="heading-element"><span>9 总结</span>
  <a href="#%e6%80%bb%e7%bb%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Raft 是一种用于管理复制日志的一致性算法，旨在解决分布式系统中的一致性问题。它通过领导人选举、日志复制和安全性保证来实现系统的高可用性和一致性。</p>
<p><strong>Raft 的五大保证</strong>：</p>
<ol>
<li>
<p><strong>选举安全性</strong>：在任一给定任期内，最多只能有一个领导人被选举出来。</p>
</li>
<li>
<p><strong>领导人只追加</strong>：领导人不会覆盖或删除其日志中的条目；它只追加新的条目。</p>
</li>
<li>
<p><strong>日志匹配</strong>：如果两个日志在相同索引和任期号处含有相同的条目，则在该索引之前的所有条目都是相同的。</p>
</li>
<li>
<p><strong>领导人完整性</strong>：如果一个日志条目在给定任期被提交，那么该条目将出现在所有更高编号任期的领导人的日志中。</p>
</li>
<li>
<p><strong>状态机安全性</strong>：如果一个服务器将某个索引的日志条目应用到其状态机中，其他服务器不会对该索引应用不同的日志条目。</p>
</li>
</ol>
]]></description></item><item><title>【论文阅读笔记】DeepCAD: A Deep Generative Network for Computer-Aided Design Models</title><link>https://hezephyr.github.io/posts/05.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0deepcad/</link><pubDate>Wed, 17 Jul 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/05.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0deepcad/</guid><description><![CDATA[<h2 id="引言" class="heading-element"><span>1 引言</span>
  <a href="#%e5%bc%95%e8%a8%80" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>现有3D生成模型：</p>
<ul>
<li>
<p><strong>3D点云</strong>：大量离散的3D点组成的数据表示形式；</p>
</li>
<li>
<p><strong>多边形网格</strong>：一系列相连的多边形组成的3D模型；</p>
</li>
<li>
<p><strong>水平集场</strong>：使用数值函数来表示物体的边界，并根据函数值的正负来确定物体内部和外部的区域；</p>
</li>
</ul>
<p>仅能创建3D形状的离散表示，都缺少生成3D形状设计本质的能力—绘制过程。</p>
<p>作者提出了一个深度生成网络DeepCAD，能够输出CAD工具（如AutoCAD）中用于构建3D形状的操作序列，这是CAD模型的“绘制”过程。</p>
<p>这是CAD设计的生成模型的<strong>第一个工作</strong>，挑战在于<font color="red">CAD设计的顺序和参数化性质</font>。CAD模型由一系列几何操作（例如，曲线草图、拉伸、圆角、布尔、倒角）组成，每个操作由某些不规则的参数（<strong>离散或连续</strong>）控制。故以前开发的3D生成模型不适合CAD模型生成。</p>
<p>为了克服这些挑战，需要寻求一种能够协调CAD模型中的不规则性的表示，作者考虑最常用的CAD操作（命令），并将它们统一在一个公共结构中，该结构对其命令类型、参数和序列顺序进行编码，通过<font color="red">类比CAD命令序列和自然语言</font>，作者提出了一种<font color="red">基于Transformer网络的自编码器，它将CAD模型嵌入到潜在空间中，然后将潜在向量解码成CAD模型</font>。<a href="https://github.com/ChrisWu1997/DeepCAD"target="_blank" rel="external nofollow noopener noreferrer">【code】<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>为了训练这个自编码器，作者还创建了一个新的CAD命令序列数据集，以促进未来基于学习的CAD设计的研究。<a href="https://drive.google.com/drive/folders/1mSJBZjKC-Z5I7pLPTgb4b5ZP-Y6itvGG"target="_blank" rel="external nofollow noopener noreferrer">【dataset】<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>下图是DeepCAD的生成演示。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/DeepCAD_Generation" alt="image-20240708205521814" style="zoom:50%;" />
<h2 id="相关工作" class="heading-element"><span>2 相关工作</span>
  <a href="#%e7%9b%b8%e5%85%b3%e5%b7%a5%e4%bd%9c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li>
<p><strong>参数化形状推断</strong></p>
<p>深度学习的进步使得神经网络模型能够分析几何数据，推断出参数化形状。具体工作如下：</p>
<ul>
<li><strong>ParSeNet</strong>：将3D点云分解为一组参数化的表面补丁。</li>
<li><strong>PIE-NET</strong>：从3D点云中提取参数化的边界曲线。</li>
<li><strong>UV-Net 和 BrepNet</strong>：专注于编码参数化模型的边界曲线和表面。</li>
<li><strong>Li等人</strong>：训练了一种神经网络，在合成数据上将2D用户草图转换为CAD操作。</li>
<li><strong>Xu等人</strong>：应用神经引导搜索，从参数化实心形状中推断出CAD建模序列。</li>
</ul>
</li>
<li>
<p><strong>3D形状生成模型</strong></p>
<p>大多数现有方法生成离散形式的3D形状，如体素化形状、点云、多边形网格、隐式签名距离场。<font color="red">生成的形状可能存在噪声，缺乏锐利的几何特征，不便于用户编辑</font>。新方法使用神经网络模型生成3D形状作为一系列几何操作。</p>
<ul>
<li><strong>CSGNet</strong>：基于体素化形状输入推断CSG操作序列。</li>
<li><strong>UCSG-Net</strong>：无监督情况下推断CSG树。</li>
<li><strong>领域特定语言（DSLs）</strong>：通过DSLs合成3D形状，如ShapeAssembly。</li>
<li><strong>作者工作</strong>：<font color="red">自编码器网络输出一系列CAD操作指定的CAD模型</font>。CAD模型成为工业生产标准形状表示，可以直接<strong>导入CAD工具</strong>进行用户编辑，也可转换为<strong>点云和多边形网格</strong>。<font color="red">这是第一个直接生成CAD设计的生成模型</font>。</li>
</ul>
</li>
<li>
<p><strong>基于Transformer的模型</strong></p>
<p>Transformer网络作为基于注意力的构建模块，成功应用于自然语言处理、图像处理和其他类型数据。并行工作在约束的CAD草图生成上也依赖于Transformer网络。</p>
<p>与作者工作相关的还有DeepSVG-用于生成可缩放矢量图（SVG）图像的Transformer网络。SVG图像由参数化原语（如直线和曲线）描述，原语无特定顺序或依赖关系。</p>
<p>与SVG不同，<font color="red">CAD命令在3D中描述，可以是相互依赖的，必须遵循特定顺序</font>。所以需要寻求一种新的方法在基于Transformer的自编码器中编码CAD命令及其顺序。</p>
</li>
</ul>
<h2 id="方法" class="heading-element"><span>3 方法</span>
  <a href="#%e6%96%b9%e6%b3%95" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>DeepCAD围绕对CAD命令序列的新表示方法（3.1.2），这种CAD表示方法特别适合于输入到神经网络中。此外，这种表示法还引导出一个自然的训练目标函数（3.4）。为了训练DeepCAD，作者创建了一个新数据集，其规模远远大于同类数据集（3.3）。</p>
<h3 id="神经网络的cad表示" class="heading-element"><span>3.1 神经网络的CAD表示</span>
  <a href="#%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e7%9a%84cad%e8%a1%a8%e7%a4%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>CAD 模型提供了两个层次的表示。</p>
<ul>
<li>
<p>在用户交互层面，CAD 模型被描述为用户在 CAD 软件中创建实心形状时执行的一系列操作，例如用户在二维平面上绘制一个闭合曲线轮廓，然后将其拉伸成三维实心形状，再通过布尔运算等进行处理。我们将这种规范称为 <strong>CAD 命令序列</strong>。</p>
</li>
<li>
<p>在命令序列背后，是 <font color="red">CAD 模型的内核表示</font>，广为人知的是边界表示（B-rep）。给定一个命令序列，其 B-rep 会自动计算出来，通常通过行业标准库 Parasolid。它由拓扑组件及其连接组成，以形成一个实心形状。</p>
</li>
</ul>
<p>我们的目标是生成 CAD 命令序列的模型，而不是 B-rep。<font color="red">这是因为 B-rep 是命令序列的抽象：命令序列可以很容易地转换为 B-rep，但反之则很难，因为不同的命令序列可能会生成相同的 B-rep</font>。此外，命令序列是人类可理解的，便于编辑和应用于各种下游任务。</p>
<h4 id="cad命令的规范" class="heading-element"><span>3.1.1 CAD命令的规范</span>
  <a href="#cad%e5%91%bd%e4%bb%a4%e7%9a%84%e8%a7%84%e8%8c%83" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>CAD 工具支持丰富的命令集，作者仅考虑了一组常用的命令，这些命令分为两类：草图和拉伸。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/DeepCAD_Command_Type" alt="image-20240708205620579" style="zoom: 33%;" />
<p>尽管概念上简单，但它们足够表达生成各种形状。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/CAD_Construction_Process" alt="image-20240708205725122" style="zoom:50%;" />
<ul>
<li>
<p>草图命令用于在三维空间中的二维平面上指定闭合曲线，每个闭合曲线称为<strong>一个环</strong>，多个环形成一个闭合区域，称为<strong>轮廓</strong>。我们的表示方法中，一个轮廓由其边界上的环列表描述（如Figure 2中的“Sketch 1”）；<font color="red">一个环总是以指示命令开始，后跟一系列曲线命令。我们列出环上的所有曲线，并按逆时针顺序排列，开始点为最左下角的曲线</font>。实际中，我们考虑三种最常用的曲线命令：<strong>画直线、弧线和圆</strong>。这些命令占了我们大规模现实数据集中 <strong>92%</strong> 的比例。</p>
<p>每个曲线命令由其曲线类型（$t_i\in {\langle\text{SQL}\rangle,\text{L,A,R}}$）和参数（Table 1）描述，曲线参数指定了曲线在草图平面的局部参考框架中的二维位置。由于每个环中的曲线是一个接一个连接的，为了简洁，我们从参数列表中排除了曲线的起始位置；<font color="red">第一条曲线总是从草图平面的原点开始，原点的世界空间坐标在拉伸命令中指定</font>。简言之，一个草图轮廓由一个环列表描述（$S=[Q_1,\dots,Q_N]$），每个环$Q_i$由一系列从指示命令开始的曲线组成，例如$Q_i=[\langle\text{SQL}\rangle, C_1,\dots,C_{n_i}]$，每个曲线命令$C_j=(t_j,p_j)$指定曲线类型$t_j$及其形状参数$p_j$。</p>
</li>
<li>
<p>拉伸命令有两个目的。</p>
<ul>
<li>
<p>它将草图轮廓从二维平面拉伸成三维实体，拉伸类型可以是<strong>单向、对称或双向</strong>。</p>
</li>
<li>
<p>它通过布尔运算指定如何将新拉伸的三维实体与先前创建的形状合并：<strong>创建新实体，或者与现有实体连接、切割或相交</strong>。</p>
</li>
</ul>
<p>拉伸命令还需要定义草图平面的三维方向和其二维局部参考框架，这是通过旋转矩阵（Table 1中$(\theta,\gamma,\phi)$参数确定）定义的（<font color="red">为了跟平面局部参考系对齐，并将$z$轴与平面的法线方向对齐</font>）。命令参数包括一个拉伸轮廓的比例因子$s$。</p>
</li>
</ul>
<p>通过这些命令，我们将一个 CAD 模型$M$描述为交替出现的曲线命令和拉伸命令序列。换句话说$M=[C_1,\dots,C_{N_c}]$，其中每个$C_i=(c_i,p_i)$指定命令类型和参数。</p>
<h4 id="网络友好的表示" class="heading-element"><span>3.1.2 网络友好的表示</span>
  <a href="#%e7%bd%91%e7%bb%9c%e5%8f%8b%e5%a5%bd%e7%9a%84%e8%a1%a8%e7%a4%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>我们的 CAD 模型 M 的规范类似于自然语言，<font color="red">词汇表由一系列 CAD 命令组成，形成句子</font>。句子的主语是草图轮廓；谓语是拉伸。这种类比表明我们可以利用在自然语言处理中成功的网络结构（如 <strong>Transformer 网络</strong>，<font color="red">LLMs</font>）来实现我们的目标。</p>
<p>然而，CAD 命令在几个方面与自然语言不同。每个命令有不同数量的参数。在某些命令（例如拉伸）中，<font color="red">参数是连续值和离散值的混合</font>，参数值跨越不同范围。这些特性使得命令序列不适合直接用于神经网络。</p>
<p>为了克服这一挑战，我们对命令序列的维度进行<strong>正则化</strong>。</p>
<ul>
<li>
<p>首先，对于每个命令，其参数堆叠成一个 $16×1$ 的向量，其元素对应于Table 1中所有命令的集合参数（例如$p_i=[x,y,\alpha,f,r,\theta,\phi,\gamma,p_x,p_y,p_z,s,e_1,e_2,b,u]$）。<font color="red">每个命令的未使用参数设置为 -1</font>。</p>
</li>
<li>
<p>接着，我们<strong>固定</strong>每个 CAD 模型 $M$ 的命令总数 $N_c$，<font color="red">并通过添加空命令来填充 CAD 模型的命令序列</font>，直到序列长度达到 $N_c$。我们选择 $N_c = 60$，这是训练数据集中出现的最大命令序列长度。</p>
</li>
<li>
<p>此外，我们通过<font color="red">量化连续参数来统一连续和离散参数</font>。为此，我们将每个 CAD 模型规范化到一个 $2×2×2$ 的立方体内；我们还将<strong>每个草图轮廓规范化到其边界框内</strong>，并在拉伸命令中包括一个比例因子$s$来恢复规范化轮廓到其原始大小。这种规范化限制了连续参数的范围，使我们能够将其值量化为 $256$ 个级别，并使用 $8$ 位整数表示。结果是，所有命令参数都只有离散值集合。<font color="red">参数量化不仅是训练基于 Transformer 网络的常见实践，对于 CAD 模型来说，它对于提高生成质量尤为重要</font>。在 CAD 设计中，必须遵循某些几何关系，例如平行和垂直的草图线条。然而，如果生成模型直接生成连续参数，通过参数回归获得的值容易产生错误，破坏这些严格的关系。相反，参数量化使网络能够将参数“分类”到特定级别，从而更好地遵循学习到的几何关系。</p>
</li>
</ul>
<p>作者在 4.1 中通过消融研究实验证明对 CAD 命令表示选择的正确性。</p>
<h3 id="cad模型的自编码器" class="heading-element"><span>3.2 CAD模型的自编码器</span>
  <a href="#cad%e6%a8%a1%e5%9e%8b%e7%9a%84%e8%87%aa%e7%bc%96%e7%a0%81%e5%99%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>DeepCAD的网络架构如下：</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/DeepCAD_Network_Architecture" alt="image-20240708205823395" style="zoom:33%;" />
<p>一旦训练完成，网络的解码器部分将自然地作为 CAD 生成模型。我们的自编码器基于 Transformer 网络，受其在处理序列数据方面成功的启发。自编码器输入一个 CAD 命令序列$M = [C1,\dots , C_{N_c}]$，其中 $N_c$ 是固定数量。</p>
<p>首先，每个命令 $C_i$ 被分别投射到维度为 $d_E = 256$ 的连续嵌入空间。然后，将所有嵌入组合起来输入编码器 $E$，输出一个潜在向量 $z\in \mathbb{R}^{256}$。解码器以潜在向量 $z$ 作为输入，输出生成的 CAD 命令序列 $\hat{M}$。</p>
<ul>
<li>
<p>嵌入部分</p>
<p>与自然语言处理的方法类似，我们首先将每个命令 $C_i$ 投射到一个公共嵌入空间。然而，不同于自然语言中的词语，一个 CAD 命令 $C_i = (t_i, p_i)$ 有两个部分：命令类型 $t_i$ 和参数 $p_i$。因此，我们将 $C_i$ 的嵌入计算为三个嵌入的总和，即</p>
<p>$$
e(C_i) = e^\text{cmd}_i + e^{\text{param}}_i + e^\text{pos}_i\in \R^{d_E},
$$</p>
<ul>
<li>
<p>第一个嵌入 $e^{\text{cmd}}_i$ 表示<strong>命令类型 $t_i$</strong>，由 $e^\text{cmd}_i=W_\text{cmd} \delta_i^c$ 给出。这里 $W_\text{cmd}\in\R^{d_E\times 6}$ 是一个可学习矩阵，$\delta_i^c\in \R^6$ 是一个指示命令类型 $t_i$ 的独热向量。</p>
</li>
<li>
<p>第二个嵌入$e^{\text{param}}_i$ 考虑<strong>命令参数</strong>。每个命令有 $16$ 个参数，每个参数被量化为一个 $8$ 位整数。我们将这些整数转换为维度为 $2^8+1=257$ 的独热向量$\delta^p_{i,j}(j=1\dots16)$，<strong>并将所有独热向量堆叠成矩阵</strong>$\delta^p_i\in\R^{257\times16}$。然后使用另一个可学习矩阵 $W_\text{param}^b\in\R^{d_E\times 257}$ 单独嵌入每个参数，并通过线性层 $W_\text{param}^a\in\R^{d_E\times 16d_E}$组合这些单独的嵌入，即</p>
<p>$$
e^{\text{param}}_i=W_\text{param}^a\text{flat}(W_\text{param}^b\delta^p_i),
$$</p>
<p>其中$\text{flat}(\cdot)$将输入矩阵展平为向量</p>
</li>
<li>
<p>最后，位置嵌入 $e^\text{pos}_i$ 表示命令 $C_i$ <strong>在整个命令序列中的索引</strong>，由 $e^\text{pos}_i = W_\text{pos}\delta_i$ 定义，其中 $W_\text{pos}\delta_i\in\R^{d_E\times N_c}$ 是一个可学习矩阵，$\delta_i\in\R^{N_c}$ 是一个在索引 $i$ 处填充 $1$ 其他位置填充$0$的独热向量。</p>
</li>
</ul>
</li>
<li>
<p>编码器</p>
<p>编码器 $E$ 由四层 Transformer 块组成，<strong>每层有八个注意力头和 $512$ 的前馈维度</strong>。编码器将嵌入序列 $[e_1, \dots, e_{N_c}]$ 作为输入，输出向量 $[e&rsquo;_1,\dots, e&rsquo;_{N_c}]$，每个向量的维度为 $d_E = 256$。输出向量最终<font color="red">被平均</font>以生成一个 $d_E$ 维的潜在向量 $z$。</p>
</li>
<li>
<p>解码器</p>
<p>解码器 $D$ 也建立在 Transformer 块上，具有与编码器相同的超参数设置。它以学习到的常量嵌入为输入，同时关注潜在向量 $z$。最后一个 Transformer 块的输出被送入线性层，以预测 CAD 命令序列 $\hat{M} = [ \hat{C}_1,\dots, \hat{C}_{N_c}]$，包括每个命令的命令类型 $\hat{t}_i$ 和参数 $\hat{t}_i$。与自然语言处理中常用的自回归策略不同，我们采用<font color="red">前馈策略</font>，模型的预测可以分解为</p>
<p>$$
p(\hat{M}|z,\Theta)=\prod_{i=1}^{N_c}p(\hat{t}_i,\hat{p}_i|z,\Theta),
$$</p>
<p>其中$\Theta$表示解码器的网络参数。</p>
</li>
</ul>
<h3 id="cad数据集的创建" class="heading-element"><span>3.3 CAD数据集的创建</span>
  <a href="#cad%e6%95%b0%e6%8d%ae%e9%9b%86%e7%9a%84%e5%88%9b%e5%bb%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>现有数据集：</p>
<ul>
<li>
<p><strong>ABC数据集</strong>：虽包含百万级别的CAD设计，但这些设计采用B-rep格式，缺乏如何通过CAD操作构建设计的具体信息；</p>
</li>
<li>
<p><strong>Fusion 360 Gallery数据集</strong>：虽然提供了CAD设计及其构建指令序列，但规模仅有约8000个设计，不足以训练出泛化能力强大的生成模型。</p>
</li>
</ul>
<p>鉴于此，作者决定创建一个全新的、大规模的数据集，该数据集不仅数量庞大，还提供了CAD命令序列，旨在满足训练自动编码网络的需求，并为未来的研究提供资源。</p>
<p>新数据集构建过程始于ABC数据集：</p>
<ol>
<li>
<p>利用其中每个CAD模型链接至Onshape的原始设计。</p>
</li>
<li>
<p>接着，通过Onshape的FeatureScript语言（一种专门用于解析CAD操作与参数的领域特定语言），作者筛选出仅使用“草图”和“拉伸”操作的模型，舍弃了那些采用更复杂操作的模型。</p>
</li>
<li>
<p>对于符合条件的模型，作者编写了一段FeatureScript程序来提取其草图轮廓和拉伸操作，并将其转化为Table 1中列出的命令格式。</p>
</li>
</ol>
<p>最终，作者收集到了总计<strong>178,238</strong>个以CAD命令序列形式描述的CAD设计，这个数量级远超现有同类型数据集。数据集进一步被随机划分为90%的训练集、5%的验证集以及5%的测试集，以备训练和测试之用。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/DeepCAD_Dataset" alt="image-20240708210100248" style="zoom:33%;" />
<h3 id="训练和运行时生成" class="heading-element"><span>3.4 训练和运行时生成</span>
  <a href="#%e8%ae%ad%e7%bb%83%e5%92%8c%e8%bf%90%e8%a1%8c%e6%97%b6%e7%94%9f%e6%88%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><h4 id="训练阶段" class="heading-element"><span>3.4.1 训练阶段</span>
  <a href="#%e8%ae%ad%e7%bb%83%e9%98%b6%e6%ae%b5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>我们利用构建的数据集对自编码器网络进行训练，采用标准的交叉熵损失函数作为优化目标。具体而言，定义预测的CAD模型$\hat{M}$与真实模型$M$之间的损失函数为：</p>
<p>$$
\mathcal{L} = \sum_{i=1}^{N_c} \ell(\hat{t}_i,t_i) + \beta \sum_{i=1}^{N_c} \sum_{j=1}^{N_p} \ell(\hat{p}_{i,j},p_{i,j}),
$$</p>
<p>其中，$\mathcal{L}(·, ·)$表示标准的交叉熵损失，$N_p$每个命令的参数数量（在我们的示例中，$N_p = 16$），而$\beta$是一个权重项，用于平衡两项损失（在我们的示例中，$\beta = 2$）。值得注意的是，在真实的命令序列中，有些命令是空的（即填充命令$\langle \text{EOS} \rangle$），而有些命令参数未使用（标记为$-1$）。在这种情况下，这些元素对上述损失函数中的求和部分不做贡献。</p>
<p>训练过程中，我们使用<font color="red">Adam优化器</font>，初始学习率为$0.001$，并设置线性预热期为前$2000$步。所有Transformer模块的Dropout率设定为$0.1$，并在反向传播中应用梯度裁剪值为$1.0$。我们以批处理大小$512$对网络进行$1000$轮的训练。</p>
<h4 id="cad生成阶段" class="heading-element"><span>3.4.2 CAD生成阶段</span>
  <a href="#cad%e7%94%9f%e6%88%90%e9%98%b6%e6%ae%b5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>当自编码器训练完成后，我们可以使用一个$256$维的潜在向量$z$来表示一个CAD模型。为了自动生成CAD模型，我们运用latent-GAN技术于已学得的潜在空间上。生成器和判别器都是简单的多层感知机（MLP）网络，各自包含四层隐藏层，它们的训练采用带有梯度惩罚的Wasserstein-GAN策略。最后，生成CAD模型时，我们从多元高斯分布中采样一个随机向量，并将其输入GAN的生成器中。GAN的输出是一个潜在向量$z$，随后将其输入基于Transformer的解码器，从而生成CAD模型。</p>
<h2 id="实验" class="heading-element"><span>4 实验</span>
  <a href="#%e5%ae%9e%e9%aa%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>我们从两个角度评估我们的自编码器网络：<strong>CAD模型的自编码性能</strong>（4.1）和<strong>潜在空间形状生成</strong>（4.2）。我们还讨论了可以受益于CAD生成模型的潜在应用（4.3）。由于之前没有针对CAD设计的生成模型，因此无法<strong>直接进行比较</strong>。我们的目标是通过一系列消融实验理解模型在不同指标下的性能，并验证我们的算法选择。</p>
<h4 id="cad模型的自编码" class="heading-element"><span>4.0.3 CAD模型的自编码</span>
  <a href="#cad%e6%a8%a1%e5%9e%8b%e7%9a%84%e8%87%aa%e7%bc%96%e7%a0%81" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p><font color="red">自编码性能通常用于指示生成模型表达目标数据分布的程度</font>。我们使用自编码器网络对训练数据集中不存在的CAD模型$M$进行编码，然后将所得的潜在向量解码成CAD模型$\hat{M}$。通过比较$M$和$\hat{M}$的差异来评估自编码器的性能。</p>
<ul>
<li>
<p><strong>指标</strong></p>
<ul>
<li>
<p><strong>命令准确率</strong>（$\text{ACC}_{\text{cmd}}$）：衡量预测的CAD命令类型的正确性；</p>
<p>$$
\text{ACC}_{\text{cmd}}=\frac{1}{N_c} \sum_{t=1}^{N_c}\mathbb{I}[t_i=\hat{t_i}]
,
$$</p>
</li>
<li>
<p><strong>参数准确率</strong>（$\text{ACC}_\text{param}$）：衡量命令参数的正确性；</p>
<p>$$
\text{ACC}_\text{param} = \frac{1}{K} \sum_{i=1}^{N_c} \sum_{j=1}^{\left| \hat{p}_i \right|} \mathbb{I}[|p_{i,j} - \hat{p}_{i,j}| &lt; \eta]\mathbb{I}[t_i = \hat{t}_i],
$$</p>
<p>其中$K=\sum_{i=1}^{N_c}\mathbb{I}[t_i=\hat{t}_i]|p_i|$是所有正确恢复命令中的参数总数。注意$p_{i,j}$和$\hat{p}_{i,j}$都被量化为$8$位整数，选择$\eta$是作为考虑参数量化的容差阈值，在实践中，我们选择了$\eta=3$（256个级别）</p>
</li>
<li>
<p>此外，我们使用Chamfer距离（CD）来评估3D几何体的质量，通过均匀采样2000个点来计算参考形状和生成形状之间的CD。另外，我们还报告无效率，即无法转换为点云的输出CAD模型的百分比。</p>
</li>
</ul>
</li>
<li>
<p><strong>比较方法</strong></p>
<p>由于缺乏现有的CAD生成模型，我们比较了几种模型变体以验证我们的数据表示和训练策略。具体包括以下几种变体：Alt-Rel、Alt-Trans、Alt-ArcMid、Alt-Regr和Ours+Aug。每种变体在数据表示或训练策略上有所不同。</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Quantitative_evaluation_of_autoencoding" alt="image-20240708210209763" style="zoom: 50%;" />
<p>总体而言，Ours+Aug（即使用合成数据增强训练）<strong>表现最佳</strong>，表明<font color="red">随机组合数据可以提高网络的泛化能力</font>。Alt-ArcMid的性能与Ours相似，说明中点表示法是表示弧的可行替代方法。Alt-Trans在CD方面略逊于Ours。虽然Alt-Rel的参数准确率（ACCparam）高于Ours，但其CD分数较大且有时会出现无效拓扑，例如在Figure 4中第二行中的黄色模型有两个三角形环路相互相交，导致拓扑无效，这是由于预测曲线位置的误差累积导致的。Alt-Regr由于不量化连续参数，误差较大，可能破坏关键的几何关系，如平行边和垂直边，例如Figure 4中的第一行。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Comparison_of_autoencoding_results" alt="image-20240708210312512" style="zoom:33%;" />
<p>我们还验证了我们自编码器的泛化，在其他更小的数据集（来自Autodesk Fusion 360）上评估它表现出良好的泛化能力，实现了可比较的定量性能。</p>
<h3 id="形状生成" class="heading-element"><span>4.1 形状生成</span>
  <a href="#%e5%bd%a2%e7%8a%b6%e7%94%9f%e6%88%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>由于CAD设计没有现成的生成模型，我们选择将我们的模型与l-GAN进行比较，l-GAN是一种被广泛研究的点云三维形状生成模型。我们注意到，我们的目标并不是要显示出孰优孰劣，因为这两种生成模型有不同的应用领域。相反，我们证明了我们的模型即使在点云生成模型的度量下也能产生可比的形状质量。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Randomly_Generated_3D_Shapes" alt="image-20240708210552910" style="zoom: 33%;" />
<p>此外，如Figure 5所示，我们模型中的形状具有更清晰的几何细节，并且可以轻松地进行用户编辑(Figure 7)。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/User_Editing_Friendly" alt="image-20240708210641303" style="zoom: 50%;" />
<p>为了与点云生成模型进行定量比较，我们遵循l-GAN中使用的指标。这些度量标准用于衡量两组3D点云形状之间的差异，即真实形状集合$S$和生成形状集合$G$。</p>
<ul>
<li>
<p><strong>覆盖率（COV）</strong>：衡量$S$中的形状有多少可以很好地近似为G中的形状；</p>
</li>
<li>
<p><strong>最小匹配距离（MMD）</strong>：表示$S$和$G$中两个点云之间的最小匹配距离来衡量$G$的保真度；</p>
</li>
<li>
<p><strong>Jensen-Shannon散度(JSD)</strong>：衡量$S$和$G$的点云分布的相似性</p>
</li>
</ul>
<p>然后，我们将真实和生成的CAD模型转换为点云，并评估这些度量标准。结果如下：</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Shape_Generation_measured_under_point_cloud_metrics" alt="image-20240708210452316" style="zoom:50%;" />
<p>表明我们的方法在点云度量标准方面与l-GAN具有可比性的性能。然而，由于其参数化表示，CAD模型具有比点云更平滑的表面和更锐利的几何特征。</p>
<h3 id="未来应用" class="heading-element"><span>4.2 未来应用</span>
  <a href="#%e6%9c%aa%e6%9d%a5%e5%ba%94%e7%94%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ol>
<li>
<p>借助CAD生成模型，可以将点云（例如通过3D扫描获取的）重建为CAD模型，例如作者这里使用自编码器将CAD模型$M$编码为潜在向量$c$。然后，利用PointNet++编码器训练它将$M$的点云表示编码为相同的潜在向量$c$。在推断时，给定一个点云，我们使用PointNet++编码器将其映射到潜在向量，然后使用我们的自编码器解码为CAD模型。</p>
 <img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/2024-07-08-16-40-21-1720428018357.png" title="" alt="" data-align="center">
</li>
<li>
<p>生成的CAD模型可以直接导入CAD工具进行用户编辑。</p>
</li>
</ol>
<h2 id="总结" class="heading-element"><span>5 总结</span>
  <a href="#%e6%80%bb%e7%bb%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>作者提出了DeepCAD，第一个一个用于CAD设计的深度生成模型。几乎所有以前的3D生成模型都产生离散的3D形状，如体素、点云和网格。为此，作者还引入了一个大型CAD模型数据集，每个模型都表示为一个CAD命令序列。</p>
<p>在构建CAD生成模型的过程中，作者的方法存在以下几个主要限制：</p>
<ol>
<li>
<p><strong>曲线命令类型有限</strong>：目前，作者仅考虑了三种最常用的曲线命令类型（直线、弧线和圆）。然而，其他曲线命令也可以轻松添加，例如可以通过三个控制点以及起点来指定的三次贝塞尔曲线，其参数结构可以按照3.1中描述的方式进行。</p>
</li>
<li>
<p><strong>操作命令的局限性</strong>：虽然像旋转草图这样的操作可以类似于拉伸命令进行编码，但某些CAD操作（如倒角）作用于形状边界的部分，因此需要参考模型的B-rep（边界表示），而不仅仅是其他命令。<font color="red">将这些命令纳入生成模型仍需进一步研究</font>。</p>
</li>
<li>
<p><strong>拓扑有效性无法保证</strong>：并非每个CAD命令序列都能生成拓扑上有效的形状。作者的生成网络不能保证其输出的CAD序列的拓扑一致性。在实践中，生成的CAD命令序列很少失败，但随着命令序列变长，失败的可能性增加。</p>
 <img title="" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/2024-07-08-16-45-09-1720428305187.png" alt="" data-align="center" width="396"></li>
</ol>
]]></description></item><item><title>【论文阅读笔记】Attention Is All You Need</title><link>https://hezephyr.github.io/posts/04.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0transformer/</link><pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/04.%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0transformer/</guid><description><![CDATA[<h2 id="引言" class="heading-element"><span>1 引言</span>
  <a href="#%e5%bc%95%e8%a8%80" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>循环神经网络(RNN)，特别是长短期记忆和门控循环神经网络（<strong>编码器-解码器</strong>架构），已成为序列建模和转换问题（如语言建模和机器翻译）的先进方法，众多研究在不断推动其发展。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/RNN?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/RNN?size=small" data-sub-html="<h2>RNN做机器翻译</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/RNN" alt="RNN做机器翻译" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/RNN?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/RNN?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/RNN?size=large 2x" data-title="RNN做机器翻译" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>但RNN通常<font color="red">沿输入和输出序列的符号位置</font>进行计算，其固有的顺序性导致训练示例内难以并行化，在序列长度较长时，由于内存限制跨示例的批处理，这一问题更加突出。尽管近期通过一些技术改进了计算效率，<font color="red">但顺序计算的基本限制仍未改变</font>。</p>
<p>且RNN使用共享权值矩阵，在面临较长序列时，会有梯度消失的问题(也可以说是后面词的梯度会覆盖前面的梯度)。即使后序的LSTM和GRU对这一部分做了改进，但也无法完全解决该问题。</p>
<p><font color="red">注意力机制</font>已成为各种序列建模和转换模型的重要组成部分，能在不考虑输入或输出序列距离的情况下对依赖关系进行建模，但在大多数情况下与循环网络结合使用。</p>
<p>作者提出了 Transformer 模型，该模型摒弃了循环单元和卷积单元，完全依赖注意力机制来建立输入和输出之间的全局依赖关系，允许更多的并行化。</p>
<h2 id="背景" class="heading-element"><span>2 背景</span>
  <a href="#%e8%83%8c%e6%99%af" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p><font color="red">减少序列计算量和加速计算</font>是序列处理模型中的基本思想。ByteNet和ConvS2S通过使用卷积神经网络并行计算，计算量和序列中位置的距离相关。ConvS2S是线性关系，而ByteNet是对数关系，使得长距离关系学习困难。Transformer将这个过程减少到常数规模，尽管降低了有效分辨率，但<strong>多头注意力机制</strong>弥补了这一点。</p>
<p>自注意力机制（内部注意力机制）为<font color="red">序列的不同位置分配权重，并学习表示向量</font>，已在阅读理解、文本摘要等任务中表现出色。</p>
<p>端到端记忆网络通常基于循环注意力机制，已用于简单语言翻译等任务。而Transformer 是<font color="red">第一个完全依赖自注意力</font>来计算其输入和输出表示的转换模型。</p>
<h2 id="模型架构" class="heading-element"><span>3 模型架构</span>
  <a href="#%e6%a8%a1%e5%9e%8b%e6%9e%b6%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>Transformer中沿用了非常经典的编码器-解码器架构，编码器将输入的序列$(x_1,\dots,x_n)$转化成一个表示向量$\boldsymbol{z}=(z_1,\dots,z_n)$，而编码器依据向量$\boldsymbol{z}$逐步生成输出序列$(y_1,\dots,y_m)$，并且模型在每个步骤中都是<strong>自回归</strong>的，会将先前生成的符号作为生成下一个的额外输入，例如这一步要生成$y_t$，要将$(y_1,\dots,y_{t-1})$都拿到也作为输入。</p>
<p>同时Transformer模型在编码器和解码器中都使用堆叠自注意力机制和逐点全连接层，如下图的左半部分和右半部分所示。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Transformer_Architecture" alt="image-20240707194838925" style="zoom: 33%;" />
<h3 id="编码器堆叠和解码器堆叠" class="heading-element"><span>3.1 编码器堆叠和解码器堆叠</span>
  <a href="#%e7%bc%96%e7%a0%81%e5%99%a8%e5%a0%86%e5%8f%a0%e5%92%8c%e8%a7%a3%e7%a0%81%e5%99%a8%e5%a0%86%e5%8f%a0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>编码器由 $6$ 个相同的层堆叠而成。每个层包含两个子层：<font color="red">多头自注意力机制和逐位置全连接前馈神经网络</font>。每个子层都使用了残差连接，然后进行层规范化（<strong>防止模型过拟合</strong>）。假设每一层的输入是$x$，那么每一层的输出结果可以表示为：
$$
\text{LayerNorm}(x+\text{Sublayer(x)})
$$
其中</p>
<ul>
<li>$\text{SubLayer}$是当前子层本身实现的运算函数，比如注意力运算和全连接运算；</li>
<li>模型中的所有子层以及嵌入层的输出维度均为 $d_{\text{model}} = 512$（便于残差连接）。</li>
</ul>
<p>解码器同样由 6 个层组成。其结构与编码器类似，但多了一个<strong>对编码器输出进行关注的多头注意力子层</strong>。并且在<strong>自注意力子层中进行了修改</strong>，以防止信息左向流动。这种掩码机制，结合输出嵌入向量向后偏移一个位置，确保位置 $i$ 的预测仅依赖于位置小于 $i$ 的已知输出。</p>
<h3 id="注意力机制" class="heading-element"><span>3.2 注意力机制</span>
  <a href="#%e6%b3%a8%e6%84%8f%e5%8a%9b%e6%9c%ba%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>注意力机制就是对一系列的query和一系列的key-value对，我们需要确定对于每个query而言不同 value 的重要程度，而这个权重是根据 query 和key 的相关度计算得到的。</p>
<h4 id="缩放的点积注意力机制" class="heading-element"><span>3.2.1 缩放的点积注意力机制</span>
  <a href="#%e7%bc%a9%e6%94%be%e7%9a%84%e7%82%b9%e7%a7%af%e6%b3%a8%e6%84%8f%e5%8a%9b%e6%9c%ba%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>Transformer模型中使用的是缩放的点积注意力机制。在这种机制中，注意力计算涉及query和key的维度为  $d_k$ )，以及value的维度为 $d_v$ 。通过引入一个<strong>缩放因子</strong>$\sqrt{d_k}$，可以控制注意力分布的稳定性和计算效率。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Scaled_Dot_Product_Attention" alt="image-20240707205349089" style="zoom:33%;" />
<p>我们用向量化的方式可以将这种注意力机制的计算过程表示成：
$$
\text{Attention}(Q,K,V)=\text{softmax}(\frac{QK^T}{\sqrt{d_k}})V
$$
与传统的注意力机制相比，缩放的点积注意力计算速度更快。缩放参数用于调节注意力计算的规模，以确保对于不同大小的输入，注意力权重的计算结果都能保持在合理的范围内。特别是在$\text{softmax}$函数的应用中，由于指数函数的快速增长特性，<font color="red">缩放可以有效防止某些权重过大</font>，而其他权重接近零的情况，确保了计算结果的平稳性和有效性。</p>
<h4 id="多头注意力机制" class="heading-element"><span>3.2.2 多头注意力机制</span>
  <a href="#%e5%a4%9a%e5%a4%b4%e6%b3%a8%e6%84%8f%e5%8a%9b%e6%9c%ba%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><h4 id="heading" class="heading-element"><span>3.2.3 </span>
  <a href="#heading" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>Transformer采用了多头注意力机制，将query、key和value进行$h$次投影，然后对$h$个投影并行计算注意力，再将这些结果组合并线性投影生成最终的多头注意力输出。多头注意力使模型能够共同关注不同表示子空间和不同位置的信息。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Multi_Head_Attention" alt="image-20240707214205509" style="zoom:50%;" />
<p>多头注意力机制的计算公式为：
$$
\operatorname{MultiHead}(Q, K, V) = \text{Concat}(\text{head}_1, \ldots, \text{head}_h) W^O
$$
其中每个头的计算方式为：</p>
<p>$$
\text{head}_i = \text{Attention}(QW_i^Q, KW_i^K, VW_i^V)
$$
参数的维度如下：</p>
<ul>
<li>$( Q, K, V)$ 的输入维度为 $( d_{model} )$（通常为$512$）</li>
<li>$W_i^Q \in \mathbb{R}^{d_{model} \times d_k},  W_i^K \in \mathbb{R}^{d_{model} \times d_k}, W_i^V \in \mathbb{R}^{d_{model} \times d_v}, W^O \in \mathbb{R}^{hd_v \times d_{model}}$</li>
</ul>
<p>作者在Transformer中设置 $h = 8$  个头，每个头的维度为 $d_k = d_v = \frac{d_{model}}{h} = 64$。</p>
<h4 id="transformer中注意力机制的应用" class="heading-element"><span>3.2.4 Transformer中注意力机制的应用</span>
  <a href="#transformer%e4%b8%ad%e6%b3%a8%e6%84%8f%e5%8a%9b%e6%9c%ba%e5%88%b6%e7%9a%84%e5%ba%94%e7%94%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><ul>
<li>在解码器的“编码器-解码器注意力层”中，query 来自上一个解码器层，而 key 和值 value 来自编码器的输出。这使得解码器中的每个位置都可以参与到输入序列所有位置的注意力计算中。</li>
</ul>
<ol>
<li><strong>编码器-解码器注意力层</strong>： 在这一层中，query 来自上一个解码器，而记忆 key 和 value 来自编码器的输出。这使得解码器中的每个位置都可以关注输入序列中的所有位置。</li>
<li><strong>编码器中的自注意力层</strong>： 编码器包含自注意力层。在这种自注意力机制中，<font color="red">query, key 和 value 都来自同一位置，即编码器前一层的输出</font>。这样，编码器中的每个位置都可以关注编码器前一层中的所有位置，从而捕捉输入序列中不同位置之间的全局依赖关系。</li>
<li><strong>解码器中的自注意力层</strong>： 解码器中的自注意力层的key，value和query也是同源的。但为了保持自回归属性，防止序列中前面的内容被后面的内容所影响，解码器在自注意力计算中加入了掩码机制。具体来说，通过在缩放的点积注意力中，将$\operatorname{softmax}$输入中对应非法连接的值设置为$-\infin$，来屏蔽这些连接。</li>
</ol>
<h3 id="逐位置全连接前馈神经网络" class="heading-element"><span>3.3 逐位置全连接前馈神经网络</span>
  <a href="#%e9%80%90%e4%bd%8d%e7%bd%ae%e5%85%a8%e8%bf%9e%e6%8e%a5%e5%89%8d%e9%a6%88%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><h3 id="transformer中的逐位置全连接前馈神经网络" class="heading-element"><span>3.4 Transformer中的逐位置全连接前馈神经网络</span>
  <a href="#transformer%e4%b8%ad%e7%9a%84%e9%80%90%e4%bd%8d%e7%bd%ae%e5%85%a8%e8%bf%9e%e6%8e%a5%e5%89%8d%e9%a6%88%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>在Transformer中，逐位置全连接前馈神经网络用于增强模型对序列中每个位置信息的处理能力，这种网络结构包含两个线性变换层和$\operatorname{ReLU}$激活函数，用于每个位置独立地进行相同的操作。其数学表示如下：</p>
<p>$$
\text{FFN}(x) = \max(0, x W_1 + b_1) W_2 + b_2
$$</p>
<p>虽然不同位置的线性变换相同，但各层使用的参数不同。其中，$x$ 是输入向量，维度为 $d_{\text{model}} = 512$ ，而内层的维度为$d_{ff}=2048$，$W_1$ 和 $W_2$ 是两个线性变换的权重矩阵，$b_1$ 和 $b_2$ 是相应的偏置向量。这个结构类似于<code>kernel size</code>为1的卷积操作。</p>
<h3 id="嵌入和softmax" class="heading-element"><span>3.5 嵌入和Softmax</span>
  <a href="#%e5%b5%8c%e5%85%a5%e5%92%8csoftmax" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>和其他序列转换模型类似，Transformer 使用学习得到的嵌入将输入的token和输出的token转换为维度为 $ d_{\text{model}} $ 的向量。Transformer 还使用学习得到的线性变换和$\text{softmax}$函数将解码器的输出转换为预测的下一个token的概率。在Transformer中两个嵌入层和$\text{softmax}$之前的线性变换层之间共享相同的权重矩阵（<strong>减少模型的参数数量，降低过拟合的风险</strong>），同时在嵌入层中，我们将这些权重乘以  $\sqrt{d_{\text{model}}}$（<strong>缩放嵌入权重，防止梯度消失</strong>）。</p>
<h3 id="位置编码" class="heading-element"><span>3.6 位置编码</span>
  <a href="#%e4%bd%8d%e7%bd%ae%e7%bc%96%e7%a0%81" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>在Transformer模型中，由于没有循环和卷积单元，为了处理序列数据的位置信息，引入了位置编码。位置编码是为序列中的每个位置添加特定的向量表示，以便模型能够区分不同位置的token。在Transformer中的位置编码使用了sin函数和cos函数，这种方法不同于传统的学习得到的位置嵌入，而是采用固定的函数形式，即</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/test.image.latex-20240729215814533.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/test.image.latex-20240729215814533.png?size=small" data-sub-html="<h2>img</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/test.image.latex-20240729215814533.png" alt="img" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/test.image.latex-20240729215814533.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/test.image.latex-20240729215814533.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/test.image.latex-20240729215814533.png?size=large 2x" data-title="img" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>这里的$\text{pos}$表示位置而$i$表示维度，也就是对于位于$\text{pos}$位置的token的嵌入向量第$i$维加上这样一个值。</p>
<h2 id="为什么使用自注意力机制" class="heading-element"><span>4 为什么使用自注意力机制</span>
  <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bd%bf%e7%94%a8%e8%87%aa%e6%b3%a8%e6%84%8f%e5%8a%9b%e6%9c%ba%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>在处理序列数据时，长距离依赖关系的学习是一个关键挑战。论文中对比了使用自注意力、循环单元和卷积单元等不同模型结构时的计算量、时间复杂度和最大依赖路径长度。其中，最大依赖路径长度指的是任意两个输入输出位置之间信息传递的最长路径。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Maximum_Path_Lengths?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Maximum_Path_Lengths?size=small" data-sub-html="<h2>image-20240707224337637</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Maximum_Path_Lengths" alt="image-20240707224337637" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Maximum_Path_Lengths?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Maximum_Path_Lengths?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Maximum_Path_Lengths?size=large 2x" data-title="image-20240707224337637" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>在传统的循环神经网络（RNN）中，信息是逐步传递的，因此全局视角下，任意两个位置之间的最长信息传递路径往往是以序列长度 $n$ 为量级的。这种逐步传递导致了RNN在捕捉长距离依赖时可能面临的挑战，尤其是在处理长序列时效果不佳。</p>
<p>相比之下，<font color="red">Transformer利用自注意力机制直接将每个位置与所有其他位置进行关联，避免了逐步传递的过程</font>，使得任意两个位置之间的信息传递路径变得极为直接和高效。这种直接的路径传递方式使得Transformer能够更有效地捕捉到长距离的依赖关系，而不受序列长度的限制。</p>
<p>因此，Transformer凭借其独特的注意力机制，实现了“Attention is all you need”的理念，强调了在序列建模中注意力机制的重要性和效果。它不仅仅是一种模型结构的创新，更是在解决长距离依赖问题上的一次重大突破。Transformer的成功不仅在于其高效的信息传递路径，还在于其能够在更大范围内捕捉和利用序列中的关联信息，从而提升了序列建模任务的性能和效果。</p>
<h2 id="训练" class="heading-element"><span>5 训练</span>
  <a href="#%e8%ae%ad%e7%bb%83" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>在论文中，训练Transformer模型涉及到几个关键的优化和正则化策略。</p>
<h3 id="优化器" class="heading-element"><span>5.1 优化器</span>
  <a href="#%e4%bc%98%e5%8c%96%e5%99%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>模型的训练使用了Adam优化器，并采用了一种自适应的学习率。学习率 $\text{lr}$ 的计算方式如下所示：
<a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/lr_learn_compute?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/lr_learn_compute?size=small" data-sub-html="<h2>img</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/lr_learn_compute" alt="img" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/lr_learn_compute?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/lr_learn_compute?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/lr_learn_compute?size=large 2x" data-title="img" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>这种自适应学习率的设计有助于在训练初期快速提升学习率，以加速模型收敛，而在训练后期逐渐降低学习率，以更细致地调整模型参数，提升训练的稳定性和效果。</p>
<h3 id="正则化" class="heading-element"><span>5.2 正则化</span>
  <a href="#%e6%ad%a3%e5%88%99%e5%8c%96" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>Transformer模型采用了多种正则化方法，以提升泛化能力和训练稳定性：</p>
<ol>
<li>
<p><strong>残差连接</strong>：在每个子层之间都使用了残差连接，这种连接方式有助于减少梯度消失问题，并简化了模型的训练和优化过程。</p>
</li>
<li>
<p><strong>Dropout</strong>：在输入嵌入向量和位置编码相加后的层中使用了Dropout，选择的Dropout概率为0.1。Dropout通过随机地将部分神经元的输出置为零，有助于防止模型过拟合，并增强泛化能力。</p>
</li>
<li>
<p><strong>标签平滑处理</strong>：这是一种用于改善模型训练和提高评价指标（如BLEU分数）的技术。标签平滑处理通过将真实标签替换为一个分布更平滑的目标分布，从而减少模型对训练数据中特定标签的过度自信，提升泛化能力和性能评估的一致性。</p>
</li>
</ol>
]]></description></item><item><title>Shell 23道例题实战</title><link>https://hezephyr.github.io/posts/07.shell%E5%AE%9E%E6%88%98/</link><pubDate>Sun, 09 Jun 2024 09:39:47 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/07.shell%E5%AE%9E%E6%88%98/</guid><description><![CDATA[<h2 id="统计文件的行数" class="heading-element"><span>1 统计文件的行数</span>
  <a href="#%e7%bb%9f%e8%ae%a1%e6%96%87%e4%bb%b6%e7%9a%84%e8%a1%8c%e6%95%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>编写一个<code>shell</code>脚本以输出一个文本文件<code>nowcoder.txt</code>中的行数</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 方法1：使用 wc -l 和 awk</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 统计行数并使用 awk 提取第一个字段，即行数</span>
</span></span><span class="line"><span class="cl"><span class="nv">lines</span><span class="o">=</span><span class="k">$(</span>wc -l nowcoder.txt <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;使用 wc -l 和 awk：</span><span class="nv">$lines</span><span class="s2"> 行&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方法2：通过输入流传递文件内容给 wc -l</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 &lt; 操作符</span>
</span></span><span class="line"><span class="cl"><span class="nv">lines</span><span class="o">=</span><span class="k">$(</span>wc -l &lt; nowcoder.txt<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;通过输入流：</span><span class="nv">$lines</span><span class="s2"> 行&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方法3：使用 cat 和管道传递给 wc -l</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 cat 命令和管道</span>
</span></span><span class="line"><span class="cl"><span class="nv">lines</span><span class="o">=</span><span class="k">$(</span>cat nowcoder.txt <span class="p">|</span> wc -l<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;通过管道：</span><span class="nv">$lines</span><span class="s2"> 行&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方法4：使用 sed 统计行数</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 sed 的 -n &#39;$=&#39; 选项</span>
</span></span><span class="line"><span class="cl"><span class="nv">lines</span><span class="o">=</span><span class="k">$(</span>sed -n <span class="s1">&#39;$=&#39;</span> nowcoder.txt<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;使用 sed：</span><span class="nv">$lines</span><span class="s2"> 行&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="打印文件的最后5行" class="heading-element"><span>2 打印文件的最后5行</span>
  <a href="#%e6%89%93%e5%8d%b0%e6%96%87%e4%bb%b6%e7%9a%84%e6%9c%80%e5%90%8e5%e8%a1%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>查看日志的时候，经常会从文件的末尾往前查看，请你写一个<code>bash shell</code>脚本以输出一个文本文件<code>nowcoder.txt</code>中的最后5行。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 查看文件的前5行</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;前5行：&#34;</span>
</span></span><span class="line"><span class="cl">head -5 nowcoder.txt
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看文件的后5行</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;后5行：&#34;</span>
</span></span><span class="line"><span class="cl">tail -5 nowcoder.txt
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看文件的第5行到第20行</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;第5行到第20行：&#34;</span>
</span></span><span class="line"><span class="cl">sed -n <span class="s1">&#39;5,20p&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="输出-0-到-500-中-7-的倍数" class="heading-element"><span>3 输出 0 到 500 中 7 的倍数</span>
  <a href="#%e8%be%93%e5%87%ba-0-%e5%88%b0-500-%e4%b8%ad-7-%e7%9a%84%e5%80%8d%e6%95%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>写一个 <code>bash</code>脚本以输出数字 $0$ 到 $500$ 中 $7$ 的倍数$(0 7 14 21&hellip;)$的命令</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 方法1：使用 Bash 的扩展语法的 for 循环</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;方法1：使用 Bash 的扩展语法的 for 循环&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> item in <span class="o">{</span>0..500..7<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span> 
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$item</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;&#34;</span> <span class="c1"># 分隔行</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方法2：使用 seq 命令 </span>
</span></span><span class="line"><span class="cl"><span class="c1"># seq [选项]... 首部 增量 尾部</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;方法2：使用 seq 命令&#34;</span>
</span></span><span class="line"><span class="cl">seq <span class="m">0</span> <span class="m">7</span> <span class="m">500</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;&#34;</span> <span class="c1"># 分隔行</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方法3：使用 while 循环</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;方法3：使用 while 循环&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 初始化变量</span>
</span></span><span class="line"><span class="cl"><span class="nv">i</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 while 循环</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="o">[</span> <span class="nv">$i</span> -le <span class="m">500</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 输出当前的 7 的倍数</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$i</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 增加 7</span>
</span></span><span class="line"><span class="cl">    <span class="nv">i</span><span class="o">=</span><span class="k">$((</span>i <span class="o">+</span> <span class="m">7</span><span class="k">))</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="输出第5行的内容" class="heading-element"><span>4 输出第5行的内容</span>
  <a href="#%e8%be%93%e5%87%ba%e7%ac%ac5%e8%a1%8c%e7%9a%84%e5%86%85%e5%ae%b9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>编写一个<code>bash</code>脚本以输出一个文本文件<code>nowcoder.txt</code>中第$5$行的内容。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># head 命令拿到前五行，再通过通道，通过tail取出来最后一行，即第五行</span>
</span></span><span class="line"><span class="cl">head -n <span class="m">5</span> nowcoder.txt <span class="p">|</span> tail -n <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用sed 命令中的 p选项，打印第五行</span>
</span></span><span class="line"><span class="cl">sed -n 5p nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="打印空行的行号" class="heading-element"><span>5 打印空行的行号</span>
  <a href="#%e6%89%93%e5%8d%b0%e7%a9%ba%e8%a1%8c%e7%9a%84%e8%a1%8c%e5%8f%b7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>编写一个<code>shell</code>脚本以输出一个文本文件<code>nowcoder.txt</code>中空行的行号（空行可能连续，从1开始输出）</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 grep 命令匹配所有空行，并且输出匹配的行号。-n 选项表示输出匹配行的行号，&#39;^$&#39; 匹配空行。使用 cut 命令以 : 作为分隔符，提取每行的第一个字段，即行号。</span>
</span></span><span class="line"><span class="cl">grep -n <span class="s1">&#39;^$&#39;</span> nowcoder.txt <span class="p">|</span> cut -d<span class="s1">&#39;:&#39;</span> -f1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 awk 命令，NF 表示当前行的字段数，NR 表示当前行号。当字段数为0时，即当前行为空行，{ print NR } 输出当前行的行号。</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;NF == 0 { print NR }&#39;</span> nowcoder.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 sed 命令匹配所有空行，并输出匹配行的行号。-n 选项表示只输出指定的行，/^$/ 匹配空行，=表示输出匹配行的行号。</span>
</span></span><span class="line"><span class="cl">sed -n <span class="s1">&#39;/^$/=&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="去掉空行" class="heading-element"><span>6 去掉空行</span>
  <a href="#%e5%8e%bb%e6%8e%89%e7%a9%ba%e8%a1%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>写一个 <code>bash</code>脚本以去掉一个文本文件<code>nowcoder.txt</code>中的空行</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 grep 命令匹配所有非空行。-v 选项表示反转匹配，&#39;^$&#39; 匹配空行。</span>
</span></span><span class="line"><span class="cl">grep -v <span class="s1">&#39;^$&#39;</span> nowcoder.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 sed 命令删除匹配空行的行。/^$/ 匹配空行，d 命令删除匹配的行</span>
</span></span><span class="line"><span class="cl">sed <span class="s1">&#39;/^$/d&#39;</span> nowcoder.txt &gt; nowcoder_no_empty_lines.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 awk 命令，NF 表示字段数，NF 为真时表示非空行。</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;NF&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="打印字母数小于8的单词" class="heading-element"><span>7 打印字母数小于8的单词</span>
  <a href="#%e6%89%93%e5%8d%b0%e5%ad%97%e6%af%8d%e6%95%b0%e5%b0%8f%e4%ba%8e8%e7%9a%84%e5%8d%95%e8%af%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>写一个<code>bash</code>脚本以统计一个文本文件<code>nowcoder.txt</code>中字母数小于8的单词。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 awk 命令遍历每个单词，NF 表示当前行的单词数，length($i) 表示当前单词的字母数，如果字母数小于8，则打印当前单词。</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ for (i=1; i&lt;=NF; i++) if (length($i)&lt;8) print $i }&#39;</span> nowcoder.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 grep 命令匹配字母数小于8的单词。-o 选项表示只输出匹配的内容，\b 表示单词边界，\w\{1,7\} 匹配字母数在1到7之间的单词。</span>
</span></span><span class="line"><span class="cl">grep -o <span class="s1">&#39;\b\w\{1,7\}\b&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="统计所有进程占用内存百分比的和" class="heading-element"><span>8 统计所有进程占用内存百分比的和</span>
  <a href="#%e7%bb%9f%e8%ae%a1%e6%89%80%e6%9c%89%e8%bf%9b%e7%a8%8b%e5%8d%a0%e7%94%a8%e5%86%85%e5%ad%98%e7%99%be%e5%88%86%e6%af%94%e7%9a%84%e5%92%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设 <code>nowcoder.txt</code> 内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">USER</span>       <span class="n">PID</span> <span class="o">%</span><span class="n">CPU</span> <span class="o">%</span><span class="n">MEM</span>    <span class="n">VSZ</span>   <span class="n">RSS</span> <span class="n">TTY</span>      <span class="n">STAT</span> <span class="n">START</span>   <span class="n">TIME</span> <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>         <span class="mi">1</span>  <span class="mf">0.0</span>  <span class="mf">0.4</span>  <span class="mi">77744</span>  <span class="mi">8332</span> <span class="o">?</span>        <span class="n">Ss</span>    <span class="mi">2021</span>   <span class="mi">1</span><span class="o">:</span><span class="mi">15</span> <span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">init</span> <span class="n">noibrs</span> <span class="n">splash</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>         <span class="mi">2</span>  <span class="mf">0.0</span>  <span class="mf">0.0</span>      <span class="mi">0</span>     <span class="mi">0</span> <span class="o">?</span>        <span class="n">S</span>     <span class="mi">2021</span>   <span class="mi">0</span><span class="o">:</span><span class="mo">00</span> <span class="p">[</span><span class="n">kthreadd</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>         <span class="mi">4</span>  <span class="mf">0.0</span>  <span class="mf">0.0</span>      <span class="mi">0</span>     <span class="mi">0</span> <span class="o">?</span>        <span class="n">I</span><span class="o">&lt;</span>    <span class="mi">2021</span>   <span class="mi">0</span><span class="o">:</span><span class="mo">00</span> <span class="p">[</span><span class="n">kworker</span><span class="o">/</span><span class="mi">0</span><span class="o">:</span><span class="mi">0</span><span class="n">H</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">daemon</span>     <span class="mi">486</span>  <span class="mf">0.0</span>  <span class="mf">0.1</span>  <span class="mi">28340</span>  <span class="mi">2372</span> <span class="o">?</span>        <span class="n">Ss</span>    <span class="mi">2021</span>   <span class="mi">0</span><span class="o">:</span><span class="mo">00</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">atd</span> <span class="o">-</span><span class="n">f</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>       <span class="mi">586</span>  <span class="mf">0.0</span>  <span class="mf">0.3</span>  <span class="mi">72308</span>  <span class="mi">6244</span> <span class="o">?</span>        <span class="n">Ss</span>    <span class="mi">2021</span>   <span class="mi">0</span><span class="o">:</span><span class="mo">01</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">sshd</span> <span class="o">-</span><span class="n">D</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>     <span class="mi">12847</span>  <span class="mf">0.0</span>  <span class="mf">0.0</span>   <span class="mi">4528</span>    <span class="mi">68</span> <span class="o">?</span>        <span class="n">S</span><span class="o">&lt;</span>   <span class="n">Jan03</span>   <span class="mi">0</span><span class="o">:</span><span class="mi">13</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">atopacctd</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>     <span class="mi">16306</span>  <span class="mf">1.7</span>  <span class="mf">1.2</span> <span class="mi">151964</span> <span class="mi">26132</span> <span class="o">?</span>        <span class="n">S</span><span class="o">&lt;</span><span class="n">sl</span> <span class="n">Apr15</span> <span class="mi">512</span><span class="o">:</span><span class="mo">03</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">aegis</span><span class="o">/</span><span class="n">aegis_client</span><span class="o">/</span><span class="n">aegis_11_25</span><span class="o">/</span><span class="n">AliYunDun</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>     <span class="mi">24143</span>  <span class="mf">0.0</span>  <span class="mf">0.4</span>  <span class="mi">25608</span>  <span class="mi">8652</span> <span class="o">?</span>        <span class="n">S</span><span class="o">&lt;</span><span class="n">Ls</span> <span class="mo">00</span><span class="o">:</span><span class="mo">00</span>   <span class="mi">0</span><span class="o">:</span><span class="mo">03</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">atop</span> <span class="o">-</span><span class="n">R</span> <span class="o">-</span><span class="n">w</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">log</span><span class="o">/</span><span class="n">atop</span><span class="o">/</span><span class="n">atop_20220505</span> <span class="mi">600</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>     <span class="mi">24901</span>  <span class="mf">0.0</span>  <span class="mf">0.3</span> <span class="mi">107792</span>  <span class="mi">7008</span> <span class="o">?</span>        <span class="n">Ss</span>   <span class="mi">15</span><span class="o">:</span><span class="mi">37</span>   <span class="mi">0</span><span class="o">:</span><span class="mo">00</span> <span class="nl">sshd</span><span class="p">:</span> <span class="n">root</span><span class="err">@</span><span class="n">pts</span><span class="o">/</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>     <span class="mi">24903</span>  <span class="mf">0.0</span>  <span class="mf">0.3</span>  <span class="mi">76532</span>  <span class="mi">7580</span> <span class="o">?</span>        <span class="n">Ss</span>   <span class="mi">15</span><span class="o">:</span><span class="mi">37</span>   <span class="mi">0</span><span class="o">:</span><span class="mo">00</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">systemd</span><span class="o">/</span><span class="n">systemd</span> <span class="o">--</span><span class="n">user</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span>     <span class="mi">24904</span>  <span class="mf">0.0</span>  <span class="mf">0.1</span> <span class="mi">111520</span>  <span class="mi">2392</span> <span class="o">?</span>        <span class="n">S</span>    <span class="mi">15</span><span class="o">:</span><span class="mi">37</span>   <span class="mi">0</span><span class="o">:</span><span class="mo">00</span> <span class="p">(</span><span class="n">sd</span><span class="o">-</span><span class="n">pam</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>以上内容是通过<code>ps aux</code>命令输出到<code>nowcoder.txt</code>文件中的，请你写一个脚本计算一下所有进程占用内存大小的和。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用awk命令过滤到第一行并累加$4</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;BEGIN { sum=0 } NR &gt; 1 { sum+=$4 } END { print sum }&#39;</span> nowcoder.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用while循环读取，并用if跳过第一行，使用bc进行浮点数加法运算</span>
</span></span><span class="line"><span class="cl"><span class="nv">sum</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="nv">cnt</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="nb">read</span> -r line<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> <span class="nv">$cnt</span> -gt <span class="m">1</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nv">mem</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$line</span> <span class="p">|</span> awk <span class="s1">&#39;{ print $4 }&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">        <span class="nv">sum</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$sum</span><span class="s2">+</span><span class="nv">$mem</span><span class="s2">&#34;</span> <span class="p">|</span> bc<span class="k">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">    <span class="nv">cnt</span><span class="o">=</span><span class="k">$((</span>cnt+1<span class="k">))</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$sum</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">sum</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">tail -n +2 nowcoder.txt <span class="p">|</span> <span class="k">while</span> <span class="nb">read</span> -r line<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="nv">mem</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$line</span> <span class="p">|</span> awk <span class="s1">&#39;{ print $4 }&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">sum</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$sum</span><span class="s2">+</span><span class="nv">$mem</span><span class="s2">&#34;</span> <span class="p">|</span> bc<span class="k">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$sum</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$sum</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>Bash</code> 中，<font color="red">管道中的命令会在子 shell 中执行，因此变量修改不会影响主 shell 中的变量</font>。这就是为什么看到 <code>sum</code> 在循环内部被正确更新，但在循环外部仍然是初始值 <code>0</code>。</p>
</blockquote>
<h2 id="统计每个单词出现的个数" class="heading-element"><span>9 统计每个单词出现的个数</span>
  <a href="#%e7%bb%9f%e8%ae%a1%e6%af%8f%e4%b8%aa%e5%8d%95%e8%af%8d%e5%87%ba%e7%8e%b0%e7%9a%84%e4%b8%aa%e6%95%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>写一个<code>bash</code>脚本以统计一个文本文件<code>nowcoder.txt</code> 中每个单词出现的个数。</p>
<p>为了简单起见，你可以假设：
<code>nowcoder.txt</code>只包括小写字母和空格，每个单词只由小写字母组成，单词间由一个或多个空格字符分隔。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将空格转换为换行符，以便每个单词占一行</span>
</span></span><span class="line"><span class="cl">tr -s <span class="s1">&#39; &#39;</span> <span class="s1">&#39;\n&#39;</span> &lt;nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 对单词进行排序</span>
</span></span><span class="line"><span class="cl">	sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 统计每个单词的出现次数</span>
</span></span><span class="line"><span class="cl">	uniq -c <span class="p">|</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 调整输出格式为&#34;单词 词频&#34;</span>
</span></span><span class="line"><span class="cl">	awk <span class="s1">&#39;{ print $2, $1 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 按词频升序排序，-k2,2 意味着只使用第二列进行排序，表示按数值进行排序（默认情况按字典序排序）</span>
</span></span><span class="line"><span class="cl">	sort -k2,2n 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 awk 统计每个单词的出现次数</span>
</span></span><span class="line"><span class="cl"><span class="c1"># NF 表示当前行的字段数，即单词数</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用一个关联数组 cnt 存储每个单词出现的次数</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    for (i=1; i&lt;=NF; i++)  # 遍历当前行的每个单词
</span></span></span><span class="line"><span class="cl"><span class="s1">        cnt[$i] += 1        # 将单词加入关联数组 cnt，统计出现次数
</span></span></span><span class="line"><span class="cl"><span class="s1">}
</span></span></span><span class="line"><span class="cl"><span class="s1">END {
</span></span></span><span class="line"><span class="cl"><span class="s1">    for (x in cnt)           # 遍历关联数组 cnt
</span></span></span><span class="line"><span class="cl"><span class="s1">        print x, cnt[x]       # 输出单词和对应的出现次数
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span> nowcoder.txt <span class="p">|</span> sort -k2,2n</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="第二列是否有重复" class="heading-element"><span>10 第二列是否有重复</span>
  <a href="#%e7%ac%ac%e4%ba%8c%e5%88%97%e6%98%af%e5%90%a6%e6%9c%89%e9%87%8d%e5%a4%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>给定一个<code>nowcoder.txt</code>文件，其中有3列信息，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">20201001 python 99
</span></span><span class="line"><span class="cl">20201002 go 80
</span></span><span class="line"><span class="cl">20201002 c++ 88
</span></span><span class="line"><span class="cl">20201003 php 77
</span></span><span class="line"><span class="cl">20201001 go 88
</span></span><span class="line"><span class="cl">20201005 shell 89
</span></span><span class="line"><span class="cl">20201006 java 70
</span></span><span class="line"><span class="cl">20201008 c 100
</span></span><span class="line"><span class="cl">20201007 java 88
</span></span><span class="line"><span class="cl">20201006 go 97</span></span></code></pre></td></tr></table>
</div>
</div><p>编写一个<code>shell</code>脚本来检查文件第二列是否有重复，且有几个重复，并提取出重复的行的第二列信息（先按次数排序，如果次数相同，按照单词字母顺序排序），输入如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">2 java
</span></span><span class="line"><span class="cl">3 go</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">cat nowcoder.txt <span class="p">|</span> 
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $2 }&#39;</span> <span class="p">|</span> 
</span></span><span class="line"><span class="cl">sort <span class="p">|</span> uniq -c <span class="p">|</span> 
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $1, $2 }&#39;</span> <span class="p">|</span> <span class="c1"># 重新格式化输出</span>
</span></span><span class="line"><span class="cl">sort -k1,1n -k2,2 <span class="p">|</span> <span class="c1"># 按照出现次数和字母顺序排序</span>
</span></span><span class="line"><span class="cl">grep -v <span class="s1">&#39;1&#39;</span>	<span class="c1"># 过滤出现次数不为 1 的行</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="转置文件的内容" class="heading-element"><span>11 转置文件的内容</span>
  <a href="#%e8%bd%ac%e7%bd%ae%e6%96%87%e4%bb%b6%e7%9a%84%e5%86%85%e5%ae%b9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>写一个<code>bash</code>脚本来转置文本文件<code>nowcoder.txt</code>中的文件内容。
文件中每行列数相同，并且每个字段由空格分隔</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 读取文件并使用 awk 转置文件内容</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">{
</span></span></span><span class="line"><span class="cl"><span class="s1">    # 遍历当前行的每一个字段
</span></span></span><span class="line"><span class="cl"><span class="s1">    for (i = 1; i &lt;= NF; i++) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        a[NR, i] = $i  # 将每个字段存储在一个二维数组中，a[行号, 列号] = 值
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}
</span></span></span><span class="line"><span class="cl"><span class="s1">NF &gt; p { p = NF }  # 如果当前行的字段数大于 p，则更新 p 为当前行的字段数
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">END {
</span></span></span><span class="line"><span class="cl"><span class="s1">    # 遍历每一列（由最大字段数 p 确定）
</span></span></span><span class="line"><span class="cl"><span class="s1">    for (i = 1; i &lt;= p; i++) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        # 遍历每一行（由总行数 NR 确定）
</span></span></span><span class="line"><span class="cl"><span class="s1">        for (j = 1; j &lt;= NR; j++) {
</span></span></span><span class="line"><span class="cl"><span class="s1">            printf(&#34;%s%s&#34;, a[j,i], (j==NR ? &#34;&#34; : &#34; &#34;))  # 输出数组中对应的字段值，并在每个字段后添加空格，除非是最后一个字段
</span></span></span><span class="line"><span class="cl"><span class="s1">        }
</span></span></span><span class="line"><span class="cl"><span class="s1">        printf(&#34;\n&#34;)  # 每一列输出完之后换行
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="打印每一行出现的数字个数" class="heading-element"><span>12 打印每一行出现的数字个数</span>
  <a href="#%e6%89%93%e5%8d%b0%e6%af%8f%e4%b8%80%e8%a1%8c%e5%87%ba%e7%8e%b0%e7%9a%84%e6%95%b0%e5%ad%97%e4%b8%aa%e6%95%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>写一个<code>bash</code>脚本，统计一个文本文件<code>nowcoder.txt</code>中每一行出现的<code>1~5</code>数字的个数，并且计算一下整个文档中一共出现了几个<code>1~5</code>数字的总数。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 awk 读取文件并统计每行中包含的特定数字（1, 2, 3, 4, 5）的数量</span>
</span></span><span class="line"><span class="cl">awk -F <span class="s2">&#34;[1,2,3,4,5]&#34;</span> <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">BEGIN { 
</span></span></span><span class="line"><span class="cl"><span class="s1">    sum = 0  # 初始化 sum 变量，用于存储总和
</span></span></span><span class="line"><span class="cl"><span class="s1">} {
</span></span></span><span class="line"><span class="cl"><span class="s1">    # 打印当前行号 NR 以及当前行中包含的特定数字的数量 (NF - 1)
</span></span></span><span class="line"><span class="cl"><span class="s1">    print(&#34;line&#34; NR &#34; number: &#34; (NF - 1))
</span></span></span><span class="line"><span class="cl"><span class="s1">    
</span></span></span><span class="line"><span class="cl"><span class="s1">    # 将当前行中包含的特定数字的数量累加到 sum
</span></span></span><span class="line"><span class="cl"><span class="s1">    sum += (NF - 1)
</span></span></span><span class="line"><span class="cl"><span class="s1">} END {
</span></span></span><span class="line"><span class="cl"><span class="s1">    # 打印总和
</span></span></span><span class="line"><span class="cl"><span class="s1">    print(&#34;sum is &#34; sum)
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="去掉所有包含this的句子" class="heading-element"><span>13 去掉所有包含this的句子</span>
  <a href="#%e5%8e%bb%e6%8e%89%e6%89%80%e6%9c%89%e5%8c%85%e5%90%abthis%e7%9a%84%e5%8f%a5%e5%ad%90" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>编写一个<code>shell</code>脚本以实现如下功能：去掉输入中含有<code>this</code>的语句，把不含<code>this</code>的语句输出</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># -v 反转匹配</span>
</span></span><span class="line"><span class="cl">grep -v <span class="s2">&#34;this&#34;</span> nowcoder.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># sed 命令 -&gt; d 删除 -&gt; // 包含要搜索的字符串</span>
</span></span><span class="line"><span class="cl">sed <span class="s1">&#39;/this/d&#39;</span> nowcoder.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># awk 命令，$0为当前行的所有内容，!~ 是 awk 的模式匹配运算符，表示模式不匹配</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;$0!~/this/ {print $0}&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="求平均值" class="heading-element"><span>14 求平均值</span>
  <a href="#%e6%b1%82%e5%b9%b3%e5%9d%87%e5%80%bc" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>写一个<code>bash</code>脚本以实现一个需求，求输入的一个数组的平均值</p>
<p>第<code>1</code>行为输入的数组长度<code>N</code></p>
<p>第<code>2~N</code>行为数组的元素，如以下为:
数组长度为<code>4</code>，数组元素为<code>1 2 9 8</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;BEGIN {
</span></span></span><span class="line"><span class="cl"><span class="s1">    sum = 0
</span></span></span><span class="line"><span class="cl"><span class="s1">}{
</span></span></span><span class="line"><span class="cl"><span class="s1">    if (NR == 1) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        N = $1  # 将第一行的数字数量保存到变量 N 中
</span></span></span><span class="line"><span class="cl"><span class="s1">    } else {
</span></span></span><span class="line"><span class="cl"><span class="s1">        sum += $1  # 对随后的数字进行累加求和
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">} END {
</span></span></span><span class="line"><span class="cl"><span class="s1">    printf(&#34;%.3f&#34;, sum / N)  # 输出平均值，保留三位小数
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="去掉不需要的单词" class="heading-element"><span>15 去掉不需要的单词</span>
  <a href="#%e5%8e%bb%e6%8e%89%e4%b8%8d%e9%9c%80%e8%a6%81%e7%9a%84%e5%8d%95%e8%af%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>写一个<code>bash</code>脚本以实现一个需求，去掉输入中含有<code>B</code>和<code>b</code>的单词。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 sed -n 命令打印不包含 &#39;B&#39; 和 &#39;b&#39; 的行</span>
</span></span><span class="line"><span class="cl"><span class="c1"># /^[^bB]*$/ 表示匹配不包含 &#39;B&#39; 和 &#39;b&#39; 的行，^ 表示行开头，[^bB] 表示不包含 &#39;B&#39; 和 &#39;b&#39; 的任何字符，* 表示零次或多次重复，$ 表示行结尾</span>
</span></span><span class="line"><span class="cl">sed -n <span class="s1">&#39;/^[^bB]*$/p&#39;</span> nowcoder.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 grep -E -v 命令排除包含 &#39;B&#39; 和 &#39;b&#39; 的行</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -E 选项启用扩展的正则表达式，-v 选项表示反转匹配</span>
</span></span><span class="line"><span class="cl">grep -E -v <span class="s2">&#34;[bB]&#34;</span> nowcoder.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 awk 命令，遍历每个单词，如果不包含 &#39;B&#39; 和 &#39;b&#39;，则输出该单词</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    for (i = 1;i &lt;= NF; i++) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        if ($i !~ /b|B/) {  # 使用正则表达式匹配单词中不包含 &#39;</span>B<span class="s1">&#39; 和 &#39;</span>b<span class="s1">&#39; 的部分
</span></span></span><span class="line"><span class="cl"><span class="s1">            printf(&#34;%s &#34;, $i)  # 输出不包含 &#39;</span>B<span class="s1">&#39; 和 &#39;</span>b<span class="s1">&#39; 的单词
</span></span></span><span class="line"><span class="cl"><span class="s1">        }
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="判断输入的是否为ip地址" class="heading-element"><span>16 判断输入的是否为IP地址</span>
  <a href="#%e5%88%a4%e6%96%ad%e8%be%93%e5%85%a5%e7%9a%84%e6%98%af%e5%90%a6%e4%b8%baip%e5%9c%b0%e5%9d%80" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>写一个脚本统计文件<code>nowcoder.txt</code>中的每一行是否是正确的<code>IP</code>地址。</p>
<p>如果是正确的<code>IP</code>地址输出：<code>yes</code></p>
<p>如果是错误的<code>IP</code>地址，且是四段号码的话输出：<code>no</code>，否则的话输出：<code>error</code></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">awk -F <span class="s2">&#34;.&#34;</span> <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    flag = &#34;error&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    if (NF == 4) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        flag = &#34;yes&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">        for (i = 1; i &lt;= NF; i++) {
</span></span></span><span class="line"><span class="cl"><span class="s1">            if ($i &gt; 255) {
</span></span></span><span class="line"><span class="cl"><span class="s1">                flag = &#34;no&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s1">                break;
</span></span></span><span class="line"><span class="cl"><span class="s1">            }
</span></span></span><span class="line"><span class="cl"><span class="s1">        }
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">    printf(flag&#34;\n&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="将字段逆序输出文件的每行" class="heading-element"><span>17 将字段逆序输出文件的每行</span>
  <a href="#%e5%b0%86%e5%ad%97%e6%ae%b5%e9%80%86%e5%ba%8f%e8%be%93%e5%87%ba%e6%96%87%e4%bb%b6%e7%9a%84%e6%af%8f%e8%a1%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>编写一个<code>shell</code>脚本，将文件<code>nowcoder.txt</code>中每一行的字段逆序输出，其中字段之间使用英文冒号<code>:</code>相分隔。</p>
<p>假设<code>nowcoder.txt</code>内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false
</span></span><span class="line"><span class="cl">root:*:0:0:System Administrator:/var/root:/bin/sh</span></span></code></pre></td></tr></table>
</div>
</div><p>你的脚本应当输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">/usr/bin/false:/var/empty:Unprivileged User:-2:-2:*:nobody
</span></span><span class="line"><span class="cl">/bin/sh:/var/root:System Administrator:0:0:*:root</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">awk -F <span class="s2">&#34;:&#34;</span> <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    for (i = 1; i &lt;= NF; i++) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        temp[i] = $i
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">    for (i = NF; i &gt;= 1; i--) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        printf(&#34;%s%s&#34;, temp[i], (i == 1 ? &#34;\n&#34; : &#34;:&#34;))
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="域名进行计数排序处理" class="heading-element"><span>18 域名进行计数排序处理</span>
  <a href="#%e5%9f%9f%e5%90%8d%e8%bf%9b%e8%a1%8c%e8%ae%a1%e6%95%b0%e6%8e%92%e5%ba%8f%e5%a4%84%e7%90%86" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设有一些域名，存储在<code>nowcoder.txt</code>里，现在需要写一个<code>shell</code>脚本，将域名取出并根据域名进行计数排序处理（降序）。</p>
<p>假设<code>nowcoder.txt</code>内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">http://www.nowcoder.com/index.html
</span></span><span class="line"><span class="cl">http://www.nowcoder.com/1.html
</span></span><span class="line"><span class="cl">http://m.nowcoder.com/index.html</span></span></code></pre></td></tr></table>
</div>
</div><p>你的脚本应该输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">2 www.nowcoder.com
</span></span><span class="line"><span class="cl">1 m.nowcoder.com</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">awk -F <span class="s1">&#39;/&#39;</span> <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    print($3)
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">uniq -c <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort -r <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    print($1&#34; &#34;$2)
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="打印等腰三角形" class="heading-element"><span>19 打印等腰三角形</span>
  <a href="#%e6%89%93%e5%8d%b0%e7%ad%89%e8%85%b0%e4%b8%89%e8%a7%92%e5%bd%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>编写一个<code>shell</code>脚本，输入正整数<code>n</code>，打印边长为<code>n</code>的等腰三角形。</p>
<p>示例：</p>
<p>输入：<code>5</code></p>
<p>输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">    *
</span></span><span class="line"><span class="cl">   * *
</span></span><span class="line"><span class="cl">  * * *
</span></span><span class="line"><span class="cl"> * * * *
</span></span><span class="line"><span class="cl">* * * * *</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">read</span> n
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">((</span><span class="nv">i</span> <span class="o">=</span> 1<span class="p">;</span> i &lt;<span class="o">=</span> n<span class="p">;</span> i++<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">((</span><span class="nv">j</span> <span class="o">=</span> 1<span class="p">;</span> j &lt;<span class="o">=</span> n - i<span class="p">;</span> j++<span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span>
</span></span><span class="line"><span class="cl">        <span class="nb">printf</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">done</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">((</span><span class="nv">j</span> <span class="o">=</span> 1<span class="p">;</span> j &lt;<span class="o">=</span> i<span class="p">;</span> j++<span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">[[</span> <span class="nv">$j</span> -eq <span class="nv">$i</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">            <span class="nb">printf</span> <span class="s2">&#34;*&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="nb">printf</span> <span class="s2">&#34;* &#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">fi</span>
</span></span><span class="line"><span class="cl">    <span class="k">done</span>
</span></span><span class="line"><span class="cl">    <span class="nb">printf</span> <span class="s2">&#34;\n&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="打印只有一个数字的行" class="heading-element"><span>20 打印只有一个数字的行</span>
  <a href="#%e6%89%93%e5%8d%b0%e5%8f%aa%e6%9c%89%e4%b8%80%e4%b8%aa%e6%95%b0%e5%ad%97%e7%9a%84%e8%a1%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设有一个<code>nowcoder.txt</code>，编写脚本，打印只有一个数字的行。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">awk -F <span class="s2">&#34;[0-9]&#34;</span> <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    if (NF == 2) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        print($0)
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="格式化输出" class="heading-element"><span>21 格式化输出</span>
  <a href="#%e6%a0%bc%e5%bc%8f%e5%8c%96%e8%be%93%e5%87%ba" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>有一个文件<code>nowcoder.txt</code>，里面的每一行都是一个数字串，编写一个<code>shell</code>脚本对文件中每一行的数字串进行格式化：每$3$个数字加入一个逗号（,）。</p>
<p>例如：数字串为“123456789”，那么需要格式化为123,456,789。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用-F分割数字串</span>
</span></span><span class="line"><span class="cl">awk -F <span class="s2">&#34;&#34;</span> <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    for (i = 1; i &lt;= NF; i++) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        printf($i)
</span></span></span><span class="line"><span class="cl"><span class="s1">        if ((NF - i) % 3 == 0 &amp;&amp; i != NF) {
</span></span></span><span class="line"><span class="cl"><span class="s1">            printf(&#34;,&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">        }
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">    printf(&#34;\n&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="处理文本" class="heading-element"><span>22 处理文本</span>
  <a href="#%e5%a4%84%e7%90%86%e6%96%87%e6%9c%ac" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>有一个文本文件<code>nowcoder.txt</code>，假设内容格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">111:13443
</span></span><span class="line"><span class="cl">222:13211
</span></span><span class="line"><span class="cl">111:13643
</span></span><span class="line"><span class="cl">333:12341
</span></span><span class="line"><span class="cl">222:12123</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要编写一个<code>shell</code>脚本，按照以下的格式输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[111]
</span></span><span class="line"><span class="cl">13443
</span></span><span class="line"><span class="cl">13643
</span></span><span class="line"><span class="cl">[222]
</span></span><span class="line"><span class="cl">13211
</span></span><span class="line"><span class="cl">12123
</span></span><span class="line"><span class="cl">[333]
</span></span><span class="line"><span class="cl">12341</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">awk -F <span class="s2">&#34;:&#34;</span> <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    cnt[$1] = cnt[$1] $2 &#34;\n&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">} END {
</span></span></span><span class="line"><span class="cl"><span class="s1">    for (i in cnt) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        printf(&#34;[%s]\n%s&#34;, i, cnt[i])
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span> nowcoder.txt</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="nginx日志分析1-ip访问次数统计" class="heading-element"><span>23 Nginx日志分析1-IP访问次数统计</span>
  <a href="#nginx%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%901-ip%e8%ae%bf%e9%97%ae%e6%ac%a1%e6%95%b0%e7%bb%9f%e8%ae%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设 <code>Nginx</code> 的日志存储在 <code>nowcoder.txt</code> 里，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="mf">192.168.1.20</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">21</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.21</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">21</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">15</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /2/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.22</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">21</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">21</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /3/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.23</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">21</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">22</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.24</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">22</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">15</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /2/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.25</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">22</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">15</span><span class="o">:</span><span class="mi">26</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /3/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.20</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">08</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.21</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">09</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.22</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">10</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.22</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">10</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.20</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.21</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">15</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /2/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.22</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">15</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /3/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.25</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.24</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /2/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.25</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /3/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.20</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.21</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.22</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.22</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">15</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="mf">192.168.1.21</span> <span class="o">-</span> <span class="o">-</span> <span class="p">[</span><span class="mi">23</span><span class="o">/</span><span class="n">Apr</span><span class="o">/</span><span class="mi">2020</span><span class="o">:</span><span class="mi">20</span><span class="o">:</span><span class="mi">27</span><span class="o">:</span><span class="mi">49</span> <span class="o">+</span><span class="mi">0800</span><span class="p">]</span> <span class="s">&#34;GET /1/index.php HTTP/1.1&#34;</span> <span class="mi">404</span> <span class="mi">490</span> <span class="s">&#34;-&#34;</span> <span class="s">&#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要编写 Shell 脚本统计出 2020 年 4 月 23 号访问 IP 的对应次数，并且按照次数降序排序。你的脚本应该输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="mi">5</span> <span class="mf">192.168.1.22</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="mf">192.168.1.21</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span> <span class="mf">192.168.1.20</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="mf">192.168.1.25</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="mf">192.168.1.24</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 通过grep过滤，再统计排序</span>
</span></span><span class="line"><span class="cl">grep <span class="s2">&#34;23/Apr/2020&#34;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $1 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">uniq -c <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort -r <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $1, $2 }&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="nginx日志分析2-统计某个时间段的ip访问量" class="heading-element"><span>24 Nginx日志分析2-统计某个时间段的IP访问量</span>
  <a href="#nginx%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%902-%e7%bb%9f%e8%ae%a1%e6%9f%90%e4%b8%aa%e6%97%b6%e9%97%b4%e6%ae%b5%e7%9a%84ip%e8%ae%bf%e9%97%ae%e9%87%8f" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设 <code>Nginx</code> 的日志存储在 <code>nowcoder.txt</code> 里，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">192.168.1.20 - - [21/Apr/2020:14:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [21/Apr/2020:15:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [21/Apr/2020:21:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.23 - - [21/Apr/2020:22:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [22/Apr/2020:15:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [22/Apr/2020:15:26:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:08:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:09:20:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:14:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:15:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:15:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [23/Apr/2020:16:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:22:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:23:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要编写 <code>Shell</code> 脚本统计 2020年04月23日20点至23点去重后的 IP 访问量，你的脚本应该输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="mi">5</span></span></span></code></pre></td></tr></table>
</div>
</div><p>输出说明：2020年04月23日20点至23点，共有 192.168.1.24、192.168.1.25、192.168.1.20、192.168.1.21、192.168.1.22 共 5 个 IP 访问了。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">grep <span class="s2">&#34;23/Apr/2020:2[0-3]&#34;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $1 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">uniq <span class="p">|</span>
</span></span><span class="line"><span class="cl">wc -l</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="nginx日志分析3-统计访问3次以上的ip" class="heading-element"><span>25 nginx日志分析3-统计访问3次以上的IP</span>
  <a href="#nginx%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%903-%e7%bb%9f%e8%ae%a1%e8%ae%bf%e9%97%ae3%e6%ac%a1%e4%bb%a5%e4%b8%8a%e7%9a%84ip" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设<code>nginx</code>的日志我们存储在nowcoder.txt里，格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">192.168.1.20 - - [21/Apr/2020:14:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [21/Apr/2020:15:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [21/Apr/2020:21:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.23 - - [21/Apr/2020:22:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [22/Apr/2020:15:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [22/Apr/2020:15:26:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:08:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:09:20:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:14:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:15:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:15:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [23/Apr/2020:16:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:22:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:23:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要编写<code>shell</code>脚本统计访问3次以上的IP，你的脚本应该输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">6 192.168.1.22
</span></span><span class="line"><span class="cl">5 192.168.1.21
</span></span><span class="line"><span class="cl">4 192.168.1.20</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $1 }&#39;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">uniq -c <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort -r <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    if ($1 &gt; 3) {
</span></span></span><span class="line"><span class="cl"><span class="s1">        print $1, $2
</span></span></span><span class="line"><span class="cl"><span class="s1">    }
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="nginx日志分析4-查询某个ip的详细访问情况" class="heading-element"><span>26 Nginx日志分析4-查询某个IP的详细访问情况</span>
  <a href="#nginx%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%904-%e6%9f%a5%e8%af%a2%e6%9f%90%e4%b8%aaip%e7%9a%84%e8%af%a6%e7%bb%86%e8%ae%bf%e9%97%ae%e6%83%85%e5%86%b5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设<code>Nginx</code>的日志存储在<code>nowcoder.txt</code>里，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">192.168.1.20 - - [21/Apr/2020:14:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [21/Apr/2020:15:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [21/Apr/2020:21:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.23 - - [21/Apr/2020:22:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [22/Apr/2020:15:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [22/Apr/2020:15:26:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:08:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:09:20:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:14:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:15:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:15:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [23/Apr/2020:16:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:22:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:23:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要编写<code>shell</code>脚本查询192.168.1.22的详细访问次数情况，按访问频率降序排序。你的脚本应该输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="n">index</span><span class="p">.</span><span class="n">php</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="o">/</span><span class="mi">3</span><span class="o">/</span><span class="n">index</span><span class="p">.</span><span class="n">php</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">grep <span class="s2">&#34;192.168.1.22&#34;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $7 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">uniq -c <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort -r <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $1, $2 }&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="nginx日志分析5-统计爬虫抓取404的次数" class="heading-element"><span>27 nginx日志分析5-统计爬虫抓取404的次数</span>
  <a href="#nginx%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%905-%e7%bb%9f%e8%ae%a1%e7%88%ac%e8%99%ab%e6%8a%93%e5%8f%96404%e7%9a%84%e6%ac%a1%e6%95%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设<code>nginx</code>的日志存储在<code>nowcoder.txt</code>里，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">192.168.1.20 - - [21/Apr/2020:14:12:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 301 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [21/Apr/2020:15:00:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 500 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [21/Apr/2020:21:21:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.23 - - [21/Apr/2020:22:10:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [22/Apr/2020:15:00:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 200 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [22/Apr/2020:15:26:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:08:05:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:09:20:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 200 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:14:12:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 200 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:15:00:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:15:00:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:15:00:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 200 490 &#34;-&#34; &#34;Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 200 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 300 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 500 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:22:10:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:23:59:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要编写<code>shell</code>脚本统计百度爬虫抓取404的次数，你的脚本应该输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">2</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">grep <span class="s2">&#34;404&#34;</span> <span class="p">|</span> grep <span class="s2">&#34;www.baidu.com&#34;</span> <span class="p">|</span> wc -l</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="nginx日志分析6-统计每分钟的请求数" class="heading-element"><span>28 Nginx日志分析6-统计每分钟的请求数</span>
  <a href="#nginx%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%906-%e7%bb%9f%e8%ae%a1%e6%af%8f%e5%88%86%e9%92%9f%e7%9a%84%e8%af%b7%e6%b1%82%e6%95%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设<code>Nginx</code>的日志存储在nowcoder.txt里，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">192.168.1.20 - - [21/Apr/2020:14:12:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [21/Apr/2020:15:00:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [21/Apr/2020:21:21:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.23 - - [21/Apr/2020:22:10:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [22/Apr/2020:15:00:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [22/Apr/2020:15:26:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:08:05:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Baiduspider&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:09:20:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:10:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:14:12:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:15:00:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:15:00:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Baiduspider&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [23/Apr/2020:16:15:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.24 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /2/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.25 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /3/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.20 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:20:27:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.22 - - [23/Apr/2020:22:10:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;
</span></span><span class="line"><span class="cl">192.168.1.21 - - [23/Apr/2020:23:59:49 +0800] &#34;GET /1/index.php HTTP/1.1&#34; 404 490 &#34;-&#34; &#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:45.0) Gecko/20100101 Firefox/45.0&#34;</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要编写<code>Shell</code>脚本统计每分钟的请求数，并且按照请求数降序排序。你的脚本应该输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="mi">5</span> <span class="mi">20</span><span class="o">:</span><span class="mi">27</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="mi">15</span><span class="o">:</span><span class="mo">00</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="mi">22</span><span class="o">:</span><span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="mi">14</span><span class="o">:</span><span class="mi">12</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span> <span class="mi">10</span><span class="o">:</span><span class="mi">27</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="mi">23</span><span class="o">:</span><span class="mi">59</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="mi">21</span><span class="o">:</span><span class="mi">21</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="mi">16</span><span class="o">:</span><span class="mi">15</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="mi">15</span><span class="o">:</span><span class="mi">26</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="mi">09</span><span class="o">:</span><span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span> <span class="mi">08</span><span class="o">:</span><span class="mo">05</span></span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">awk -F <span class="s2">&#34;:&#34;</span> <span class="s1">&#39;{ print $2&#34;:&#34;$3 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">uniq -c <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort -r <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $1, $2 }&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="netstat练习1-查看各个状态的连接数" class="heading-element"><span>29 netstat练习1-查看各个状态的连接数</span>
  <a href="#netstat%e7%bb%83%e4%b9%a01-%e6%9f%a5%e7%9c%8b%e5%90%84%e4%b8%aa%e7%8a%b6%e6%80%81%e7%9a%84%e8%bf%9e%e6%8e%a5%e6%95%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设netstat命令运行的结果我们存储在nowcoder.txt里，格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Proto Recv-Q Send-Q Local Address           Foreign Address         State
</span></span><span class="line"><span class="cl">tcp        0      0 0.0.0.0:6160            0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41856     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49822     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49674     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:42316     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:44076     172.16.240.74:6379      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49656     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58248     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50108     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41944     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:35548     100.100.32.118:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:39024     100.100.45.106:443      TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41788     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58260     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41812     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41854     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58252     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49586     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41754     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50466     120.55.222.235:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:38514     100.100.142.5:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49832     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:52162     100.100.30.25:80        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50372     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50306     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49600     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41908     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:60292     100.100.142.1:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:37650     100.100.54.133:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41938     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49736     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41890     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">udp        0      0 127.0.0.1:323           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 0.0.0.0:45881           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 127.0.0.53:53           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 172.16.56.200:68        0.0.0.0:*
</span></span><span class="line"><span class="cl">udp6       0      0 ::1:323                 :::*
</span></span><span class="line"><span class="cl">raw6       0      0 :::58                   :::*                    7</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要编写shell脚本查看系统tcp连接中各个状态的连接数，并且按照连接数降序输出。你的脚本应该输出如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">ESTABLISHED 22
</span></span><span class="line"><span class="cl">TIME_WAIT 9
</span></span><span class="line"><span class="cl">LISTEN 3</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">grep <span class="s2">&#34;tcp&#34;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $6 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">uniq -c <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort -nr <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $2, $1 }&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="netstat练习2-查看和3306端口建立的连接" class="heading-element"><span>30 netstat练习2-查看和3306端口建立的连接</span>
  <a href="#netstat%e7%bb%83%e4%b9%a02-%e6%9f%a5%e7%9c%8b%e5%92%8c3306%e7%ab%af%e5%8f%a3%e5%bb%ba%e7%ab%8b%e7%9a%84%e8%bf%9e%e6%8e%a5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设netstat命令运行的结果我们存储在nowcoder.txt里，格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Proto Recv-Q Send-Q Local Address           Foreign Address         State
</span></span><span class="line"><span class="cl">tcp        0      0 0.0.0.0:6160            0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41856     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49822     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49674     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:42316     172.16.34.143:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:44076     172.16.240.74:6379      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49656     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58248     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50108     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41944     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:35548     100.100.32.118:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:39024     100.100.45.106:443      TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41788     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58260     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41812     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41854     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58252     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49586     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41754     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50466     120.55.222.235:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:38514     100.100.142.5:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49832     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:52162     100.100.30.25:80        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50372     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50306     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49600     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41908     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:60292     100.100.142.1:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:37650     100.100.54.133:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41938     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49736     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41890     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">udp        0      0 127.0.0.1:323           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 0.0.0.0:45881           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 127.0.0.53:53           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 172.16.56.200:68        0.0.0.0:*
</span></span><span class="line"><span class="cl">udp6       0      0 ::1:323                 :::*
</span></span><span class="line"><span class="cl">raw6       0      0 :::58                   :::*                    7</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要你查看和本机3306端口建立连接并且状态是<code>established</code>的所有IP，按照连接数降序排序。你的脚本应该输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">10 172.16.0.24
</span></span><span class="line"><span class="cl">9 172.16.34.144
</span></span><span class="line"><span class="cl">1 172.16.34.143</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">grep <span class="s2">&#34;tcp.*ESTABLISHED&#34;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $5 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk -F <span class="s2">&#34;:&#34;</span> <span class="s1">&#39;$2 == 3306 { print $1 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">uniq -c <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort -nr <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $1, $2 }&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="netstat练习3-输出每个ip的连接数" class="heading-element"><span>31 netstat练习3-输出每个IP的连接数</span>
  <a href="#netstat%e7%bb%83%e4%b9%a03-%e8%be%93%e5%87%ba%e6%af%8f%e4%b8%aaip%e7%9a%84%e8%bf%9e%e6%8e%a5%e6%95%b0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设<code>netstat</code>命令运行的结果我们存储在<code>nowcoder.txt</code>里，格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Proto Recv-Q Send-Q Local Address           Foreign Address         State
</span></span><span class="line"><span class="cl">tcp        0      0 0.0.0.0:6160            0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41856     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49822     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49674     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:42316     172.16.34.143:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:44076     172.16.240.74:6379      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49656     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58248     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50108     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41944     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:35548     100.100.32.118:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:39024     100.100.45.106:443      TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41788     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58260     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41812     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41854     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58252     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49586     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41754     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50466     120.55.222.235:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:38514     100.100.142.5:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49832     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:52162     100.100.30.25:80        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50372     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50306     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49600     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41908     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:60292     100.100.142.1:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:37650     100.100.54.133:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41938     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49736     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41890     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">udp        0      0 127.0.0.1:323           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 0.0.0.0:45881           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 127.0.0.53:53           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 172.16.56.200:68        0.0.0.0:*
</span></span><span class="line"><span class="cl">udp6       0      0 ::1:323                 :::*
</span></span><span class="line"><span class="cl">raw6       0      0 :::58                   :::*                    7</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要你输出每个IP的连接数，按照连接数降序排序。你的脚本应该输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">172.16.0.24 10
</span></span><span class="line"><span class="cl">172.16.34.144 9
</span></span><span class="line"><span class="cl">100.100.142.4 3
</span></span><span class="line"><span class="cl">0.0.0.0 3
</span></span><span class="line"><span class="cl">172.16.34.143 1
</span></span><span class="line"><span class="cl">172.16.240.74 1
</span></span><span class="line"><span class="cl">120.55.222.235 1
</span></span><span class="line"><span class="cl">100.100.54.133 1
</span></span><span class="line"><span class="cl">100.100.45.106 1
</span></span><span class="line"><span class="cl">100.100.32.118 1
</span></span><span class="line"><span class="cl">100.100.30.25 1
</span></span><span class="line"><span class="cl">100.100.142.5 1
</span></span><span class="line"><span class="cl">100.100.142.1 1</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">grep <span class="s2">&#34;tcp&#34;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $5 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk -F <span class="s2">&#34;:&#34;</span> <span class="s1">&#39;{ print $1 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">uniq -c <span class="p">|</span>
</span></span><span class="line"><span class="cl">sort -nr <span class="p">|</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{ print $2, $1 }&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="netstat练习4-输出和3306端口建立连接总的各个状态的数目" class="heading-element"><span>32 netstat练习4-输出和3306端口建立连接总的各个状态的数目</span>
  <a href="#netstat%e7%bb%83%e4%b9%a04-%e8%be%93%e5%87%ba%e5%92%8c3306%e7%ab%af%e5%8f%a3%e5%bb%ba%e7%ab%8b%e8%bf%9e%e6%8e%a5%e6%80%bb%e7%9a%84%e5%90%84%e4%b8%aa%e7%8a%b6%e6%80%81%e7%9a%84%e6%95%b0%e7%9b%ae" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设<code>netstat</code>命令运行的结果我们存储在<code>nowcoder.txt</code>里，格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">Proto Recv-Q Send-Q Local Address           Foreign Address         State
</span></span><span class="line"><span class="cl">tcp        0      0 0.0.0.0:6160            0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41856     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49822     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49674     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:42316     172.16.34.143:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:44076     172.16.240.74:6379      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49656     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58248     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50108     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41944     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:35548     100.100.32.118:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:39024     100.100.45.106:443      TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41788     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58260     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41812     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41854     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:58252     100.100.142.4:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49586     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41754     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50466     120.55.222.235:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:38514     100.100.142.5:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49832     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:52162     100.100.30.25:80        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50372     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:50306     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49600     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41908     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:60292     100.100.142.1:80        TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:37650     100.100.54.133:80       TIME_WAIT
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41938     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:49736     172.16.0.24:3306        ESTABLISHED
</span></span><span class="line"><span class="cl">tcp        0      0 172.16.56.200:41890     172.16.34.144:3306      ESTABLISHED
</span></span><span class="line"><span class="cl">udp        0      0 127.0.0.1:323           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 0.0.0.0:45881           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 127.0.0.53:53           0.0.0.0:*
</span></span><span class="line"><span class="cl">udp        0      0 172.16.56.200:68        0.0.0.0:*
</span></span><span class="line"><span class="cl">udp6       0      0 ::1:323                 :::*
</span></span><span class="line"><span class="cl">raw6       0      0 :::58                   :::*                    7</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要你输出和本机3306端口建立连接的各个状态的数目，按照以下格式输出
<code>TOTAL_IP</code>表示建立连接的ip数目</p>
<p><code>TOTAL_LINK</code>表示建立连接的总数目</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">TOTAL_IP 3
</span></span><span class="line"><span class="cl">ESTABLISHED 20
</span></span><span class="line"><span class="cl">TOTAL_LINK 20</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 统计包含3306且协议为tcp的总IP数量</span>
</span></span><span class="line"><span class="cl"><span class="nv">TOTAL_IP</span><span class="o">=</span><span class="k">$(</span>grep <span class="s2">&#34;tcp&#34;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">	awk <span class="s1">&#39;{ print $5 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">	awk -F: <span class="s1">&#39;$2 == 3306 {print $1, $2 }&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">	sort <span class="p">|</span>
</span></span><span class="line"><span class="cl">	uniq <span class="p">|</span>
</span></span><span class="line"><span class="cl">	wc -l<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;TOTAL_IP </span><span class="nv">$TOTAL_IP</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 统计包含3306且状态为ESTABLISHED且协议为tcp的数量</span>
</span></span><span class="line"><span class="cl"><span class="nv">ESTABLISHED</span><span class="o">=</span><span class="k">$(</span>awk <span class="s1">&#39;/3306/ { if ($6 == &#34;ESTABLISHED&#34; &amp;&amp; $1 == &#34;tcp&#34;) print $5 }&#39;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">	wc -l<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;ESTABLISHED </span><span class="nv">$ESTABLISHED</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 统计包含3306且协议为tcp的连接数量</span>
</span></span><span class="line"><span class="cl"><span class="nv">TOTAL_LINK</span><span class="o">=</span><span class="k">$(</span>awk <span class="s1">&#39;/3306/ { if ($1 == &#34;tcp&#34;) print $5 }&#39;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">	wc -l<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;TOTAL_LINK </span><span class="nv">$TOTAL_LINK</span><span class="s2">&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="业务分析-提取值" class="heading-element"><span>33 业务分析-提取值</span>
  <a href="#%e4%b8%9a%e5%8a%a1%e5%88%86%e6%9e%90-%e6%8f%90%e5%8f%96%e5%80%bc" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设我们的日志<code>nowcoder.txt</code>里，内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">12-May-2017 10:02:22.789 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:Apache Tomcat/8.5.15
</span></span><span class="line"><span class="cl">12-May-2017 10:02:22.813 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:May 5 2017 11:03:04 UTC
</span></span><span class="line"><span class="cl">12-May-2017 10:02:22.813 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:8.5.15.0
</span></span><span class="line"><span class="cl">12-May-2017 10:02:22.814 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:Windows, OS Version:10
</span></span><span class="line"><span class="cl">12-May-2017 10:02:22.814 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:x86_64</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要你提取出对应的值，输出内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">serverVersion:Apache Tomcat/8.5.15
</span></span><span class="line"><span class="cl">serverName:8.5.15.0
</span></span><span class="line"><span class="cl">osName:Windows
</span></span><span class="line"><span class="cl">osVersion:10</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">grep -o <span class="s2">&#34;Server version:.*&#34;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">	awk -F <span class="s2">&#34;:&#34;</span> <span class="s1">&#39;{print &#34;serverVersion:&#34; $2}&#39;</span>
</span></span><span class="line"><span class="cl">grep -o <span class="s2">&#34;Server number:.*&#34;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">	awk -F <span class="s2">&#34;:&#34;</span> <span class="s1">&#39;{print &#34;serverName:&#34; $2}&#39;</span>
</span></span><span class="line"><span class="cl">grep -o <span class="s2">&#34;OS Name:.*&#34;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">	awk -F <span class="s2">&#34;[:,]&#34;</span> <span class="s1">&#39;{print &#34;osName:&#34; $2}&#39;</span>
</span></span><span class="line"><span class="cl">grep -o <span class="s2">&#34;OS Version:.*&#34;</span> nowcoder.txt <span class="p">|</span>
</span></span><span class="line"><span class="cl">	awk -F <span class="s2">&#34;:&#34;</span> <span class="s1">&#39;{print &#34;osVersion:&#34; $2}&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ps分析-统计vszrss各自总和" class="heading-element"><span>34 ps分析-统计VSZ,RSS各自总和</span>
  <a href="#ps%e5%88%86%e6%9e%90-%e7%bb%9f%e8%ae%a1vszrss%e5%90%84%e8%87%aa%e6%80%bb%e5%92%8c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><blockquote>
<p>假设命令运行的结果我们存储在<code>nowcoder.txt</code>里，格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
</span></span><span class="line"><span class="cl">root         1  0.0  0.1  37344  4604 ?        Ss    2020   2:13 /sbin/init
</span></span><span class="line"><span class="cl">root       231  0.0  1.5 166576 62740 ?        Ss    2020  15:15 /lib/systemd/systemd-journald
</span></span><span class="line"><span class="cl">root       237  0.0  0.0      0     0 ?        S&lt;    2020   2:06 [kworker/0:1H]
</span></span><span class="line"><span class="cl">root       259  0.0  0.0  45004  3416 ?        Ss    2020   0:25 /lib/systemd/systemd-udevd
</span></span><span class="line"><span class="cl">root       476  0.0  0.0      0     0 ?        S&lt;    2020   0:00 [edac-poller]
</span></span><span class="line"><span class="cl">root       588  0.0  0.0 276244  2072 ?        Ssl   2020   9:49 /usr/lib/accountsservice/accounts-daemon
</span></span><span class="line"><span class="cl">message+   592  0.0  0.0  42904  3032 ?        Ss    2020   0:01 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
</span></span><span class="line"><span class="cl">root       636  0.0  0.0  65532  3200 ?        Ss    2020   1:51 /usr/sbin/sshd -D
</span></span><span class="line"><span class="cl">daemon     637  0.0  0.0  26044  2076 ?        Ss    2020   0:00 /usr/sbin/atd -f
</span></span><span class="line"><span class="cl">root       639  0.0  0.0  29476  2696 ?        Ss    2020   3:29 /usr/sbin/cron -f
</span></span><span class="line"><span class="cl">root       643  0.0  0.0  20748  1992 ?        Ss    2020   0:26 /lib/systemd/systemd-logind
</span></span><span class="line"><span class="cl">syslog     645  0.0  0.0 260636  3024 ?        Ssl   2020   3:17 /usr/sbin/rsyslogd -n
</span></span><span class="line"><span class="cl">root       686  0.0  0.0 773124  2836 ?        Ssl   2020  26:45 /usr/sbin/nscd
</span></span><span class="line"><span class="cl">root       690  0.0  0.0  19472   252 ?        Ss    2020  14:39 /usr/sbin/irqbalance --pid=/var/run/irqbalance.pid
</span></span><span class="line"><span class="cl">ntp        692  0.0  0.0  98204   776 ?        Ss    2020  25:18 /usr/sbin/ntpd -p /var/run/ntpd.pid -g -u 108:114
</span></span><span class="line"><span class="cl">uuidd      767  0.0  0.0  28624   192 ?        Ss    2020   0:00 /usr/sbin/uuidd --socket-activation
</span></span><span class="line"><span class="cl">root       793  0.0  0.0 128812  3148 ?        Ss    2020   0:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;
</span></span><span class="line"><span class="cl">www-data   794  0.0  0.2 133376  9120 ?        S     2020 630:57 nginx: worker process
</span></span><span class="line"><span class="cl">www-data   795  0.0  0.2 133208  8968 ?        S     2020 633:02 nginx: worker process
</span></span><span class="line"><span class="cl">www-data   796  0.0  0.2 133216  9120 ?        S     2020 634:24 nginx: worker process
</span></span><span class="line"><span class="cl">www-data   797  0.0  0.2 133228  9148 ?        S     2020 632:56 nginx: worker process
</span></span><span class="line"><span class="cl">web        955  0.0  0.0  36856  2112 ?        Ss    2020   0:00 /lib/systemd/systemd --user
</span></span><span class="line"><span class="cl">web        956  0.0  0.0  67456  1684 ?        S     2020   0:00 (sd-pam)
</span></span><span class="line"><span class="cl">root      1354  0.0  0.0   8172   440 tty1     Ss+   2020   0:00 /sbin/agetty --noclear tty1 linux
</span></span><span class="line"><span class="cl">root      1355  0.0  0.0   7988   344 ttyS0    Ss+   2020   0:00 /sbin/agetty --keep-baud 115200 38400 9600 ttyS0 vt220
</span></span><span class="line"><span class="cl">root      2513  0.0  0.0      0     0 ?        S    13:07   0:00 [kworker/u4:1]
</span></span><span class="line"><span class="cl">root      2587  0.0  0.0      0     0 ?        S    13:13   0:00 [kworker/u4:2]
</span></span><span class="line"><span class="cl">root      2642  0.0  0.0      0     0 ?        S    13:17   0:00 [kworker/1:0]
</span></span><span class="line"><span class="cl">root      2679  0.0  0.0      0     0 ?        S    13:19   0:00 [kworker/u4:0]
</span></span><span class="line"><span class="cl">root      2735  0.0  0.1 102256  7252 ?        Ss   13:24   0:00 sshd: web [priv]
</span></span><span class="line"><span class="cl">web       2752  0.0  0.0 102256  3452 ?        R    13:24   0:00 sshd: web@pts/0
</span></span><span class="line"><span class="cl">web       2753  0.5  0.1  14716  4708 pts/0    Ss   13:24   0:00 -bash
</span></span><span class="line"><span class="cl">web       2767  0.0  0.0  29596  1456 pts/0    R+   13:24   0:00 ps aux
</span></span><span class="line"><span class="cl">root     10634  0.0  0.0      0     0 ?        S    Nov16   0:00 [kworker/0:0]
</span></span><span class="line"><span class="cl">root     16585  0.0  0.0      0     0 ?        S&lt;    2020   0:00 [bioset]
</span></span><span class="line"><span class="cl">root     19526  0.0  0.0      0     0 ?        S    Nov16   0:00 [kworker/1:1]
</span></span><span class="line"><span class="cl">root     28460  0.0  0.0      0     0 ?        S    Nov15   0:03 [kworker/0:2]
</span></span><span class="line"><span class="cl">root     30685  0.0  0.0  36644  2760 ?        Ss    2020   0:00 /lib/systemd/systemd --user
</span></span><span class="line"><span class="cl">root     30692  0.0  0.0  67224  1664 ?        S     2020   0:00 (sd-pam)
</span></span><span class="line"><span class="cl">root     32689  0.0  0.0  47740  2100 ?        Ss    2020   0:00 /usr/local/ilogtail/ilogtail
</span></span><span class="line"><span class="cl">root     32691  0.2  0.5 256144 23708 ?        Sl    2020 1151:31 /usr/local/ilogtail/ilogtail</span></span></code></pre></td></tr></table>
</div>
</div><p>现在需要你统计<code>VSZ</code>，<code>RSS</code>各自的总和（以M兆为统计），输出格式如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">MEM TOTAL
</span></span><span class="line"><span class="cl">VSZ_SUM:3250.8M,RSS_SUM:179.777M</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    sum_vsz = sum_vsz + $5
</span></span></span><span class="line"><span class="cl"><span class="s1">    sum_rss = sum_rss + $6
</span></span></span><span class="line"><span class="cl"><span class="s1">}END{
</span></span></span><span class="line"><span class="cl"><span class="s1">    print(&#34;MEM TOTAL \n&#34; &#34;VSZ_SUM:&#34; sum_vsz/1024 &#34;M,&#34; &#34;RSS_SUM:&#34; sum_rss/1024 &#34;M&#34;)}&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>计算机网络 面试题目总结</title><link>https://hezephyr.github.io/posts/03.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E7%BB%8F/</link><pubDate>Sun, 02 Jun 2024 19:45:50 +0000</pubDate><author>HeZephyr</author><guid>https://hezephyr.github.io/posts/03.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E7%BB%8F/</guid><description><![CDATA[<h2 id="基础" class="heading-element"><span>1 基础</span>
  <a href="#%e5%9f%ba%e7%a1%80" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="计算机网络体系结构" class="heading-element"><span>1.1 计算机网络体系结构</span>
  <a href="#%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>计算机网络体系结构通过将复杂的网络通信分解成不同的层次，来标准化交互的过程。常见的模型包括 OSI 七层模型、TCP/IP 四层模型和五层体系结构。<font color="red">OSI 是理论上的网络通信模型，TCP/IP 是实际应用层面上的网络通信模型，五层结构是为了方便理解和记忆。</font></p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84.png?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/计算机网络体系结构.png?size=small" data-sub-html="<h2>image-20240601203255272</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84.png" alt="image-20240601203255272" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84.png?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84.png?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84.png?size=large 2x" data-title="image-20240601203255272" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h3 id="说说-osi-七层模型" class="heading-element"><span>1.2 说说 OSI 七层模型？</span>
  <a href="#%e8%af%b4%e8%af%b4-osi-%e4%b8%83%e5%b1%82%e6%a8%a1%e5%9e%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>OSI七层模型是一个用来描述计算机网络体系结构的标准模型。它将网络通信划分为七个抽象层，每一层都负责特定的功能，从物理连接到应用程序。这些层从下到上分别是：</p>
<ol>
<li>物理层（Physical Layer）：负责传输比特流，并管理物理介质。</li>
<li>数据链路层（Data Link Layer）：处理帧的传输，通过物理地址进行寻址。</li>
<li>网络层（Network Layer）：负责数据包的路由和转发，实现不同网络之间的通信。</li>
<li>传输层（Transport Layer）：提供端到端的可靠数据传输，包括错误检测、流量控制和分段重组。</li>
<li>会话层（Session Layer）：负责建立、管理和终止会话连接，以及数据的同步和恢复。</li>
<li>表示层（Presentation Layer）：处理数据的格式化和表示，确保不同系统的数据格式能够互相理解。</li>
<li>应用层（Application Layer）：提供用户与网络服务的接口，包括各种应用程序和协议，如HTTP、FTP和SMTP。</li>
</ol>
<h3 id="说说-tcpip-四层模型" class="heading-element"><span>1.3 说说 TCP/IP 四层模型？</span>
  <a href="#%e8%af%b4%e8%af%b4-tcpip-%e5%9b%9b%e5%b1%82%e6%a8%a1%e5%9e%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP/IP 合并了 OSI 的部分层次，专注于高效的网络通信实践，更具实用性。</p>
<ol>
<li>网络接口层（Network Interface Layer）：对应于 OSI 模型的物理层和数据链路层。负责数据帧的物理传输，包括硬件地址寻址（MAC 地址），数据封装和解封装，错误检测和纠正等。</li>
<li>网际层（Internet Layer）对应于 OSI 模型的网络层。主要协议是 IP，负责数据包的寻址和路由。这一层还包括 ICMP 协议。</li>
<li>传输层（Transport Layer）：对应于 OSI 模型的传输层。负责提供端到端的数据传输服务，包括数据分割、流量控制、错误恢复等。主要的协议有 TCP 和 UDP</li>
<li>应用层（Application Layer）：对应于 OSI 模型的会话层、表示层和应用层。包括所有与网络有关的高级协议，如 HTTP、FTP、SMTP 等。</li>
</ol>
<h3 id="说说五层体系结构" class="heading-element"><span>1.4 说说五层体系结构？</span>
  <a href="#%e8%af%b4%e8%af%b4%e4%ba%94%e5%b1%82%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>是对 OSI 和 TCP/IP 的折衷，它保留了 TCP/IP 的实用性，同时提供了比四层模型更细致的分层，便于教学和理解网络的各个方面。</p>
<ul>
<li>应用层：作为网络服务和最终用户之间的接口。它提供了一系列供应用程序使用的协议，如 HTTP（网页）、FTP（文件传输）、SMTP（邮件传输）等。使用户的应用程序可以访问网络服务。</li>
<li>传输层：提供进程到进程的通信管理，这一层确保数据按顺序、无错误地传输。主要协议包括 TCP 和 UDP。</li>
<li>网络层：负责数据包从源到目的地的传输和路由选择，包括跨越多个网络（即互联网）。它使用逻辑地址（如 IP 地址）来唯一标识设备。路由器是网络层设备。</li>
<li>数据链路层：确保从一个节点到另一个节点的可靠、有效的数据传输。交换机、网桥是数据链路层设备。</li>
<li>物理层：电缆、光纤、无线电频谱、网络适配器等。</li>
</ul>
<h3 id="说一下每一层对应的网络协议有哪些" class="heading-element"><span>1.5 说一下每一层对应的网络协议有哪些？</span>
  <a href="#%e8%af%b4%e4%b8%80%e4%b8%8b%e6%af%8f%e4%b8%80%e5%b1%82%e5%af%b9%e5%ba%94%e7%9a%84%e7%bd%91%e7%bb%9c%e5%8d%8f%e8%ae%ae%e6%9c%89%e5%93%aa%e4%ba%9b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><table>
  <thead>
      <tr>
          <th style="text-align: center">OSI七层网络模型</th>
          <th style="text-align: center">TCP/IP四层模型</th>
          <th style="text-align: center">对应的网络协议</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">应用层</td>
          <td style="text-align: center">应用层</td>
          <td style="text-align: center">HTTP、DNS、FTP、NFS、WAIS、SMIP、Telnet、SNMP</td>
      </tr>
      <tr>
          <td style="text-align: center">表示层</td>
          <td style="text-align: center">应用层</td>
          <td style="text-align: center">TIFF、GIF、JPEG、PICT</td>
      </tr>
      <tr>
          <td style="text-align: center">会话层</td>
          <td style="text-align: center">应用层</td>
          <td style="text-align: center">RPC、SQL、NFS、NetBIOS、names、AppleTalk</td>
      </tr>
      <tr>
          <td style="text-align: center">传输层</td>
          <td style="text-align: center">传输层</td>
          <td style="text-align: center">TCP、UDP</td>
      </tr>
      <tr>
          <td style="text-align: center">网络层</td>
          <td style="text-align: center">网络层</td>
          <td style="text-align: center">IP、ICMP、ARP、RAPP、RIP、IPX</td>
      </tr>
      <tr>
          <td style="text-align: center">数据链路层</td>
          <td style="text-align: center">网络接口层</td>
          <td style="text-align: center">FDDI、Frame Relay、HDLC、PPP</td>
      </tr>
      <tr>
          <td style="text-align: center">物理层</td>
          <td style="text-align: center">网络接口层</td>
          <td style="text-align: center">EIA/TIA-232、EIA/TIA-499</td>
      </tr>
  </tbody>
</table>
<h3 id="数据在各层之间是怎么传输的呢" class="heading-element"><span>1.6 数据在各层之间是怎么传输的呢？</span>
  <a href="#%e6%95%b0%e6%8d%ae%e5%9c%a8%e5%90%84%e5%b1%82%e4%b9%8b%e9%97%b4%e6%98%af%e6%80%8e%e4%b9%88%e4%bc%a0%e8%be%93%e7%9a%84%e5%91%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>对于发送方而言，从上层到下层层层包装，对于接收方而言，从下层到上层，层层解开包装。</p>
<ul>
<li>发送方的应用进程向接收方的应用进程传送数据</li>
<li>AP 先将数据交给本主机的应用层，应用层加上本层的控制信息 H5 就变成了下一层的数据单元</li>
<li>传输层收到这个数据单元后，加上本层的控制信息 H4，再交给网络层，成为网络层的数据单元</li>
<li>到了数据链路层，控制信息被分成两部分，分别加到本层数据单元的首部（H2）和尾部（T2）</li>
<li>最后的物理层，进行比特流的传输</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/weixin-mianznxjsjwllsewswztwxxssc-6e4a8326-992c-442a-8265-5dc3d179b689.jpg?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/weixin-mianznxjsjwllsewswztwxxssc-6e4a8326-992c-442a-8265-5dc3d179b689.jpg?size=small" data-sub-html="<h2>数据在各层之间的传输</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/weixin-mianznxjsjwllsewswztwxxssc-6e4a8326-992c-442a-8265-5dc3d179b689.jpg" alt="数据在各层之间的传输" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/weixin-mianznxjsjwllsewswztwxxssc-6e4a8326-992c-442a-8265-5dc3d179b689.jpg?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/weixin-mianznxjsjwllsewswztwxxssc-6e4a8326-992c-442a-8265-5dc3d179b689.jpg?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/weixin-mianznxjsjwllsewswztwxxssc-6e4a8326-992c-442a-8265-5dc3d179b689.jpg?size=large 2x" data-title="数据在各层之间的传输" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p><font color="red">这个过程类似写信，写一封信，每到一层，就加一个信封，写一些地址的信息。到了目的地之后，又一层层解封，传向下一个目的地。</font></p>
<h2 id="网络综合" class="heading-element"><span>2 网络综合</span>
  <a href="#%e7%bd%91%e7%bb%9c%e7%bb%bc%e5%90%88" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="从浏览器地址栏输入-url-到显示主页的过程" class="heading-element"><span>2.1 从浏览器地址栏输入 URL 到显示主页的过程</span>
  <a href="#%e4%bb%8e%e6%b5%8f%e8%a7%88%e5%99%a8%e5%9c%b0%e5%9d%80%e6%a0%8f%e8%be%93%e5%85%a5-url-%e5%88%b0%e6%98%be%e7%a4%ba%e4%b8%bb%e9%a1%b5%e7%9a%84%e8%bf%87%e7%a8%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>从在浏览器地址栏输入 URL 到显示主页的过程包括多个步骤，涵盖了 DNS 解析、TCP 连接、发送 HTTP 请求、服务器处理请求并返回 HTTP 响应、浏览器处理响应并渲染页面等多个环节。</p>
<ol>
<li><strong>DNS 解析</strong>：浏览器发起一个 DNS 请求到 DNS 服务器，将域名解析为服务器的 IP 地址。</li>
<li><strong>TCP 连接</strong>：浏览器通过解析得到的 IP 地址与服务器建立 TCP 连接（通常是通过 443 端口进行 SSL 加密的 HTTPS 连接）。这一步涉及到 TCP 的三次握手过程，确保双方都准备好进行数据传输。</li>
<li><strong>发送 HTTP 请求</strong>：浏览器构建 HTTP 请求消息，包括请求行（如 GET / HTTP/1.1）、请求头（包含用户代理、接受的内容类型等信息）和请求体（如果有）；将请求发送到服务器。</li>
<li><strong>服务器处理请求</strong>：服务器接收到 HTTP 请求后，根据请求的资源路径，经过后端处理（可能包括数据库查询等），生成 HTTP 响应消息；响应消息包括状态行（如 HTTP/1.1 200 OK）、响应头（内容类型、缓存控制等信息）和响应体（请求的资源内容）。</li>
<li><strong>浏览器接收 HTTP 响应</strong>：浏览器接收到服务器返回的 HTTP 响应数据，开始解析响应体中的 HTML 内容；然后构建 DOM 树、解析 CSS 和 JavaScript 文件等，最终渲染页面。</li>
<li><strong>断开连接</strong>：TCP 四次挥手，连接结束</li>
</ol>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/input_url_example.png?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/input_url_example.png?size=small" data-sub-html="<h2>image-20240601205448054</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/input_url_example.png" alt="image-20240601205448054" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/input_url_example.png?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/input_url_example.png?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/input_url_example.png?size=large 2x" data-title="image-20240601205448054" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h3 id="各个过程都使用了哪些协议" class="heading-element"><span>2.2 各个过程都使用了哪些协议？</span>
  <a href="#%e5%90%84%e4%b8%aa%e8%bf%87%e7%a8%8b%e9%83%bd%e4%bd%bf%e7%94%a8%e4%ba%86%e5%93%aa%e4%ba%9b%e5%8d%8f%e8%ae%ae" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>DNS:获取域名对应的IP</li>
<li>TCP:与服务器建立连接和断开连接</li>
<li>IP：使用TCP协议时，网络层需要使用IP协议。</li>
<li>OPSF：IP数据包在路由器之间，路由选择使用OPSF协议</li>
<li>ARP：路由器再与服务器通信时，需要将IP地址转换为MAC地址，需要使用ARP协议</li>
<li>HTTP：TCP连接建立完成之后，使用HTTP协议传递HTTP报文</li>
</ul>
<h3 id="说说-dns-的解析过程" class="heading-element"><span>2.3 说说 DNS 的解析过程？</span>
  <a href="#%e8%af%b4%e8%af%b4-dns-%e7%9a%84%e8%a7%a3%e6%9e%90%e8%bf%87%e7%a8%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>DNS 的全称是 <strong>Domain Name System</strong>，也就是域名解析系统，它可以将域名映射到对应的 IP 地址上，比如说我们访问 <code>www.google.com</code>，实际上访问的是谷歌的一台服务器，它的 IP 地址是 <code>xxx.xxx.xxx.xxx</code>。可以通过 IP 地址直接访问服务器，但不方便记忆，所以就有了域名系统。域名到 IP 之间的映射，就需要 DNS 来完成。</p>
<p>假设我们在浏览器地址栏里键入了<code>www.google.com</code>：</p>
<ol>
<li>浏览器会首先检查自己的缓存中是否有这个域名对应的 IP 地址，如果有，直接返回；如果没有，进入下一步。</li>
<li>检查本地 DNS 缓存是否有该域名的记录。</li>
<li>如果没有，向<strong>根域名服务器</strong>发送请求，根域名服务器将请求指向更具体的服务，如 <code>com</code> 顶级域名服务器。</li>
<li>顶级域名服务器再将请求指向权限域名服务器，通常由域名注册机构直接管理，所以机构会提供对应的 DNS 解析服务，将域名和谷歌服务器绑定起来。</li>
<li>最终，浏览器使用获得的 IP 地址发起一个 HTTP 请求到目标服务器，然后该服务器返回所请求的网页内容。</li>
</ol>
<h3 id="说说-websocket-与-socket-的区别" class="heading-element"><span>2.4 说说 WebSocket 与 Socket 的区别？</span>
  <a href="#%e8%af%b4%e8%af%b4-websocket-%e4%b8%8e-socket-%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>
<p>Socket 其实就是等于 <strong>IP 地址 + 端口 + 协议</strong>。具体来说，Socket 是一套标准，它完成了对 TCP/IP 的高度封装，屏蔽网络细节，以方便开发者更好地进行网络编程。</p>
</li>
<li>
<p><strong>WebSocket</strong>: 是一种网络协议，属于应用层协议。它是在单个 TCP 连接上进行全双工通信的协议，设计用于浏览器和服务器之间的通信，用来解决 <strong>http 不支持持久化连接</strong>的问题。</p>
</li>
<li>
<p>Socket 一个是<strong>网络编程的标准接口</strong>，而 WebSocket 则是应用层通信协议。</p>
</li>
<li>
<p><strong>Socket</strong>工作在传输层，可以基于 TCP 或 UDP 协议。它需要开发者自己处理数据的发送和接收、连接的建立和断开等低层次的细节。</p>
</li>
<li>
<p><strong>WebSocket</strong>工作在应用层，<strong>依赖于 TCP 协议</strong>。<font color="red">WebSocket 在初次连接时通过 HTTP 请求进行握手，一旦连接建立，后续的数据传输都在 WebSocket 协议上进行</font>，浏览器和服务器都可以主动向对方发送数据，保持连接直到显式断开。</p>
</li>
<li>
<p><strong>Socket</strong>传输的是字节流，需要开发者自行定义数据的格式和协议。<strong>WebSocket</strong>传输的是文本帧或二进制帧，协议本身定义了消息的格式，能够直接发送 JSON 或二进制数据，方便开发者使用。</p>
</li>
</ul>
<h3 id="说一下你了解的端口及对应的服务" class="heading-element"><span>2.5 说一下你了解的端口及对应的服务？</span>
  <a href="#%e8%af%b4%e4%b8%80%e4%b8%8b%e4%bd%a0%e4%ba%86%e8%a7%a3%e7%9a%84%e7%ab%af%e5%8f%a3%e5%8f%8a%e5%af%b9%e5%ba%94%e7%9a%84%e6%9c%8d%e5%8a%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><table>
  <thead>
      <tr>
          <th>端口</th>
          <th style="text-align: center">服务</th>
          <th style="text-align: center">用途</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>21</td>
          <td style="text-align: center">FTP(文件传输协议)</td>
          <td style="text-align: center">用于在计算机之间传输文件</td>
      </tr>
      <tr>
          <td>22</td>
          <td style="text-align: center">SSH</td>
          <td style="text-align: center">用于远程登录、文件传输和命令行界面交互</td>
      </tr>
      <tr>
          <td>23</td>
          <td style="text-align: center">Telnet(远程登录服务)</td>
          <td style="text-align: center">允许用户从一台计算机登录到另一台计算机</td>
      </tr>
      <tr>
          <td>53</td>
          <td style="text-align: center">DNS域名解析服务</td>
          <td style="text-align: center">将域名转换为IP地址以便访问网站</td>
      </tr>
      <tr>
          <td>80</td>
          <td style="text-align: center">HTTP超文本传输协议</td>
          <td style="text-align: center">用于在万维网上交换信息</td>
      </tr>
      <tr>
          <td>443</td>
          <td style="text-align: center">HTTPS</td>
          <td style="text-align: center">提供安全的HTTP通信</td>
      </tr>
      <tr>
          <td>1080</td>
          <td style="text-align: center">SOCKS</td>
          <td style="text-align: center">用于在计算机之间安全地传输数据。它通过代理服务器来隐藏原始的IP地址和端口号，从而提供匿名性和安全性</td>
      </tr>
      <tr>
          <td>3306</td>
          <td style="text-align: center">MySQL默认端口号</td>
          <td style="text-align: center">用于MySQL数据库服务器上的数据访问</td>
      </tr>
  </tbody>
</table>
<h2 id="http" class="heading-element"><span>3 HTTP</span>
  <a href="#http" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="说说-http-常用的状态码及其含义" class="heading-element"><span>3.1 说说 HTTP 常用的状态码及其含义？</span>
  <a href="#%e8%af%b4%e8%af%b4-http-%e5%b8%b8%e7%94%a8%e7%9a%84%e7%8a%b6%e6%80%81%e7%a0%81%e5%8f%8a%e5%85%b6%e5%90%ab%e4%b9%89" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>HTTP 响应状态码是由服务器返回给客户端，用于表示对请求的响应结果。</p>
<p>这些状态码分为五个不同的类别，每个类别用一个数字开头，共有三位数：</p>
<ul>
<li>1XX：<strong>信息性状态码</strong>，临时的响应，客户端应继续请求。</li>
<li>2XX：<strong>成功状态码</strong>，请求已成功被服务器接收。</li>
<li>3XX：<strong>重定向状态码</strong>，用来重定向。</li>
<li>4XX：<strong>客户端错误状态码</strong>，请求可能出错。</li>
<li>5XX：<strong>服务器错误状态码</strong>，服务器在尝试处理请求时发生了错误。</li>
</ul>
<p>常见HTTP状态码如下：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">状态码</th>
          <th style="text-align: center">含义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">101 <strong>Switching Protocols</strong></td>
          <td style="text-align: center">切换请求协议</td>
      </tr>
      <tr>
          <td style="text-align: center">200 <strong>OK</strong></td>
          <td style="text-align: center">请求成功</td>
      </tr>
      <tr>
          <td style="text-align: center">301 <strong>Moved Permanently</strong></td>
          <td style="text-align: center">请求资源永久移动，返回新URI</td>
      </tr>
      <tr>
          <td style="text-align: center">302 <strong>Found</strong></td>
          <td style="text-align: center">请求资源临时移动，继续使用原有URI</td>
      </tr>
      <tr>
          <td style="text-align: center">400 <strong>Bad Request</strong></td>
          <td style="text-align: center">客户端请求的语法错误，服务端无法理解</td>
      </tr>
      <tr>
          <td style="text-align: center">401 <strong>Unauthorized</strong></td>
          <td style="text-align: center">当前请求需要认证</td>
      </tr>
      <tr>
          <td style="text-align: center">403 <strong>Forbidden</strong></td>
          <td style="text-align: center">服务器拒绝请求，客户端无权访问该资源</td>
      </tr>
      <tr>
          <td style="text-align: center">404 <strong>Not Found</strong></td>
          <td style="text-align: center">请求的资源在服务器上不存在</td>
      </tr>
      <tr>
          <td style="text-align: center">500 <strong>Internal Server Error</strong></td>
          <td style="text-align: center">服务器内部错误</td>
      </tr>
  </tbody>
</table>
<h3 id="http-有哪些请求方式" class="heading-element"><span>3.2 HTTP 有哪些请求方式？</span>
  <a href="#http-%e6%9c%89%e5%93%aa%e4%ba%9b%e8%af%b7%e6%b1%82%e6%96%b9%e5%bc%8f" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>HTTP 协议定义了多种请求方式，用以指示请求的目的。常见的请求方式有 GET、POST、DELETE、PUT。<font color="red">在正确实现的条件下，GET、HEAD、PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是</font>（每次发送 POST 请求，服务器可能会生成新的资源 ID 或处理生成的唯一值（如订单号、事务 ID）。因此，重复发送 POST 请求会导致创建多个不同的资源或多次执行某个操作）。</p>
<ul>
<li><strong>GET</strong>：请求检索指定的资源。应该只用于获取数据，并且是幂等的，即多次执行相同的 GET 请求应该返回相同的结果，并且不会改变资源的状态。</li>
<li><strong>POST</strong>：向指定资源提交数据，请求服务器进行处理（如提交表单或上传文件）。数据被包含在请求体中。可能会创建新的资源或修改现有资源。</li>
<li><strong>DELETE</strong>：删除指定的资源。</li>
<li><strong>PUT</strong>：用于替换指定的资源。如果指定的资源不存在，创建一个新资源。</li>
<li><strong>HEAD</strong>：类似于 GET 请求，但只请求响应头信息，不会返回响应体。常用于检查资源是否存在以及资源的元数据（如检查链接是否有效）。</li>
<li><strong>OPTIONS</strong>：请求服务器返回该资源所支持的所有 HTTP 方法。常用于检查服务器的功能或资源的通信选项。</li>
<li><strong>PATCH</strong>：用于对资源进行部分修改，而不是完全替代资源。</li>
<li><strong>TRACE</strong>：回显服务器收到的请求，主要用于测试和诊断。</li>
<li><strong>CONNECT</strong>：用于将请求连接转换为透明的 TCP/IP 隧道，通常用于 HTTPS 通过代理服务器的请求。</li>
</ul>
<h3 id="http-的-get-方法可以实现写操作吗" class="heading-element"><span>3.3 HTTP 的 GET 方法可以实现写操作吗?</span>
  <a href="#http-%e7%9a%84-get-%e6%96%b9%e6%b3%95%e5%8f%af%e4%bb%a5%e5%ae%9e%e7%8e%b0%e5%86%99%e6%93%8d%e4%bd%9c%e5%90%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>严格来说，HTTP 的 GET 方法不应该用于实现写操作，因为它设计为一种安全的、幂等的读取操作。GET 请求的主要作用是从服务器获取资源，而不应对服务器上的数据进行任何修改。</p>
<p>但是，实际上，有些 Web 应用可能会滥用 GET 请求进行写操作，例如通过在 URL 中传递参数来修改服务器上的数据。这种做法是不推荐的，主要有以下几个原因：</p>
<ol>
<li><strong>安全性</strong>：GET 请求会将参数包含在 URL 中，这使得敏感数据容易暴露，且容易受到攻击（如 CSRF 攻击）。</li>
<li><strong>缓存问题</strong>：GET 请求通常会被缓存，而缓存的 GET 请求不应引发服务器状态的变化。如果 GET 请求用于写操作，可能会导致缓存的副作用。</li>
<li><strong>幂等性和安全性</strong>：HTTP 标准要求 GET 请求是幂等的（多次相同的请求应产生相同的结果）和安全的（不应对服务器状态产生副作用）。使用 GET 实现写操作违背了这些原则。</li>
</ol>
<h3 id="说一下-get-和-post-的区别" class="heading-element"><span>3.4 说一下 GET 和 POST 的区别？</span>
  <a href="#%e8%af%b4%e4%b8%80%e4%b8%8b-get-%e5%92%8c-post-%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ol>
<li>
<p>从 HTTP 报文层面：</p>
<ul>
<li>
<p>GET 请求：将请求参数放在 URL 中，因此 URL 的长度有限制。数据在 URL 中传输，不安全，容易被窃取。</p>
</li>
<li>
<p>POST 请求：将请求参数放在请求体中，没有长度限制。数据在报文体中传输，相对更安全。</p>
</li>
</ul>
</li>
<li>
<p>从幂等性和安全性：</p>
<ul>
<li>
<p>GET 请求：</p>
<ul>
<li>幂等性：多次请求不会改变服务器状态，每次结果相同。</li>
<li>安全性：不会对服务器资源进行修改。</li>
</ul>
</li>
<li>
<p>POST 请求：</p>
<ul>
<li>
<p>不幂等：每次请求可能导致服务器状态变化（如创建资源）。</p>
</li>
<li>
<p>不安全：请求会对服务器资源进行修改。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>从其他层面：</p>
<ul>
<li>GET 请求：能够被缓存，减轻服务器负担。能够保存在浏览器的浏览记录里。URL 可以保存为浏览器书签。</li>
<li>POST 请求：<font color="red">不能被缓存，不保存在浏览器历史记录里</font>。URL 不便于保存为书签。</li>
</ul>
</li>
</ol>
<h3 id="get-的长度限制是多少" class="heading-element"><span>3.5 GET 的长度限制是多少？</span>
  <a href="#get-%e7%9a%84%e9%95%bf%e5%ba%a6%e9%99%90%e5%88%b6%e6%98%af%e5%a4%9a%e5%b0%91" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>HTTP 中的 GET 方法是通过 URL 传递数据的，<font color="red">但是 URL 本身其实并没有对数据的长度进行限制，真正限制 GET 长度的是浏览器</font>。</p>
<p>例如 IE 浏览器对 URL 的最大限制是 2000 多个字符，大概 2kb 左右，像 Chrome、Firefox 等浏览器支持的 URL 字符数更多，其中 FireFox 中 URL 的最大长度限制是 65536 个字符，Chrome 则是 8182 个字符。</p>
<p>这个长度限制也不是针对数据部分，而是针对整个 URL。</p>
<h3 id="http-请求的过程与原理" class="heading-element"><span>3.6 HTTP 请求的过程与原理？</span>
  <a href="#http-%e8%af%b7%e6%b1%82%e7%9a%84%e8%bf%87%e7%a8%8b%e4%b8%8e%e5%8e%9f%e7%90%86" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>HTTP 全称是超文本传输协议（HyperText Transfer Protocol），是一个基于请求与响应模式的应用层协议，基于 TCP/IP 协议传输数据。</p>
<p>HTTP 遵循标准的客户端-服务器模型，客户端打开连接以发出请求，然后等待它收到服务器端响应。</p>
<ul>
<li>在浏览器输入 URL 后，浏览器首先会通过 DNS 解析获取到服务器的 IP 地址，然后与服务器建立 TCP 连接。</li>
<li>TCP 连接建立后，浏览器会向服务器发送 HTTP 请求。</li>
<li>服务器收到请求后，会根据请求的信息处理请求。</li>
<li>处理完请求后，服务器会返回一个 HTTP 响应给浏览器。</li>
<li>浏览器收到响应后，会根据响应的信息渲染页面。然后，浏览器和服务器断开 TCP 连接。</li>
</ul>
<p>客户端发送一个请求到服务器，服务器处理请求并返回一个响应。<font color="red">这个过程是同步的</font>，也就是说，客户端在发送请求后必须等待服务器的响应。在等待响应的过程中，客户端不会发送其他请求。</p>
<h3 id="说一下-http-的报文结构" class="heading-element"><span>3.7 说一下 HTTP 的报文结构？</span>
  <a href="#%e8%af%b4%e4%b8%80%e4%b8%8b-http-%e7%9a%84%e6%8a%a5%e6%96%87%e7%bb%93%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>HTTP 的报文结构可以分为两类：请求报文和响应报文。两者在结构上相似，都包含了<strong>起始行</strong>、<strong>头部</strong>和<strong>消息正文</strong>。</p>
<ul>
<li>
<p><strong>请求报文结构</strong></p>
<ol>
<li>
<p><strong>请求行 (Request Line)</strong></p>
<ul>
<li><strong>方法 (Method)</strong>：如 GET、POST、PUT、DELETE 等。</li>
<li><strong>请求目标 (Request-URI)</strong>：即请求的资源路径。</li>
<li><strong>HTTP 版本 (HTTP-Version)</strong>：如 HTTP/1.1。</li>
</ul>
</li>
<li>
<p><strong>请求头部 (Request Headers)</strong></p>
<ul>
<li>包含多个首部字段，每个字段由字段名和字段值组成。</li>
<li>用于提供客户端信息、请求的资源信息等。</li>
</ul>
<p><strong>常见请求头</strong>：</p>
<ul>
<li><code>Host</code>：请求的主机名和端口。</li>
<li><code>User-Agent</code>：发起请求的客户端信息。</li>
<li><code>Accept</code>：客户端可接受的响应内容类型。</li>
<li><code>Content-Type</code>：请求体的媒体类型。</li>
<li><code>Authorization</code>：认证信息。</li>
</ul>
</li>
<li>
<p><strong>空行</strong>：用于分隔请求头部和请求主体。</p>
</li>
<li>
<p><strong>请求主体 (Request Body)</strong>：包含实际要发送给服务器的数据，仅在 POST、PUT 等方法中存在。</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="err">GET</span> <span class="err">/index.html</span> <span class="err">HTTP/1.1</span>
</span></span><span class="line"><span class="cl"><span class="nf">Host</span><span class="o">:</span> <span class="n">www</span>.<span class="n">example</span>.<span class="n">com</span>
</span></span><span class="line"><span class="cl"><span class="nf">User-Agent</span><span class="o">:</span> <span class="n">Mozilla</span>/5.0
</span></span><span class="line"><span class="cl"><span class="nf">Accept</span><span class="o">:</span> <span class="n">text</span>/<span class="n">html</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>响应报文结构</strong></p>
<ol>
<li>
<p><strong>状态行 (Status Line)</strong></p>
<ul>
<li>
<p><strong>HTTP 版本 (HTTP-Version)</strong>：如 HTTP/1.1。</p>
</li>
<li>
<p><strong>状态码 (Status Code)</strong>：如 200、404、500 等。</p>
</li>
<li>
<p><strong>原因短语 (Reason-Phrase)</strong>：对状态码的简短描述。</p>
</li>
</ul>
</li>
<li>
<p><strong>响应头部 (Response Headers)</strong></p>
<ul>
<li>包含多个首部字段，每个字段由字段名和字段值组成。</li>
<li>用于提供服务器信息、响应的资源信息等。</li>
</ul>
<p><strong>常见响应头</strong>：</p>
<ul>
<li><code>Date</code>：响应生成的日期和时间。</li>
<li><code>Content-Type</code>：响应体的媒体类型。</li>
<li><code>Content-Length</code>：响应体的长度。</li>
<li><code>Set-Cookie</code>：设置 HTTP Cookie。</li>
</ul>
</li>
<li>
<p><strong>空行</strong>：用于分隔响应头部和响应主体。</p>
</li>
<li>
<p><strong>响应主体 (Response Body)</strong>：包含实际要返回给客户端的数据。</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="err">HTTP/1.1</span> <span class="err">200</span> <span class="err">OK</span>
</span></span><span class="line"><span class="cl"><span class="nf">Date</span><span class="o">:</span> <span class="n">Mon</span><span class="p">,</span> 27 <span class="n">Jul</span> 2009 12:28:53 <span class="n">GMT</span>
</span></span><span class="line"><span class="cl"><span class="nf">Content-Type</span><span class="o">:</span> <span class="n">text</span>/<span class="n">html</span>
</span></span><span class="line"><span class="cl"><span class="nf">Content-Length</span><span class="o">:</span> 138
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">&lt;html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="err">&lt;body&gt;</span>
</span></span><span class="line"><span class="cl"><span class="err">&lt;h1&gt;Hello,</span> <span class="err">World!&lt;/h1&gt;</span>
</span></span><span class="line"><span class="cl"><span class="err">&lt;/body&gt;</span>
</span></span><span class="line"><span class="cl"><span class="err">&lt;/html&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="uri-和-url-有什么区别" class="heading-element"><span>3.8 URI 和 URL 有什么区别?</span>
  <a href="#uri-%e5%92%8c-url-%e6%9c%89%e4%bb%80%e4%b9%88%e5%8c%ba%e5%88%ab" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><table>
  <thead>
      <tr>
          <th style="text-align: center"><strong>属性</strong></th>
          <th style="text-align: center"><strong>URI</strong></th>
          <th style="text-align: center"><strong>URL</strong></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center"><strong>定义</strong></td>
          <td style="text-align: center">统一资源标识符，用于标识一个资源</td>
          <td style="text-align: center">统一资源定位符，提供资源的定位方法</td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>组成部分</strong></td>
          <td style="text-align: center"><code>[scheme:][//authority][path][?query][#fragment]</code></td>
          <td style="text-align: center"><code>scheme://authority/path[?query][#fragment]</code>（必须包含scheme（协议），authority（域名/IP），路径）</td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>例子</strong></td>
          <td style="text-align: center"><code>urn:isbn:0451450523</code>（为URN，不是URL，但是URI）</td>
          <td style="text-align: center"><code>https://www.example.com/index.html</code></td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>子集</strong></td>
          <td style="text-align: center">可以是 URL 或 URN</td>
          <td style="text-align: center">是 URI 的子集</td>
      </tr>
  </tbody>
</table>
<h3 id="说下-http101120-的区别" class="heading-element"><span>3.9 说下 HTTP1.0，1.1，2.0 的区别？</span>
  <a href="#%e8%af%b4%e4%b8%8b-http101120-%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p><strong>HTTP1.0</strong> 默认短连接，HTTP 1.1 默认长连接，HTTP 2.0 采用<strong>多路复用</strong>。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: center"><strong>特性</strong></th>
          <th style="text-align: center"><strong>HTTP/1.0</strong></th>
          <th style="text-align: center"><strong>HTTP/1.1</strong></th>
          <th style="text-align: center"><strong>HTTP/2.0</strong></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center"><strong>连接管理</strong></td>
          <td style="text-align: center">短连接（默认每个请求/响应对后都关闭连接）</td>
          <td style="text-align: center">长连接（默认 keep-alive）</td>
          <td style="text-align: center">多路复用（同一连接多请求）</td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>Host 头部</strong></td>
          <td style="text-align: center">不支持</td>
          <td style="text-align: center">支持</td>
          <td style="text-align: center">支持</td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>缓存控制</strong></td>
          <td style="text-align: center">简单的 Expires 头部</td>
          <td style="text-align: center">复杂的 Cache-Control 头部</td>
          <td style="text-align: center">同 HTTP/1.1</td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>传输编码</strong></td>
          <td style="text-align: center">无</td>
          <td style="text-align: center">支持分块传输编码</td>
          <td style="text-align: center">二进制分帧</td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>请求方法</strong></td>
          <td style="text-align: center">GET, POST</td>
          <td style="text-align: center">GET, POST, PUT, DELETE, OPTIONS 等</td>
          <td style="text-align: center">同 HTTP/1.1</td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>头部压缩</strong></td>
          <td style="text-align: center">无</td>
          <td style="text-align: center">无</td>
          <td style="text-align: center">HPACK 压缩（减少了冗余头部信息的带宽消耗）</td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>服务器推送</strong></td>
          <td style="text-align: center">无</td>
          <td style="text-align: center">无</td>
          <td style="text-align: center">支持</td>
      </tr>
      <tr>
          <td style="text-align: center"><strong>流优先级</strong></td>
          <td style="text-align: center">无</td>
          <td style="text-align: center">无</td>
          <td style="text-align: center">支持</td>
      </tr>
  </tbody>
</table>
<h3 id="http3-了解吗" class="heading-element"><span>3.10 HTTP/3 了解吗？</span>
  <a href="#http3-%e4%ba%86%e8%a7%a3%e5%90%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>HTTP/2.0 基于 TCP 协议，而 HTTP/3.0 则基于 QUIC 协议，Quick UDP Connections，直译为快速 UDP 网络连接。</p>
<p>基于 TCP 的 HTTP/2.0，尽管从逻辑上来说，不同的流之间相互独立，不会相互影响，但在实际传输的过程中，数据还是要一帧一帧的发送和接收，一旦某一个流的数据有丢包，仍然会阻塞在它之后传输的流数据。</p>
<p>而基于 UDP 的 QUIC 协议可以更彻底解决了 HTTP/2 中的队头阻塞问题，让不同的流之间真正的实现相互独立传输，互不干扰。同时，QUIC 协议在传输的过程中就完成了 TLS 加密握手，更直接了。</p>
<p>目前使用最广泛的是哪个HTTP版本还是是 HTTP/2，在 2022 年 1 月达到峰值，占所有网站的 46.9%。</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/use_trend_example.png?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/use_trend_example.png?size=small" data-sub-html="<h2>w3techs：使用趋势</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/use_trend_example.png" alt="w3techs：使用趋势" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/use_trend_example.png?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/use_trend_example.png?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/use_trend_example.png?size=large 2x" data-title="w3techs：使用趋势" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h3 id="http-如何实现长连接在什么时候会超时" class="heading-element"><span>3.11 HTTP 如何实现长连接？在什么时候会超时？</span>
  <a href="#http-%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e9%95%bf%e8%bf%9e%e6%8e%a5%e5%9c%a8%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e4%bc%9a%e8%b6%85%e6%97%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><blockquote>
<p><strong>什么是 HTTP 的长连接？</strong></p>
<ul>
<li>HTTP 分为长连接和短连接，<strong>本质上说的是 TCP 的长短连接</strong>。TCP 连接是一个双向的通道，它是可以保持一段时间不关闭的，因此 TCP 连接才具有真正的长连接和短连接这一说法。</li>
<li>TCP 长连接可以复用一个 TCP 连接，来发起多次的 HTTP 请求，这样就可以减少资源消耗，比如一次请求 HTML，如果是短连接的话，可能还需要请求后续的 JS/CSS。</li>
</ul>
</blockquote>
<p>通过在头部（请求和响应头）设置 <strong>Connection</strong> 字段指定为<code>keep-alive</code>，HTTP/1.0 协议支持，但是是默认关闭的，从 HTTP/1.1 以后，连接默认都是长连接。</p>
<p>在什么时候会超时呢？</p>
<ul>
<li>
<p>HTTP 一般会有 httpd 守护进程，里面可以设置 <strong>keep-alive timeout</strong>，当 tcp 连接闲置超过这个时间就会关闭，<strong>也可以在 HTTP 的 header 里面设置超时时间</strong></p>
</li>
<li>
<p>TCP 的 <strong>keep-alive</strong> 包含三个参数，支持在系统内核的 net.ipv4 里面设置；当 TCP 连接之后，闲置了 <strong>tcp_keepalive_time</strong>，则会发生侦测包，如果没有收到对方的 ACK，那么会每隔 tcp_keepalive_intvl 再发一次，直到发送了 <strong>tcp_keepalive_probes</strong>，就会丢弃该连接。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">tcp_keepalive_intvl = 15
</span></span><span class="line"><span class="cl">tcp_keepalive_probes = 5
</span></span><span class="line"><span class="cl">tcp_keepalive_time = 1800</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="说说-http-与-https-有哪些区别" class="heading-element"><span>3.12 说说 HTTP 与 HTTPS 有哪些区别？</span>
  <a href="#%e8%af%b4%e8%af%b4-http-%e4%b8%8e-https-%e6%9c%89%e5%93%aa%e4%ba%9b%e5%8c%ba%e5%88%ab" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ol>
<li>HTTPS 是 HTTP 的增强版，<font color="red">在 HTTP 的基础上加入了 SSL/TLS 协议，确保数据在传输过程中是加密的</font>。SSL/TLS 需要向 CA（证书权威机构）申请数字证书，用于验证服务器的身份。</li>
<li>HTTP 的默认端⼝号是 <strong>80</strong>，URL 以<code>http://</code>开头；HTTPS 的默认端⼝号是 <strong>443</strong>，URL 以<code>https://</code>开头。</li>
</ol>
<h3 id="为什么要用-https解决了哪些问题" class="heading-element"><span>3.13 为什么要用 HTTPS？解决了哪些问题？</span>
  <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e7%94%a8-https%e8%a7%a3%e5%86%b3%e4%ba%86%e5%93%aa%e4%ba%9b%e9%97%ae%e9%a2%98" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>使用 HTTPS 主要是为了解决 HTTP 传输过程中的一些安全问题，<font color="red">因为 HTTP 是明文传输，所以 HTTPS 在 HTTP 的基础上加入了 SSL/TLS 协议</font>。</p>
<p>HTTPS 主要解决了以下几个问题：</p>
<ul>
<li><strong>窃听风险</strong>：第三方可以截获传输的数据包，获取敏感信息。</li>
<li><strong>篡改风险</strong>：第三方可以在传输过程中篡改数据包，修改数据。</li>
<li><strong>冒充风险</strong>：第三方可以冒充服务器，与客户端通信。</li>
</ul>
<h3 id="https-工作流程是怎样的" class="heading-element"><span>3.14 HTTPS 工作流程是怎样的？</span>
  <a href="#https-%e5%b7%a5%e4%bd%9c%e6%b5%81%e7%a8%8b%e6%98%af%e6%80%8e%e6%a0%b7%e7%9a%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>HTTPS 的连接建立在 SSL/TLS 握手之上，工作流程如下图所示：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/HTTPS_workload_Example.png?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/HTTPS_workload_Example.png?size=small" data-sub-html="<h2>image-20240601233926542</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/HTTPS_workload_Example.png" alt="image-20240601233926542" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/HTTPS_workload_Example.png?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/HTTPS_workload_Example.png?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/HTTPS_workload_Example.png?size=large 2x" data-title="image-20240601233926542" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>如果通信内容被截取，但由于没有会话密钥，所以无法解密。当通信结束后，连接会被关闭，会话密钥也会被销毁，下次通信会重新生成一个会话密钥。</p>
<p>HTTPS 在不同阶段会使用不同的加密方式：</p>
<ul>
<li>非对称加密：在握手阶段使用，特别是在密钥交换过程中。非对称加密使用公钥和私钥，其中公钥可以公开，私钥保密。客户端使用公钥加密信息，服务器使用私钥解密。</li>
<li>对称加密：在完成握手后，所有的数据传输都使用对称加密。对称加密使用相同的密钥进行加密和解密，这种加密方式比非对称加密更快。</li>
</ul>
<h3 id="https-会加密-url-吗" class="heading-element"><span>3.15 HTTPS 会加密 URL 吗？</span>
  <a href="#https-%e4%bc%9a%e5%8a%a0%e5%af%86-url-%e5%90%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>HTTPS 通过 SSL/TLS 协议确保了客户端与服务器之间交换的数据被加密，这包括 HTTP 头部和正文。而 URL 是 HTTP 头部的一部分，因此这部分信息也是加密的。但因为涉及到 SSL 握手的过程，所以域名信息会被暴露出来，需要注意。</p>
<h3 id="客户端怎么去校验证书的合法性" class="heading-element"><span>3.16 客户端怎么去校验证书的合法性？</span>
  <a href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e6%80%8e%e4%b9%88%e5%8e%bb%e6%a0%a1%e9%aa%8c%e8%af%81%e4%b9%a6%e7%9a%84%e5%90%88%e6%b3%95%e6%80%a7" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>首先，所有的证书都是由 CA 机构签发的，CA 机构是一个受信任的第三方机构，它会对证书的申请者进行身份验证，然后签发证书，它具有极高的可信度。</p>
<p>客户端（通常是浏览器，通常会集成 CA 的公钥信息）在校验证书的合法性时，主要通过以下步骤来校验证书的合法性。</p>
<ul>
<li>浏览器会读取证书的所有者、有效期、颁发者等信息，先校验网站域名是否一致，然后校验证书的有效期是否过期；</li>
<li>浏览器开始查找内置的 CA，与服务器返回证书中的颁发者进行对比，确认是否为合法机构；</li>
<li>如果是，从内部植入的 CA 公钥解密 Certificate 的 Signature 内容，得到⼀个 Hash 值 H2；</li>
<li>使⽤同样的 Hash 算法获取证书的 Hash 值 H1，⽐较 H1 和 H2，如果值相同，则为可信赖的证书，否则告警。</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/CA_Example_1.png?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/CA_Example_1.png?size=small" data-sub-html="<h2>三分恶面渣逆袭：证书签名和客户端校验-来源参考</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/CA_Example_1.png" alt="三分恶面渣逆袭：证书签名和客户端校验-来源参考" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/CA_Example_1.png?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/CA_Example_1.png?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/CA_Example_1.png?size=large 2x" data-title="三分恶面渣逆袭：证书签名和客户端校验-来源参考" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h3 id="如何理解-http-协议是无状态的" class="heading-element"><span>3.17 如何理解 HTTP 协议是无状态的？</span>
  <a href="#%e5%a6%82%e4%bd%95%e7%90%86%e8%a7%a3-http-%e5%8d%8f%e8%ae%ae%e6%98%af%e6%97%a0%e7%8a%b6%e6%80%81%e7%9a%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>这个<code>无状态</code>的的<code>状态</code>值的是什么？是客户端的状态，所以字面意思，就是 HTTP 协议中服务端不会保存客户端的任何信息。</p>
<p>比如当浏览器第一次发送请求给服务器时，服务器响应了；如果同个浏览器发起第二次请求给服务器时，它还是会响应，但是呢，服务器不知道你就是刚才的那个浏览器。</p>
<blockquote>
<p><strong>那有什么办法记录状态呢？</strong></p>
<p>主要有两个办法，Session 和 Cookie。</p>
</blockquote>
<h3 id="说说-session-和-cookie-有什么联系和区别" class="heading-element"><span>3.18 说说 Session 和 Cookie 有什么联系和区别?</span>
  <a href="#%e8%af%b4%e8%af%b4-session-%e5%92%8c-cookie-%e6%9c%89%e4%bb%80%e4%b9%88%e8%81%94%e7%b3%bb%e5%92%8c%e5%8c%ba%e5%88%ab" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>Cookie 是保存在客户端的一小块文本串的数据。客户端向服务器发起请求时，服务端会向客户端发送一个 Cookie，客户端就把 Cookie 保存起来。在客户端下次向同一服务器再发起请求时，Cookie 被携带发送到服务器（<font color="red">通过 HTTP 请求头的 <code>Cookie</code> 字段在客户端和服务器之间传递</font>）。服务端可以根据这个 Cookie 判断用户的身份和状态。Cookie可以设置过期时间。如果不设置过期时间，则 Cookie 在会话结束（浏览器关闭）时失效。可以通过设置 <code>Expires</code> 或 <code>Max-Age</code> 属性来定义 Cookie 的持久性。</li>
<li>Session 指的就是服务器和客户端一次会话的过程。它是另一种记录客户状态的机制。<font color="red">不同的是 cookie 保存在客户端浏览器中，而 session 保存在服务器上（客户端只保存 Session ID）</font>。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是 session。客户端浏览器再次访问时只需要从该 session 中查找用户的状态。Session一般在用户会话结束时（例如关闭浏览器、超时）失效。服务器端可以配置 Session 的过期时间。</li>
</ul>
<p>Session 和 Cookie 联系：依赖于 Cookie 来传递 Session ID（通常是服务器在创建 Session 时设置一个 Cookie 来存储 Session ID）。</p>
<p>Session 和 Cookie 的使用场景也不同：</p>
<ul>
<li><strong>Cookie</strong>：适用于存储用户偏好、登录状态等较小的数据，可以跨页面持久化数据。<font color="red">常用于记录用户信息、跟踪用户行为等</font>。</li>
<li><strong>Session</strong>：适用于存储用户会话中的临时信息，如购物车、登录状态等。<font color="red">更适合需要较高安全性的场景，因为数据存储在服务器端</font>。</li>
</ul>
<blockquote>
<p><strong>分布式环境下 Session 怎么处理呢？</strong></p>
<p>分布式环境下，客户端请求经过负载均衡，可能会分配到不同的服务器上，假如一个用户的请求两次没有落到同一台服务器上，那么在新的服务器上就没有记录用户状态的 Session。</p>
<p>可以使用 Redis 等分布式缓存来存储 Session，在多台服务器之间共享。</p>
</blockquote>
<blockquote>
<p><strong>客户端无法使用 Cookie 怎么办？</strong></p>
<p>有可能客户端无法使用 Cookie，比如浏览器禁用 Cookie，或者客户端是安卓、IOS 等等。</p>
<p>这时候怎么办？SessionID 怎么存？怎么传给服务端呢？首先是 SessionID 的存储，可以使用客户端的本地存储，比如浏览器的 sessionStorage。</p>
<p>接下来怎么传呢？</p>
<ul>
<li>拼接到 URL 里：直接把 SessionID 作为 URL 的请求参数</li>
<li>放到请求头里：把 SessionID 放到请求的 Header 里，比较常用。</li>
</ul>
</blockquote>
<h2 id="tcp" class="heading-element"><span>4 TCP</span>
  <a href="#tcp" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="详细说一下-tcp-的三次握手机制" class="heading-element"><span>4.1 详细说一下 TCP 的三次握手机制？</span>
  <a href="#%e8%af%a6%e7%bb%86%e8%af%b4%e4%b8%80%e4%b8%8b-tcp-%e7%9a%84%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e6%9c%ba%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP（Transmission Control Protocol）是一个<font color="red">面向连接的、可靠的、基于字节流的传输层协议</font>。TCP 通过三次握手机制来建立连接，确保双方准备就绪并能可靠地进行通信。以下是三次握手的详细过程：</p>
<ol start="11">
<li>
<p>第一次握手</p>
<ul>
<li><strong>客户端</strong>：发送一个带有 SYN 标志的 TCP 报文段（称为 SYN 报文段），并选择一个初始序列号 <code>seq = x</code>。</li>
<li><strong>服务器</strong>：收到这个 SYN 报文段后，服务器处于 “SYN_RCVD” 状态。</li>
<li><strong>目的</strong>：客户端通知服务器它希望建立连接，并告知服务器自己的初始序列号。</li>
</ul>
<p><strong>报文内容</strong>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">客户端 --&gt; 服务器: SYN, <span class="nv">seq</span> <span class="o">=</span> x</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>第二次握手</p>
<ul>
<li><strong>服务器</strong>：服务器收到 SYN 报文段后，回复一个带有 SYN 和 ACK 标志的 TCP 报文段（称为 SYN-ACK 报文段）。该报文段中包含服务器选择的初始序列号 <code>seq = y</code>，以及对客户端序列号 <code>x</code> 的确认 <code>ack = x + 1</code>。</li>
<li><strong>客户端</strong>：收到这个 SYN-ACK 报文段后，客户端处于 “ESTABLISHED” 状态。</li>
<li><strong>目的</strong>：服务器告诉客户端，它的连接请求被接受了，并通知客户端自己的初始序列号。</li>
</ul>
<p>报文内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">服务器 --&gt; 客户端: SYN, ACK, <span class="nv">seq</span> <span class="o">=</span> y, <span class="nv">ack</span> <span class="o">=</span> x + <span class="m">1</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>第三次握手</p>
<ul>
<li><strong>客户端</strong>：客户端收到 SYN-ACK 报文段后，回复一个带有 ACK 标志的 TCP 报文段（称为 ACK 报文段）。该报文段中包含对服务器序列号 <code>y</code> 的确认 <code>ack = y + 1</code>。</li>
<li><strong>服务器</strong>：收到这个 ACK 报文段后，服务器处于 “ESTABLISHED” 状态，连接建立完成。</li>
<li><strong>目的</strong>：客户端确认收到了服务器的同步应答，完成三次握手，建立连接。</li>
</ul>
<p><strong>报文内容</strong>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">客户端 --&gt; 服务器: ACK, <span class="nv">seq</span> <span class="o">=</span> x + 1, <span class="nv">ack</span> <span class="o">=</span> y + <span class="m">1</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/TCP三次握手.png" alt="image-20240602101211701" style="zoom: 33%;" />
<h3 id="tcp-握手为什么是三次为什么不能是两次不能是四次" class="heading-element"><span>4.2 TCP 握手为什么是三次，为什么不能是两次？不能是四次？</span>
  <a href="#tcp-%e6%8f%a1%e6%89%8b%e4%b8%ba%e4%bb%80%e4%b9%88%e6%98%af%e4%b8%89%e6%ac%a1%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e8%83%bd%e6%98%af%e4%b8%a4%e6%ac%a1%e4%b8%8d%e8%83%bd%e6%98%af%e5%9b%9b%e6%ac%a1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>使用三次握手可以建立一个可靠的连接。这一过程的目的是确保双方都知道对方已准备好进行通信，并同步双方的序列号，从而保持数据包的顺序和完整性。</p>
<p>两次握手无法确保连接的可靠性。具体原因如下：</p>
<ol>
<li><strong>旧的重复报文干扰</strong>：在两次握手情况下，旧的 SYN 报文可能会被错误地当作新的连接请求。如果服务器发送 SYN-ACK 报文后客户端没有响应，服务器会认为连接失败，但实际上客户端可能已经收到了 SYN-ACK 报文，这样就会导致服务器资源浪费和连接不一致。</li>
<li><strong>确认机制不完整</strong>：两次握手不能保证双方都能正确接收到对方的确认报文。服务器无法确认客户端是否收到了自己的 SYN-ACK 报文，而客户端也无法确认服务器是否收到了自己的 SYN 报文。</li>
</ol>
<p>四次握手在正常情况下是多余的，会增加连接建立的复杂性和开销。三次握手已经足够保证连接的可靠性和正确性：</p>
<ol>
<li><strong>增加复杂性和开销</strong>：四次握手会增加额外的一个报文传输，使得连接建立的过程变得复杂，不必要地增加了传输的延迟和开销。</li>
<li><strong>三次握手足够可靠</strong>：三次握手已经可以确保双方都能确认连接的建立，并且可以避免旧的重复报文的干扰，再增加一次握手并不会带来额外的安全性或可靠性提升。</li>
</ol>
<h3 id="三次握手中每一次没收到报文会发生什么情况" class="heading-element"><span>4.3 三次握手中每一次没收到报文会发生什么情况？</span>
  <a href="#%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e4%b8%ad%e6%af%8f%e4%b8%80%e6%ac%a1%e6%b2%a1%e6%94%b6%e5%88%b0%e6%8a%a5%e6%96%87%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88%e6%83%85%e5%86%b5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>在TCP三次握手的过程中，每一次没收到报文都会触发重传机制，并最终导致连接建立失败。具体情况如下：</p>
<ol>
<li>
<p>第一次握手：客户端发送 SYN 报文</p>
<ul>
<li>
<p><strong>情况</strong>：如果客户端发送的 SYN 报文没有收到服务器的 SYN-ACK 报文（比如报文丢失或服务器没有响应）。</p>
</li>
<li>
<p><strong>处理</strong>：客户端会进行超时重传。客户端在发送 SYN 报文后会启动一个定时器，如果在一定时间内没有收到服务器的响应（SYN-ACK 报文），客户端会重传 SYN 报文。</p>
</li>
<li>
<p><strong>结果</strong>：重传次数达到一定次数（通常是三次）后，客户端会放弃连接，报错并关闭连接请求。</p>
</li>
</ul>
</li>
<li>
<p>第二次握手：服务器发送 SYN-ACK 报文</p>
<ul>
<li>
<p><strong>情况</strong>：如果服务器发送的 SYN-ACK 报文没有收到客户端的 ACK 报文（比如报文丢失或客户端没有响应）。</p>
</li>
<li>
<p><strong>处理</strong>：服务器会进行超时重传。服务器在发送 SYN-ACK 报文后也会启动一个定时器，如果在一定时间内没有收到客户端的 ACK 报文，服务器会重传 SYN-ACK 报文。</p>
</li>
<li>
<p><strong>结果</strong>：重传次数达到一定次数后，服务器会放弃连接，报错并关闭连接请求。</p>
</li>
</ul>
</li>
<li>
<p>第三次握手：客户端发送 ACK 报文</p>
<ul>
<li>
<p><strong>情况</strong>：如果客户端发送的 ACK 报文没有收到服务器的确认（ACK 报文本身一般不会单独确认，但此处假设服务器未能进入 ESTABLISHED 状态）。</p>
</li>
<li>
<p><strong>处理</strong>：服务器会因为没有收到 ACK 报文而保持在 SYN-RECEIVED 状态，并可能最终超时并关闭连接。</p>
</li>
<li>
<p><strong>结果</strong>：客户端会认为连接已经建立，并进入 ESTABLISHED 状态，但如果服务器超时关闭连接，客户端在尝试发送数据时会发现连接无法使用，从而报错并关闭连接。</p>
</li>
</ul>
</li>
</ol>
<h3 id="第二次握手传回了-ack为什么还要传回-syn" class="heading-element"><span>4.4 第二次握手传回了 ACK，为什么还要传回 SYN？</span>
  <a href="#%e7%ac%ac%e4%ba%8c%e6%ac%a1%e6%8f%a1%e6%89%8b%e4%bc%a0%e5%9b%9e%e4%ba%86-ack%e4%b8%ba%e4%bb%80%e4%b9%88%e8%bf%98%e8%a6%81%e4%bc%a0%e5%9b%9e-syn" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>ACK 标志是为了告诉客户端，它发送的 SYN 报文已经被服务器正确接收。</p>
<p>而传回 SYN 是为了告诉客户端，服务器也希望建立连接，并且响应的确实是客户端发送的报文。</p>
<h3 id="第-3-次握手可以携带数据吗" class="heading-element"><span>4.5 第 3 次握手可以携带数据吗？</span>
  <a href="#%e7%ac%ac-3-%e6%ac%a1%e6%8f%a1%e6%89%8b%e5%8f%af%e4%bb%a5%e6%90%ba%e5%b8%a6%e6%95%b0%e6%8d%ae%e5%90%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>第 3 次握手是可以携带数据的。此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，它已经建立连接成功，并且确认服务端的接收和发送能力是正常的。</p>
<p>但实际应用中通常不会携带数据，因为在第三次握手中发送数据可能会引发安全和可靠性问题。此时连接还未完全建立，发送数据可能导致数据丢失或安全漏洞。</p>
<p>第一次握手不能携带数据是出于安全的考虑，因为如果允许携带数据，攻击者每次在 SYN 报文中携带大量数据，就会导致服务端消耗更多的时间和空间去处理这些报文，会造成 CPU 和内存的消耗。</p>
<h3 id="说说半连接队列和-syn-flood-攻击的关系" class="heading-element"><span>4.6 说说半连接队列和 SYN Flood 攻击的关系？</span>
  <a href="#%e8%af%b4%e8%af%b4%e5%8d%8a%e8%bf%9e%e6%8e%a5%e9%98%9f%e5%88%97%e5%92%8c-syn-flood-%e6%94%bb%e5%87%bb%e7%9a%84%e5%85%b3%e7%b3%bb" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP 进入三次握手前，服务端会从 <strong>CLOSED</strong> 状态变为 <strong>LISTEN</strong> 状态, 同时在内部创建了两个队列：半连接队列（SYN 队列）和全连接队列（ACCEPT 队列）。</p>
<p>半连接队列（Half-Open Connection Queue）是指在 TCP 三次握手过程中，服务器在收到客户端的 SYN 报文后，返回 SYN-ACK 报文并等待客户端的 ACK 报文确认连接的这段时间内，服务器为每个未完成的连接分配的资源队列。</p>
<p><font color="red">SYN Flood 攻击是指攻击者发送大量的 SYN 报文请求与服务器建立连接，但在服务器返回 SYN-ACK 报文后，攻击者不发送最终的 ACK 报文完成握手</font>。这样，服务器的半连接队列会被大量未完成的连接占满，导致服务器资源耗尽，无法处理正常的连接请求，进而造成拒绝服务（Denial of Service，DoS）。</p>
<p>因此，SYN Flood 攻击的核心在于利用半连接队列的有限资源，通过大量伪造的连接请求使服务器无法处理合法用户的连接。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/SYN_Flood_Example.png" alt="2fad1ef85054585e10ddeed7a3346a26" style="zoom:50%;" />
<blockquote>
<p><strong>那有什么应对方案呢？</strong></p>
<p>主要有 <strong>syn cookie</strong> 和 <strong>SYN Proxy 防火墙</strong>等。</p>
<ul>
<li><strong>syn cookie</strong>：在收到 SYN 包后，服务器根据一定的方法，以数据包的源地址、端口等信息为参数计算出一个 cookie 值作为自己的 SYNACK 包的序列号，回复 SYN+ACK 后，服务器并不立即分配资源进行处理，等收到发送方的 ACK 包后，重新根据数据包的源地址、端口计算该包中的确认序列号是否正确，如果正确则建立连接，否则丢弃该包。</li>
<li><strong>SYN Proxy 防火墙</strong>：服务器防火墙会对收到的每一个 SYN 报文进行代理和回应，并保持半连接。等发送方将 ACK 包返回后，再重新构造 SYN 包发到服务器，建立真正的 TCP 连接。</li>
<li><strong>缩短 SYN-ACK 超时时间</strong>：调整系统的 SYN-ACK 超时时间，使未完成的连接请求能够更快地被清理出队列。</li>
<li><strong>分布式拒绝服务防护（DDoS Protection Services）</strong>：使用专业的 DDoS 防护服务，如 Cloudflare、Akamai 等，这些服务可以在网络边缘过滤恶意流量，减轻服务器的压力。</li>
</ul>
</blockquote>
<h3 id="说说-tcp-四次挥手的过程" class="heading-element"><span>4.7 说说 TCP 四次挥手的过程？</span>
  <a href="#%e8%af%b4%e8%af%b4-tcp-%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b%e7%9a%84%e8%bf%87%e7%a8%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP 四次挥手是指 TCP 连接终止时所进行的四个步骤，数据传输结束之后，通信双方都可以主动发起断开连接请求，这里假定客户端发起（通常是客户端），具体过程如下：</p>
<ol>
<li><strong>第一次挥手：FIN 报文</strong>：
<ul>
<li>客户端发送一个 FIN 报文段，表明它已经完成了数据发送，请求关闭连接。客户端进入 <strong>FIN_WAIT_1</strong> 状态。</li>
<li>报文段格式：<code>FIN=1, seq=x</code>。</li>
</ul>
</li>
<li><strong>第二次挥手：ACK 报文</strong>：
<ul>
<li>服务器接收到 FIN 报文后，返回一个 ACK 报文段，确认收到了关闭请求。发送完毕后，服务器端进入 <strong>CLOSE_WAIT</strong> 状态，客户端接收到这个确认包之后，进入 <strong>FIN_WAIT_2</strong> 状态。</li>
<li>报文段格式：<code>ACK=1, ack=x+1</code>。</li>
<li>此时，服务器可能还需要继续发送数据，因此连接处于半关闭状态。</li>
</ul>
</li>
<li><strong>第三次挥手：FIN 报文</strong>：
<ul>
<li>服务端在完成数据发送后，发送一个 FIN 报文段，表明它也已经完成了数据发送，请求关闭连接。发送完毕后，服务器端进入 <strong>LAST_ACK</strong> 状态，等待来自客户端的最后一个 ACK。</li>
<li>报文段格式：<code>FIN=1, seq=y</code>。</li>
</ul>
</li>
<li><strong>第四次挥手：ACK 报文</strong>：
<ul>
<li>客户端接收到 FIN 报文后，返回一个 ACK 报文段，确认收到了关闭请求，并进入 TIME_WAIT 状态，<strong>等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后</strong>，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</li>
<li>报文段格式：<code>ACK=1, ack=y+1</code>。</li>
<li>此时，连接正式关闭，双方都完成了连接的释放。</li>
</ul>
</li>
</ol>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/TCP_Close_Example.png" alt="image-20240602130755941" style="zoom: 67%;" />
<h3 id="tcp-挥手为什么需要四次呢" class="heading-element"><span>4.8 TCP 挥手为什么需要四次呢？。</span>
  <a href="#tcp-%e6%8c%a5%e6%89%8b%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e5%9b%9b%e6%ac%a1%e5%91%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>关闭连接时，客户端向服务端发送 <code>FIN</code> 时，仅仅表示客户端不再发送数据了但是还能接收数据。</li>
<li>服务端收到客户端的 <code>FIN</code> 报文时，先回一个 <code>ACK</code> 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 <code>FIN</code> 报文给客户端来表示同意现在关闭连接。</li>
</ul>
<p>从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 <code>ACK</code> 和 <code>FIN</code> 一般都会分开发送，从而比三次握手导致多了一次。</p>
<h3 id="tcp-四次挥手过程中为什么需要等待-2msl-才进入-closed-关闭状态" class="heading-element"><span>4.9 TCP 四次挥手过程中，为什么需要等待 2MSL, 才进入 CLOSED 关闭状态？</span>
  <a href="#tcp-%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b%e8%bf%87%e7%a8%8b%e4%b8%ad%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e7%ad%89%e5%be%85-2msl-%e6%89%8d%e8%bf%9b%e5%85%a5-closed-%e5%85%b3%e9%97%ad%e7%8a%b6%e6%80%81" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ol>
<li><strong>为了保证客户端发送的最后一个 ACK 报文段能够到达服务端。</strong> 这个 ACK 报文段有可能丢失，因而使处在 <strong>LAST-ACK</strong> 状态的服务端就收不到对已发送的 <strong>FIN</strong> 报文段的确认。服务端会超时重传这个 <strong>FIN</strong> 报文段，而客户端就能在 2MSL 时间内（<strong>超时 + 1MSL 传输</strong>）收到这个重传的 FIN 报文段。接着客户端重传一次确认，重新启动 2MSL 计时器。最后，客户端和服务器都正常进入到 <strong>CLOSED</strong> 状态。</li>
<li><strong>防止已失效的连接请求报文段出现在本连接中</strong>。客户端在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。</li>
</ol>
<blockquote>
<p><strong>为什么等待的时间是 2MSL？</strong></p>
<p>MSL 是 Maximum Segment Lifetime，报⽂最⼤⽣存时间，它是任何报⽂在⽹络上存在的最⻓时间，超过这个时间报⽂将被丢弃。</p>
<p>TIME_WAIT 等待 2 倍的 MSL，⽐较合理的解释是：⽹络中可能存在来⾃发送⽅的数据包，当这些发送⽅的数据包被接收⽅处理后⼜会向对⽅发送响应，所以⼀来⼀回需要等待 <strong>2</strong> 倍的时间。</p>
</blockquote>
<h3 id="保活计时器有什么用" class="heading-element"><span>4.10 保活计时器有什么用？</span>
  <a href="#%e4%bf%9d%e6%b4%bb%e8%ae%a1%e6%97%b6%e5%99%a8%e6%9c%89%e4%bb%80%e4%b9%88%e7%94%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>除时间等待计时器外，TCP 还有一个保活计时器（keepalive timer），用于在长时间闲置的 TCP 连接中检测对端是否仍然存活，<strong>并防止连接因为长时间没有活动而被认为是不活跃的而被关闭</strong>。</p>
<p>设想这样的场景：客户已主动与服务器建立了 TCP 连接。但后来客户端的主机突然发生故障。显然，服务器以后就不能再收到客户端发来的数据。因此，应当有措施使服务器不要再白白等待下去。这就需要使用保活计时器了。</p>
<p>服务器每收到一次客户端的数据，就重新设置保活计时器，时间的设置通常是两个小时。若两个小时都没有收到客户端的数据，服务端就发送一个探测报文段，以后则每隔 75 秒钟发送一次。若连续发送 10 个探测报文段后仍然无客户端的响应，服务端就认为客户端出了故障，接着就关闭这个连接。</p>
<h3 id="close-wait-和-time-wait-的状态和意义" class="heading-element"><span>4.11 <code>CLOSE-WAIT</code> 和 <code>TIME-WAIT</code> 的状态和意义？</span>
  <a href="#close-wait-%e5%92%8c-time-wait-%e7%9a%84%e7%8a%b6%e6%80%81%e5%92%8c%e6%84%8f%e4%b9%89" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><blockquote>
<p><strong>CLOSE-WAIT 状态有什么意义？</strong></p>
</blockquote>
<p>服务端收到客户端关闭连接的请求并确认之后，就会进入 CLOSE-WAIT 状态。此时服务端可能还有一些数据没有传输完成，因此不能立即关闭连接，而<font color="red"> CLOSE-WAIT 状态就是为了保证服务端在关闭连接之前将待发送的数据处理完</font>。</p>
<blockquote>
<p><strong>TIME-WAIT 有什么意义？</strong></p>
</blockquote>
<p>TIME-WAIT 状态发生在第四次挥手，当客户端向服务端发送 ACK 确认报文后进入 TIME-WAIT 状态。</p>
<ul>
<li><strong>防⽌旧连接的数据包</strong></li>
<li><strong>保证连接正确关闭</strong></li>
</ul>
<h3 id="time_wait-状态过多会导致什么问题怎么解决" class="heading-element"><span>4.12 <code>TIME_WAIT</code> 状态过多会导致什么问题？怎么解决？</span>
  <a href="#time_wait-%e7%8a%b6%e6%80%81%e8%bf%87%e5%a4%9a%e4%bc%9a%e5%af%bc%e8%87%b4%e4%bb%80%e4%b9%88%e9%97%ae%e9%a2%98%e6%80%8e%e4%b9%88%e8%a7%a3%e5%86%b3" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><blockquote>
<p><strong>TIME_WAIT 状态过多会导致什么问题?</strong></p>
</blockquote>
<p>如果服务器有处于 TIME-WAIT 状态的 TCP，则说明是由服务器⽅主动发起的断开请求。</p>
<blockquote>
<p><strong>什么场景下服务端会主动断开连接呢？</strong></p>
<ul>
<li>HTTP 没有使用长连接</li>
<li>HTTP 长连接超时</li>
<li>HTTP 长连接的请求数量达到上限</li>
</ul>
</blockquote>
<p>过多的 TIME-WAIT 状态主要的危害有两种：</p>
<ol>
<li><strong>端口资源耗尽</strong>：每个处于 <code>TIME_WAIT</code> 状态的连接都会占用一个本地端口。如果 <code>TIME_WAIT</code> 状态的连接过多，可能会导致可用的本地端口资源耗尽，新的连接请求无法分配端口，从而导致服务不可用。</li>
<li><strong>内存和资源占用</strong>：<code>TIME_WAIT</code> 状态的连接会占用一定的系统内存和资源。如果连接过多，会导致系统资源被大量占用，影响服务器的性能和其他应用的运行。</li>
</ol>
<blockquote>
<p><strong>怎么解决 TIME_WAIT 状态过多？</strong></p>
</blockquote>
<ul>
<li>服务器可以设置 <code>SO_REUSEADDR</code> 套接字来通知内核，如果端口被占用，但是 TCP 连接位于 TIME_WAIT 状态时可以重用端口。</li>
<li>还可以使用长连接的方式来减少 TCP 的连接和断开，在长连接的业务里往往不需要考虑 TIME_WAIT 状态。</li>
</ul>
<h3 id="说说-tcp-报文头部的格式" class="heading-element"><span>4.13 说说 TCP 报文头部的格式？</span>
  <a href="#%e8%af%b4%e8%af%b4-tcp-%e6%8a%a5%e6%96%87%e5%a4%b4%e9%83%a8%e7%9a%84%e6%a0%bc%e5%bc%8f" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>一个 TCP 报文段主要由报文段头部（Header）和数据两部分组成。头部包含了确保数据可靠传输所需的各种控制信息，比如说序列号、确认号、窗口大小等。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mathematica" data-lang="mathematica"><span class="line"><span class="cl"><span class="w">  </span><span class="mi">0</span><span class="w">                   </span><span class="mi">1</span><span class="w">                   </span><span class="mi">2</span><span class="w">                   </span><span class="mi">3</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="mi">0</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">7</span><span class="w"> </span><span class="mi">8</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">7</span><span class="w"> </span><span class="mi">8</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">7</span><span class="w"> </span><span class="mi">8</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">          </span><span class="n">Source</span><span class="w"> </span><span class="n">Port</span><span class="w">          </span><span class="o">|</span><span class="w">       </span><span class="n">Destination</span><span class="w"> </span><span class="n">Port</span><span class="w">        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">                        </span><span class="n">Sequence</span><span class="w"> </span><span class="n">Number</span><span class="w">                        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">                    </span><span class="n">Acknowledgment</span><span class="w"> </span><span class="n">Number</span><span class="w">                      </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">  </span><span class="n">Data</span><span class="w"> </span><span class="o">|</span><span class="n">Reser</span><span class="o">-|</span><span class="w">       </span><span class="n">Flags</span><span class="w">     </span><span class="o">|</span><span class="w">                               </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Offset</span><span class="o">|</span><span class="n">ved</span><span class="w">   </span><span class="o">|</span><span class="w">       </span><span class="p">(</span><span class="mi">6</span><span class="w"> </span><span class="n">bits</span><span class="p">)</span><span class="w">  </span><span class="o">|</span><span class="w">        </span><span class="n">Window</span><span class="w">                </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">  </span><span class="p">(</span><span class="mi">4</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="p">(</span><span class="mi">6</span><span class="w">   </span><span class="o">|</span><span class="w">       </span><span class="o">|</span><span class="w">         </span><span class="o">|</span><span class="w">                               </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">  </span><span class="n">bits</span><span class="p">)</span><span class="o">|</span><span class="w"> </span><span class="n">bits</span><span class="p">)</span><span class="o">|</span><span class="w">       </span><span class="o">|</span><span class="w">         </span><span class="o">|</span><span class="w">                               </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">       </span><span class="n">Checksum</span><span class="w">                </span><span class="o">|</span><span class="w">     </span><span class="n">Urgent</span><span class="w"> </span><span class="n">Pointer</span><span class="w">            </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">                       </span><span class="n">Options</span><span class="w"> </span><span class="p">(</span><span class="n">if</span><span class="w"> </span><span class="n">any</span><span class="p">)</span><span class="w">                        </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">                                                               </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">                        </span><span class="n">data</span><span class="w">                                   </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">|</span><span class="w">                                                               </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="o">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>源端口号</strong>（Source Port）：16 位（2 个字节），用于标识发送端的应用程序。</li>
<li><strong>目标端口号</strong>（Destination Port）：也是 16 位，用于标识接收端的应用程序。</li>
<li><strong>序列号</strong>（Sequence Number）：32 位，用于标识从 TCP 发送者发送的数据字节流中的第一个字节的顺序号。确保数据按顺序接收。</li>
<li><strong>确认号</strong>（Acknowledgment Number）：32 位，如果 ACK 标志被设置，则该字段包含发送确认的序列号，即接收 TCP 希望收到的下一个序列号。</li>
<li><strong>数据偏移</strong>（Data Offset）：4 位，表示 TCP 报文头部的长度，用于指示数据开始的位置。</li>
<li><strong>保留</strong>（Reserved）：6 位，为将来使用预留，目前必须置为 0。</li>
<li><strong>控制位</strong>（Flags）：共 6 位，包括 URG（紧急指针字段是否有效）、ACK（确认字段是否有效）、PSH（提示接收端应该尽快将这个报文段交给应用层）、RST（重置连接）、SYN（同步序号，用于建立连接）、FIN（结束发送数据）。</li>
<li><strong>窗口大小</strong>（Window）：16 位，用于流量控制，表示接收端还能接收的数据的字节数（基于接收缓冲区的大小）。</li>
<li><strong>校验和</strong>（Checksum）：16 位，覆盖整个 TCP 报文段（包括 TCP 头部、数据和一个伪头部）的校验和，用于检测数据在传输过程中的任何变化。</li>
<li><strong>紧急指针</strong>（Urgent Pointer）：16 位，只有当 URG 控制位被设置时才有效，指出在报文段中有紧急数据的位置。</li>
</ul>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/TCP_Data_Format_Example.png" alt="1f7ade5afa610376a72553a7d32f622c" style="zoom:50%;" />
<h3 id="tcp-是如何保证可靠性的" class="heading-element"><span>4.14 TCP 是如何保证可靠性的？</span>
  <a href="#tcp-%e6%98%af%e5%a6%82%e4%bd%95%e4%bf%9d%e8%af%81%e5%8f%af%e9%9d%a0%e6%80%a7%e7%9a%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP（传输控制协议）通过多种机制来确保数据传输的可靠性。以下是TCP保证可靠性的主要方法：</p>
<ol>
<li><strong>连接管理（Connection Management）</strong>：TCP 使用三次握手（Three-Way Handshake）建立连接和四次挥手（Four-Way Handshake）关闭连接，确保连接的建立和释放过程可靠、无误。</li>
<li><strong>校验和（Checksum）</strong>：TCP 报文段包含一个校验和字段，用于验证报文段在传输过程中是否被损坏。发送方计算并填充校验和，接收方根据接收到的数据重新计算校验和并进行验证，确保数据的完整性。</li>
<li><strong>序列号（Sequence Numbers）</strong>：TCP 为每个字节分配一个序列号。发送方和接收方使用序列号来确保数据按照正确的顺序接收并重组，防止数据丢失或重复。</li>
<li><strong>确认应答（Acknowledgments, ACKs）</strong>：TCP 使用确认应答机制来确认数据的接收。接收方在收到数据后，会发送一个带有确认号的ACK报文段，告知发送方已成功接收到的数据。<strong>这种机制确保了数据的传递和确认</strong>。</li>
<li><strong>拥塞控制（Congestion Control）</strong>：TCP 通过慢启动、拥塞避免、快重传和快恢复等算法来防止网络拥塞，保证数据传输的稳定性和可靠性。</li>
<li><strong>流量控制（Flow Control）</strong>：TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。（TCP 利用滑动窗口实现流量控制）</li>
<li><strong>重传机制（Retransmission）</strong>：发送方在发送数据后会启动一个计时器。如果在指定时间内未收到对应的ACK报文段，发送方会认为该数据包丢失并进行重传。TCP还使用快速重传机制，当收到三个重复的ACK时，立即重传相应的数据包。</li>
<li><strong>最大消息长度（Maximum Message Length）</strong>：在建立 TCP 连接的时候，双方约定一个最大的长度（MSS）作为发送的单位，重传的时候也是以这个单位来进行重传。理想的情况下是该长度的数据刚好不被网络层分块。</li>
</ol>
<h3 id="说说-tcp-的流量控制" class="heading-element"><span>4.15 说说 TCP 的流量控制？</span>
  <a href="#%e8%af%b4%e8%af%b4-tcp-%e7%9a%84%e6%b5%81%e9%87%8f%e6%8e%a7%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP 提供了一种机制，可以让发送端根据接收端的实际接收能力控制发送的数据量，以确保接收方能够及时处理数据而不会因为数据过多而溢出缓冲区，这就是<strong>流量控制</strong>。</p>
<p>TCP 的流量控制主要通过滑动窗口（Sliding Window）机制来实现。示例如下：</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Flow_Control_Example_1.png" alt="97365f7a32a87ad913ceca13f1325e10_720" style="zoom:50%;" />
<h3 id="详细说说-tcp-的滑动窗口" class="heading-element"><span>4.16 详细说说 TCP 的滑动窗口？</span>
  <a href="#%e8%af%a6%e7%bb%86%e8%af%b4%e8%af%b4-tcp-%e7%9a%84%e6%bb%91%e5%8a%a8%e7%aa%97%e5%8f%a3" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP 发送一个数据，如果需要收到确认应答，才会发送下一个数据。这样的话就会有个缺点：效率会比较低。而滑动窗口允许发送方在未接收到 ACK 确认之前可以发送多个数据段，以提高网络的利用率和传输效率，同时避免了发送方过度发送导致接收方缓冲区溢出。</p>
<p>TCP 滑动窗口分为两种: 发送窗口和接收窗口。<strong>发送端的滑动窗口</strong>包含四大部分，如下：</p>
<ul>
<li>已发送且已收到 ACK 确认</li>
<li>已发送但未收到 ACK 确认</li>
<li>未发送但可以发送</li>
<li>未发送也不可以发送</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Send_Window_Example_1.png?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Send_Window_Example_1.png?size=small" data-sub-html="<h2>18481a6fdea7f130edac0e46840cc015_720</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Send_Window_Example_1.png" alt="18481a6fdea7f130edac0e46840cc015_720" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Send_Window_Example_1.png?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Send_Window_Example_1.png?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Send_Window_Example_1.png?size=large 2x" data-title="18481a6fdea7f130edac0e46840cc015_720" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>蓝色框里就是发送窗口。SND.WND 表示发送窗口的大小，SND.NXT表示下一个发送的位置，它指向未发送但可以发送的第一个字节的序列号；SND.UNA: 一个绝对指针，它指向的是已发送但未确认的第一个字节的序列号。</p>
<p>接收方的滑动窗口包含三大部分，如下：</p>
<ul>
<li>已成功接收并确认</li>
<li>未收到数据但可以接收</li>
<li>未收到数据并不可以接收的数据</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Receive_Window_Example_1.png?size=large" data-thumbnail="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Receive_Window_Example_1.png?size=small" data-sub-html="<h2>154b2bfeb394bbae15f76d48be668ca6_720</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Receive_Window_Example_1.png" alt="154b2bfeb394bbae15f76d48be668ca6_720" srcset="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Receive_Window_Example_1.png?size=small, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Receive_Window_Example_1.png?size=medium 1.5x, https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Receive_Window_Example_1.png?size=large 2x" data-title="154b2bfeb394bbae15f76d48be668ca6_720" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>蓝色框内，就是接收窗口。REV.WND 表示接收窗口的大小；REV.NXT表示下一个接收的位置，它指向未收到但可以接收的第一个字节的序列号。</p>
<p>发送方和接收方通过 ACK 确认报文段来协商窗口大小。发送方根据接收方的接收窗口大小来调整自己的发送窗口大小，以确保不会发送超出接收方能力的数据量。</p>
<h3 id="了解-nagle-算法和延迟确认吗" class="heading-element"><span>4.17 了解 Nagle 算法和延迟确认吗？</span>
  <a href="#%e4%ba%86%e8%a7%a3-nagle-%e7%ae%97%e6%b3%95%e5%92%8c%e5%bb%b6%e8%bf%9f%e7%a1%ae%e8%ae%a4%e5%90%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><blockquote>
<p><strong>Nagle 算法和延迟确认是干什么的？</strong></p>
</blockquote>
<p>当我们 TCP 报⽂的承载的数据⾮常⼩的时候，例如⼏个字节，那么整个⽹络的效率是很低的，因为每个 TCP 报⽂中都会有 20 个字节的 TCP 头部，也会有 20 个字节的 IP 头部，⽽数据只有⼏个字节，所以在整个报⽂中有效数据占有的比例就会⾮常低。</p>
<p>那么就出现了常⻅的两种策略，来减少⼩报⽂的传输，分别是：</p>
<ul>
<li><strong>Nagle 算法</strong>：当应用程序发送数据时，Nagle 算法会先将数据放入缓冲区，并等待一定的时间（称为 Nagle 算法定时器），<strong>以便将多个小数据包合并成一个大数据包一起发送</strong>。只有当缓冲区中的数据量达到一定阈值（Nagle 算法的最小传输单元）或者定时器超时时，才会触发数据的发送。<font color="red">Nagle 算法主要用于避免发送大量小数据包的情况，从而减少网络的拥塞，提高网络的性能和效率</font>。</li>
<li><strong>延迟确认</strong>：当接收方收到数据时，不会立即发送 ACK 确认报文，而是等待一段时间（一般是等待 200 毫秒左右），以便将多个 ACK 合并成一个 ACK 一起发送。如果在延迟时间内收到新的数据包，则会立即发送 ACK 报文，以确认收到的数据。<font color="red">延迟确认主要用于减少确认报文的数量，避免网络中出现过多的 ACK 报文，从而减少网络的负载和提高网络的吞吐量</font>。</li>
</ul>
<p>一般情况下，<strong>Nagle 算法和延迟确认</strong>不能一起使用，Nagle 算法意味着延迟发，<strong>延迟确认</strong>意味着延迟接收，两个凑在一起就会造成更大的延迟，会产生性能问题。</p>
<h3 id="说说-tcp-的拥塞控制" class="heading-element"><span>4.18 说说 TCP 的拥塞控制？</span>
  <a href="#%e8%af%b4%e8%af%b4-tcp-%e7%9a%84%e6%8b%a5%e5%a1%9e%e6%8e%a7%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><blockquote>
<p><strong>什么是拥塞控制？不是有了流量控制吗？</strong></p>
</blockquote>
<p>前⾯的流量控制是避免发送⽅的数据填满接收⽅的缓存，但是并不知道整个⽹络之中发⽣了什么。</p>
<p>⼀般来说，计算机⽹络都处在⼀个共享的环境。因此也有可能会因为其他主机之间的通信使得⽹络拥堵。</p>
<p>在⽹络出现拥堵时，如果继续发送⼤量数据包，可能会导致数据包时延、丢失等，这时 <strong>TCP</strong> 就会重传数据，但是⼀重传就会导致⽹络的负担更重，于是会导致更⼤的延迟以及更多的丢包，这个情况就会进⼊恶性循环被不断地放⼤&hellip;.</p>
<p>所以，TCP 不能忽略整个网络中发⽣的事，它被设计成⼀个⽆私的协议，当⽹络发送拥塞时，TCP 会⾃我牺牲，降低发送的数据流。</p>
<p>于是，就有了拥塞控制，控制的⽬的就是避免发送⽅的数据填满整个⽹络。</p>
<p>发送方维护一个<strong>拥塞窗口 cwnd（congestion window）</strong> 的变量，调节所要发送数据的量。</p>
<blockquote>
<p><strong>什么是拥塞窗⼝？和发送窗⼝有什么关系呢？</strong></p>
</blockquote>
<p>拥塞窗⼝ <strong>cwnd</strong>是发送⽅维护的⼀个的状态变量，它会根据⽹络的拥塞程度动态变化的。</p>
<p>发送窗⼝ swnd 和接收窗⼝ rwnd 是约等于的关系，那么由于加⼊了拥塞窗⼝的概念后，此时发送窗⼝的值是 swnd = min(cwnd, rwnd)，也就是拥塞窗⼝和接收窗⼝中的最⼩值。</p>
<p>拥塞窗⼝ cwnd 变化的规则：</p>
<ul>
<li>只要⽹络中没有出现拥塞， cwnd 就会增⼤；</li>
<li>但⽹络中出现了拥塞， cwnd 就减少；</li>
</ul>
<blockquote>
<p><strong>拥塞控制有哪些常用算法？</strong></p>
</blockquote>
<p>拥塞控制主要有这几种常用算法：</p>
<ul>
<li><strong>慢启动</strong>：先发出少量数据，就像探路一样，先摸清当前的网络拥堵状态后，再决定按照多大的速度传送数据）</li>
<li><strong>拥塞避免</strong>：在拥塞避免阶段，TCP的拥塞窗口以线性增长的方式增加，而不是指数级增长</li>
<li><strong>快重传</strong>：发送方不必等待超时计时器的到期，而是立即进行快速重传，重传丢失的数据包</li>
<li><strong>快恢复</strong>：快恢复算法用于在收到重复ACK时，迅速调整拥塞窗口大小以恢复传输速度</li>
</ul>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/Congestion_Control_Example_1.png" alt="f2bf90ccdfa385562fd6f475cc4f692f_720" style="zoom:50%;" />
<h3 id="说说-tcp-的重传机制" class="heading-element"><span>4.19 说说 TCP 的重传机制？</span>
  <a href="#%e8%af%b4%e8%af%b4-tcp-%e7%9a%84%e9%87%8d%e4%bc%a0%e6%9c%ba%e5%88%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP 的重传机制是确保数据传输可靠性的重要部分之一。它通过在发送方定时器超时或者接收到连续的重复确认时触发，重新发送丢失或者未确认的数据段，以确保数据能够在网络中正确传输。以下是 TCP 的重传机制的主要原理：</p>
<ol>
<li><strong>超时重传</strong>：当发送方发送数据后，在等待一定时间内未收到确认 ACK 报文时，触发超时重传机制，重新发送未确认的数据段。超时时间通常根据网络往返时间（RTT）动态调整，以适应网络延迟的变化。</li>
<li><strong>快速重传</strong>：当发送方接收到连续的重复 ACK 报文时，表明接收方已经成功接收了一些数据，但有一个或多个数据段丢失。<font color="red">为了尽快重传丢失的数据段，发送方立即触发快速重传机制，重新发送丢失的数据段，而不必等待超时定时器的到期</font>。</li>
<li><strong>带选择确认的重传（SACK）</strong>：选择确认（SACK）为了解决应该重传多少个包的问题，允许接收方在确认报文中指示出连续的数据段中哪些已经成功接收，哪些丢失了。发送方可以根据 SACK 报文中指示的丢失数据段信息，选择性地进行重传，而不是重传整个窗口内的所有未确认数据段。</li>
<li><strong>重复 SACK</strong>：是在 SACK 的基础上做了一些扩展，在接收方收到连续的重复数据段时，会生成多个相同的 SACK 报文，用于指示哪些数据段已经成功接收。主要用来告诉发送方，有哪些数据包，自己重复接受了。DSACK 的目的是帮助发送方判断，是否发生了包失序、ACK 丢失、包重复或伪重传。让 TCP 可以更好的做网络流控。</li>
</ol>
<h3 id="说说-tcp-的粘包和拆包" class="heading-element"><span>4.20 说说 TCP 的粘包和拆包？</span>
  <a href="#%e8%af%b4%e8%af%b4-tcp-%e7%9a%84%e7%b2%98%e5%8c%85%e5%92%8c%e6%8b%86%e5%8c%85" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP 是面向流，没有界限的一串数据。TCP 底层并不了解上层业务数据的具体含义，它会根据 TCP 缓冲区的实际情况进行包的划分。</p>
<p><strong>粘包</strong>指的是在 TCP 连接中，发送方发送的多个数据包在接收方接收时被合并成一个数据包。这种情况通常发生在以下几种场景中：</p>
<ol>
<li>发送方发送数据过于频繁，发送的数据量较小，多个小数据包在发送时被合并成一个数据包。Nagle 算法的作用使得发送方在网络未确认前将小数据包合并发送。</li>
<li>接收方读取数据不及时，一次性读取多个数据包。</li>
</ol>
<p><strong>拆包</strong>指的是一个完整的数据包在接收方接收时被拆分成了多个数据包。这种情况通常发生在以下几种场景中：</p>
<ol>
<li>网络传输过程中，由于 MTU（最大传输单元）的限制，一个大的数据包被拆分成多个小的数据包进行传输。</li>
<li>待发送数据大于 MSS（最大报文长度），TCP 在传输前将进行拆包。即 TCP 报文长度 - TCP 头部长度 &gt; MSS。</li>
</ol>
<blockquote>
<p><strong>那怎么解决呢？</strong></p>
</blockquote>
<ul>
<li>发送端将每个数据包封装为固定长度；</li>
<li>在数据尾部增加特殊字符进行分割；</li>
<li>将数据分为两部分，一部分是头部，一部分是内容体；其中头部结构大小固定，且有一个字段声明内容体的大小；</li>
<li>设计特定的应用层协议，包含数据包头部（例如，标识符、长度字段、校验和等）和数据部分。接收方根据协议解析数据包。</li>
</ul>
<h3 id="如果已经建立了连接但是服务端的进程崩溃会发生什么服务器断电呢" class="heading-element"><span>4.21 如果已经建立了连接，但是服务端的进程崩溃会发生什么？服务器断电呢？</span>
  <a href="#%e5%a6%82%e6%9e%9c%e5%b7%b2%e7%bb%8f%e5%bb%ba%e7%ab%8b%e4%ba%86%e8%bf%9e%e6%8e%a5%e4%bd%86%e6%98%af%e6%9c%8d%e5%8a%a1%e7%ab%af%e7%9a%84%e8%bf%9b%e7%a8%8b%e5%b4%a9%e6%ba%83%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%96%ad%e7%94%b5%e5%91%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP 的连接信息是由内核维护的，所以当服务端的进程崩溃后，内核需要回收该进程的所有 TCP 连接资源，于是内核会发送第一次挥手 FIN 报文，后续的挥手过程也都是在内核完成，并不需要进程的参与，所以即使服务端的进程退出了，还是能与客户端完成 TCP 四次挥手的过程。</p>
<p>当服务器断电时，情况会有所不同：客户端在尝试与服务器通信时，会发现连接中断，通常会收到一个错误（如 <code>ECONNRESET</code> 或 <code>ETIMEDOUT</code>），客户端的应用程序需要处理这个错误，并可能尝试重新建立连接或采取其他应对措施。</p>
<h3 id="如果已经建立了连接但是客户端突然出现故障了怎么办" class="heading-element"><span>4.22 如果已经建立了连接，但是客户端突然出现故障了怎么办？</span>
  <a href="#%e5%a6%82%e6%9e%9c%e5%b7%b2%e7%bb%8f%e5%bb%ba%e7%ab%8b%e4%ba%86%e8%bf%9e%e6%8e%a5%e4%bd%86%e6%98%af%e5%ae%a2%e6%88%b7%e7%ab%af%e7%aa%81%e7%84%b6%e5%87%ba%e7%8e%b0%e6%95%85%e9%9a%9c%e4%ba%86%e6%80%8e%e4%b9%88%e5%8a%9e" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>客户端出现故障指的是客户端的主机发生了宕机，或者断电的场景。发生这种情况的时候，如果服务端一直不会发送数据给客户端，那么服务端是永远无法感知到客户端宕机这个事件的，也就是服务端的 TCP 连接将一直处于 <code>ESTABLISH</code> 状态，占用着系统资源。</p>
<p>为了避免这种情况，TCP 搞了个<strong>保活机制</strong>。这个机制的原理是这样的：</p>
<p>定义一个时间段，在这个时间段内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，每隔一个时间间隔，发送一个探测报文，该探测报文包含的数据非常少，如果连续几个探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序。</p>
<h3 id="服务器出现大量-close_wait-状态的原因有哪些" class="heading-element"><span>4.23 服务器出现大量 CLOSE_WAIT 状态的原因有哪些？</span>
  <a href="#%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%87%ba%e7%8e%b0%e5%a4%a7%e9%87%8f-close_wait-%e7%8a%b6%e6%80%81%e7%9a%84%e5%8e%9f%e5%9b%a0%e6%9c%89%e5%93%aa%e4%ba%9b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>CLOSE_WAIT 状态是【被动关闭方】才会有的状态，而且如果【被动关闭方】没有调用 close 函数关闭连接，那么就无法发出 FIN 报文，从而无法使得 CLOSE_WAIT 状态的连接转变为 LAST_ACK 状态。</p>
<p>所以，<strong>当服务端出现大量 CLOSE_WAIT 状态的连接的时候，说明服务端的程序没有调用 close 函数关闭连接</strong>。</p>
<p>我们先来分析一个普通的 TCP 服务端的流程：</p>
<ol>
<li>创建服务端 socket，bind 绑定端口、listen 监听端口</li>
<li>将服务端 socket 注册到 epoll</li>
<li>epoll_wait 等待连接到来，连接到来时，调用 accpet 获取已连接的 socket</li>
<li>将已连接的 socket 注册到 epoll</li>
<li>epoll_wait 等待事件发生</li>
<li>对方连接关闭时，我方调用 close</li>
</ol>
<p>可能导致服务端没有调用 close 函数的原因是：2，3，4，6步没有做</p>
<h2 id="udp" class="heading-element"><span>5 UDP</span>
  <a href="#udp" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="说说-tcp-和-udp-的区别" class="heading-element"><span>5.1 说说 TCP 和 UDP 的区别？</span>
  <a href="#%e8%af%b4%e8%af%b4-tcp-%e5%92%8c-udp-%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><table>
  <thead>
      <tr>
          <th style="text-align: center">特性</th>
          <th style="text-align: center">TCP</th>
          <th style="text-align: center">UDP</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center">连接</td>
          <td style="text-align: center">面向连接，传输数据前需建立连接</td>
          <td style="text-align: center">无需连接，立即传输数据</td>
      </tr>
      <tr>
          <td style="text-align: center">服务对象</td>
          <td style="text-align: center">一对一的两点服务</td>
          <td style="text-align: center">支持一对一、一对多、多对多的交互通信</td>
      </tr>
      <tr>
          <td style="text-align: center">可靠性</td>
          <td style="text-align: center">可靠交付，数据无差错、不丢失、不重复、按序到达</td>
          <td style="text-align: center">尽最大努力交付，不保证可靠交付数据</td>
      </tr>
      <tr>
          <td style="text-align: center">拥塞控制、流量控制</td>
          <td style="text-align: center">有拥塞控制和流量控制机制</td>
          <td style="text-align: center">无拥塞控制和流量控制机制，发送速率不受网络拥堵影响</td>
      </tr>
      <tr>
          <td style="text-align: center">首部开销</td>
          <td style="text-align: center">首部长度较长（20 字节—60字节）</td>
          <td style="text-align: center">首部只有 8 字节，且固定不变，开销较小</td>
      </tr>
      <tr>
          <td style="text-align: center">传输方式</td>
          <td style="text-align: center">字节流式传输，无边界，保证顺序和可靠</td>
          <td style="text-align: center">数据段报文传输，有边界，可能丢包和乱序</td>
      </tr>
      <tr>
          <td style="text-align: center">分片</td>
          <td style="text-align: center">在传输层进行分片，丢失分片时只重传丢失部分</td>
          <td style="text-align: center">在 IP 层进行分片，接收后在 IP 层组装再传给传输层</td>
      </tr>
      <tr>
          <td style="text-align: center">应用场景</td>
          <td style="text-align: center">文件传输、邮件传输</td>
          <td style="text-align: center">即时通讯、域名转换</td>
      </tr>
  </tbody>
</table>
<h3 id="为什么-qq-采用-udp-协议" class="heading-element"><span>5.2 为什么 QQ 采用 UDP 协议？</span>
  <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88-qq-%e9%87%87%e7%94%a8-udp-%e5%8d%8f%e8%ae%ae" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>首先，QQ 并不是完全基于 UDP 实现。<font color="red">比如在使用 QQ 进行文件传输等活动的时候，就会使用 TCP 作为可靠传输的保证</font>。</li>
<li>使用 UDP 进行交互通信的好处在于，延迟较短，对数据丢失的处理比较简单。同时，TCP 是一个全双工协议，需要建立连接，所以网络开销也会相对大。</li>
<li>如果使用 QQ 语音和 QQ 视频的话，UDP 的优势就更为突出了，首先延迟较小。最重要的一点是不可靠传输，这意味着如果数据丢失的话，不会有重传。因为用户一般来说可以接受图像稍微模糊一点，声音稍微不清晰一点，但是如果在几秒钟以后再出现之前丢失的画面和声音，这恐怕是很难接受的。</li>
<li>由于 QQ 的服务器设计容量是海量级的应用，一台服务器要同时容纳十几万的并发连接，因此服务器端只有采用 UDP 协议与客户端进行通讯才能保证这种超大规模的服务</li>
</ul>
<p>简单总结一下：UDP 协议是无连接方式的协议，它的效率高，速度快，占资源少，对服务器的压力比较小。但是其传输机制为不可靠传送，必须依靠辅助的算法来完成传输控制。<strong>QQ 采用的通信协议以 UDP 为主，辅以 TCP 协议</strong>。</p>
<h3 id="udp-协议为什么不可靠" class="heading-element"><span>5.3 UDP 协议为什么不可靠？</span>
  <a href="#udp-%e5%8d%8f%e8%ae%ae%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e5%8f%af%e9%9d%a0" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>UDP 在传输数据之前不需要先建立连接，远地主机的运输层在接收到 UDP 报文后，不需要确认，提供不可靠交付。总结就以下四点：</p>
<ul>
<li>不保证消息交付：不确认，不重传，无超时</li>
<li>不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞</li>
<li>不跟踪连接状态：不必建立连接或重启状态机</li>
<li>不进行拥塞控制：不内置客户端或网络反馈机制</li>
</ul>
<h3 id="dns-为什么要用-udp" class="heading-element"><span>5.4 DNS 为什么要用 UDP?</span>
  <a href="#dns-%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e7%94%a8-udp" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>更准确地说，DNS 既使用 TCP 又使用 UDP。</p>
<p>当进行区域传送（主域名服务器向辅助域名服务器传送变化的那部分数据）时会使用 TCP，因为数据同步传送的数据量比一个请求和应答的数据量要多，而 TCP 允许的报文长度更长，因此为了保证数据的正确性，会使用基于可靠连接的 TCP。<font color="red">即在需要可靠传输或处理大数据包的特定场景下，DNS 也会使用 TCP 以确保传输的可靠性和完整性</font>。</p>
<p>当客户端想 DNS 服务器查询域名（域名解析）的时候，一般返回的内容不会超过 UDP 报文的最大长度，即 512 字节，用 UDP 传输时，不需要创建连接，从而大大提高了响应速度，但这要求域名解析服务器和域名服务器都必须自己处理超时和重传从而保证可靠性。</p>
<h3 id="你会如何设计qq中的网络协议" class="heading-element"><span>5.5 你会如何设计QQ中的网络协议？</span>
  <a href="#%e4%bd%a0%e4%bc%9a%e5%a6%82%e4%bd%95%e8%ae%be%e8%ae%a1qq%e4%b8%ad%e7%9a%84%e7%bd%91%e7%bb%9c%e5%8d%8f%e8%ae%ae" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>首先，我们要实现登录功能，这是使用 QQ 的第一步，为了保证账号和密码的安全性，我们可以选择 TCP + SSL/TLS 协议来进行登录。</p>
<p>因为 TCP 协议是一种可靠的传输协议，能够保证数据的完整性，而 SSL/TLS 能够对通信进行加密，保证数据的安全性。</p>
<p>接下来，我们需要考虑消息传递的实时性，如语音视频通话等，这时候我们可以选择 UDP 协议。UDP 的传输速度更快，对于实时性服务来说，速度是最重要的。</p>
<h3 id="udp如何尽量保证消息的不丢失" class="heading-element"><span>5.6 UDP如何尽量保证消息的不丢失</span>
  <a href="#udp%e5%a6%82%e4%bd%95%e5%b0%bd%e9%87%8f%e4%bf%9d%e8%af%81%e6%b6%88%e6%81%af%e7%9a%84%e4%b8%8d%e4%b8%a2%e5%a4%b1" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>对于 TCP 协议来说，如果数据包在传输过程中丢失，TCP 协议会自动进行重传。</p>
<p>而对于 UDP 协议来说，我们可以通过应用层的重传机制来保证消息的不丢失。当接收方收到消息后，返回一个确认信息给发送方，如果发送方在一定时间内没有收到确认信息，就重新发送消息。</p>
<p>同时，每个消息都附带一个唯一的序列号，接收方根据序列号判断是否有消息丢失，如果发现序列号不连续，就可以要求发送方重新发送。这样还可以防止消息重复。</p>
<p>当然了，消息持久化也很重要，可以将消息保存在服务器或者本地的数据库中，即使在网络中断或者其他异常情况下，也能从数据库中恢复消息。</p>
<h2 id="quic" class="heading-element"><span>6 QUIC</span>
  <a href="#quic" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="quic是如何实现可靠传输的udp如何实现可靠传输" class="heading-element"><span>6.1 QUIC是如何实现可靠传输的？（UDP如何实现可靠传输？）</span>
  <a href="#quic%e6%98%af%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e5%8f%af%e9%9d%a0%e4%bc%a0%e8%be%93%e7%9a%84udp%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e5%8f%af%e9%9d%a0%e4%bc%a0%e8%be%93" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p><font color="red">把TCP可靠传输的特性（序号，确认应答，超时重传，流量控制）在应用层实现一遍。</font></p>
<ul>
<li><strong>基于UDP</strong>：QUIC 建立在 UDP 之上，通过在 UDP 数据报中封装自己的数据包来实现可靠传输。</li>
<li><strong>可靠传输</strong>：QUIC 提供了类似于 TCP 的可靠传输机制，包括序列号、确认应答、重传和流量控制。</li>
<li><strong>多路复用</strong>：QUIC 支持多条独立的流，解决了 TCP 的队头阻塞问题。</li>
<li><strong>拥塞控制</strong>：QUIC 实现了拥塞控制算法，确保高效的数据传输。</li>
</ul>
<h3 id="quic是如何解决tcp队头阻塞问题的" class="heading-element"><span>6.2 QUIC是如何解决TCP队头阻塞问题的？</span>
  <a href="#quic%e6%98%af%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3tcp%e9%98%9f%e5%a4%b4%e9%98%bb%e5%a1%9e%e9%97%ae%e9%a2%98%e7%9a%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>TCP的队头阻塞（Head-of-Line Blocking）问题是指在数据传输过程中，如果某个数据包丢失了，后续的数据包即使已经到达接收方，也无法被处理，因为接收方必须按顺序处理数据包。</p>
<p>QUIC通过以下机制解决了这个问题：</p>
<ol>
<li><strong>多路复用</strong>：QUIC允许多个独立的流在同一个连接中传输，每个流都有自己的序列号和确认机制。这意味着即使某个流的数据包丢失了，也不会影响其他流的数据传输。</li>
<li><strong>独立流处理</strong>：接收方可以独立处理每个流的数据包，即使某个流的数据包丢失了，接收方仍然可以处理其他流的数据包，避免了队头阻塞。</li>
</ol>
<h3 id="quic是如何做流量控制的" class="heading-element"><span>6.3 QUIC是如何做流量控制的？</span>
  <a href="#quic%e6%98%af%e5%a6%82%e4%bd%95%e5%81%9a%e6%b5%81%e9%87%8f%e6%8e%a7%e5%88%b6%e7%9a%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>QUIC的流量控制机制与TCP类似，但更为灵活和高效：</p>
<ol>
<li><strong>流级别的流量控制</strong>：每个流都有自己的流量控制窗口，发送方在发送数据之前，必须确保数据大小不超过接收方为该流设定的窗口大小。</li>
<li><strong>连接级别的流量控制</strong>：除了流级别的流量控制，QUIC还支持连接级别的流量控制，限制整个连接上的未确认数据总量，防止网络拥塞。</li>
<li><strong>动态调整窗口大小</strong>：QUIC可以根据网络状况动态调整流量控制窗口的大小，提高数据传输的效率和适应性。</li>
</ol>
<h3 id="quic是如何迁移连接的" class="heading-element"><span>6.4 QUIC是如何迁移连接的？</span>
  <a href="#quic%e6%98%af%e5%a6%82%e4%bd%95%e8%bf%81%e7%a7%bb%e8%bf%9e%e6%8e%a5%e7%9a%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>基于 TCP 传输协议的 HTTP 协议，由于是通过四元组（源 IP、源端口、目的 IP、目的端口）确定一条 TCP 连接。</p>
<p>那么<strong>当移动设备的网络从 4G 切换到 WIFI 时，意味着 IP 地址变化了，那么就必须要断开连接，然后重新建立 TCP 连接</strong>。</p>
<p>而建立连接的过程包含 TCP 三次握手和 TLS 四次握手的时延，以及 TCP 慢启动的减速过程，给用户的感觉就是网络突然卡顿了一下，因此连接的迁移成本是很高的。</p>
<p>QUIC 协议没有用四元组的方式来“绑定”连接，而是通过以下机制：</p>
<ol>
<li><strong>连接ID</strong>：QUIC为每个连接分配一个唯一的连接ID，连接ID与客户端和服务器的IP地址和端口无关。因此，即使客户端的IP地址或端口发生变化，只要连接ID不变，连接仍然有效。</li>
<li><strong>路径验证</strong>：在迁移连接时，QUIC会验证新的路径是否可用，确保数据能够通过新路径传输。</li>
<li><strong>迁移过程</strong>：当客户端检测到网络变化（例如，从WiFi切换到移动网络）时，会通知服务器新的地址和端口。服务器验证新的路径后，继续通过新的路径传输数据。</li>
<li><strong>无缝切换</strong>：通过连接ID和路径验证机制，QUIC实现了连接的无缝迁移，避免了因网络变化导致的连接中断和数据丢失。</li>
</ol>
<h2 id="ip" class="heading-element"><span>7 IP</span>
  <a href="#ip" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="ip-协议的定义和作用" class="heading-element"><span>7.1 IP 协议的定义和作用？</span>
  <a href="#ip-%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%ae%9a%e4%b9%89%e5%92%8c%e4%bd%9c%e7%94%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>IP 协议（Internet Protocol）又被称为互联网协议，是支持网间互联的数据包协议，工作在<strong>网际层</strong>，主要目的就是为了提高网络的可扩展性。</p>
<p>通过<strong>网际协议 IP</strong>，可以把参与互联的，性能各异的网络<strong>看作一个统一的网络</strong>。</p>
<p>和传输层 TCP 相比，IP 协议是一种无连接/不可靠、尽力而为的数据包传输服务，和 TCP 协议一起构成了 TCP/IP 协议的核心。</p>
<blockquote>
<p><strong>IP 协议有哪些作用？</strong></p>
</blockquote>
<p>IP 协议主要有以下几个作用：</p>
<ul>
<li><strong>寻址和路由</strong>：在 IP 数据报中携带源 IP 地址和目的 IP 地址来表示该数据包的源主机和目标主机。IP 数据报在传输过程中，每个中间节点（IP 网关、路由器）只根据网络地址来进行转发，如果中间节点是路由器，则路由器会根据路由表选择合适的路径。IP 协议根据路由选择协议提供的路由信息对 IP 数据报进行转发，直至目标主机。</li>
<li><strong>分段和重组</strong>：IP 数据报在传输过程中可能会经过不同的网络，在不同的网络中数据报的最大长度限制是不同的，IP 协议通过给每个 IP 数据报分配一个标识符以及分段与组装的相关信息，使得数据报在不同的网络中能够被传输，被分段后的 IP 数据报可以独立地在网络中进行转发，在达到目标主机后由目标主机完成重组工作，恢复出原来的 IP 数据报。</li>
<li><strong>差错处理</strong>：虽然 IP 是尽力而为的协议，不保证数据报一定到达目的地，但它包含一些基本的差错处理机制，例如校验和（checksum），用于检测数据报头部的错误。</li>
<li><strong>控制信息</strong>：IP 头部包含了多个字段，用于控制和管理数据报的传输，如生存时间（TTL，Time to Live）字段，防止数据报在网络中无限循环。</li>
</ul>
<blockquote>
<p><strong>传输层协议和网络层协议有什么区别？</strong></p>
</blockquote>
<p><font oclor="red">网络层协议负责提供主机间的逻辑通信；传输层协议负责提供进程间的逻辑通信。</font></p>
<h3 id="ip-地址有哪些分类" class="heading-element"><span>7.2 IP 地址有哪些分类？</span>
  <a href="#ip-%e5%9c%b0%e5%9d%80%e6%9c%89%e5%93%aa%e4%ba%9b%e5%88%86%e7%b1%bb" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>IP地址（Internet Protocol Address）是用于标识网络中设备的唯一地址。IP地址有两种版本：IPv4和IPv6。IPv4是目前最广泛使用的版本，IPv6是为解决IPv4地址耗尽问题而设计的新版本。</p>
<p>IPv4地址是32位长的二进制数，通常表示为四个十进制数（每个数对应8位）之间用点分隔（例如，192.168.1.1）。IPv4地址可以按其用途和结构分为A，B，C，D，E五大类：</p>
<ul>
<li>A 类地址 (1~126)：以 0 开头，网络号占前 8 位，主机号占后面 24 位，主要用于大型网络；</li>
<li>B 类地址 (128~191)：以 10 开头，网络号占前 16 位，主机号占后面 16 位，主要用于中型网络；</li>
<li>C 类地址 (192~223)：以 110 开头，网络号占前 24 位，主机号占后面 8 位，主要用于小型网络；</li>
<li>D 类地址 (224~239)：以 1110 开头，保留为多播地址，用于一对多通信；</li>
<li>E 类地址 (240~255)：以 1111 开头，保留位为将来使用，用于实验和研究。</li>
</ul>
<p>IPv4有以下特殊地址：</p>
<ul>
<li><strong>本地回环地址（Loopback Address）</strong>：127.0.0.0 到 127.255.255.255，用于主机自我测试，通常使用127.0.0.1。</li>
<li><strong>广播地址（Broadcast Address）</strong>：用于将信息发送到网络上的所有设备。例如，192.168.1.255。</li>
<li>私有地址（Private Address）：用于局域网（LAN）内部通信，不可在互联网上使用。包括以下范围：
<ul>
<li>A类：10.0.0.0 到 10.255.255.255</li>
<li>B类：172.16.0.0 到 172.31.255.255</li>
<li>C类：192.168.0.0 到 192.168.255.255</li>
</ul>
</li>
</ul>
<p>IPv6地址是128位长的二进制数，通常表示为八组十六进制数之间用冒号分隔（例如，2001:0db8:85a3:0000:0000:8a2e:0370:7334）。IPv6地址类型主要有以下几种：</p>
<ul>
<li><strong>单播地址（Unicast Address）</strong>：标识单一接口的地址。
<ul>
<li>全球单播地址（Global Unicast Address）：类似于IPv4的公有地址。</li>
<li>链路本地地址（Link-Local Address）：仅在单一链路上有效，前缀为fe80::/10。</li>
<li>站点本地地址（Site-Local Address）：类似于IPv4的私有地址，但已被弃用，前缀为fec0::/10。</li>
</ul>
</li>
<li><strong>多播地址（Multicast Address）</strong>：用于一对多通信，前缀为ff00::/8。</li>
<li><strong>任播地址（Anycast Address）</strong>：分配给多个接口，但数据包仅发送到距离最近的接口</li>
</ul>
<h3 id="域名和-ip-的关系一个-ip-可以对应多个域名吗一个域名可以对应多个ip吗" class="heading-element"><span>7.3 域名和 IP 的关系？一个 IP 可以对应多个域名吗？一个域名可以对应多个IP吗？</span>
  <a href="#%e5%9f%9f%e5%90%8d%e5%92%8c-ip-%e7%9a%84%e5%85%b3%e7%b3%bb%e4%b8%80%e4%b8%aa-ip-%e5%8f%af%e4%bb%a5%e5%af%b9%e5%ba%94%e5%a4%9a%e4%b8%aa%e5%9f%9f%e5%90%8d%e5%90%97%e4%b8%80%e4%b8%aa%e5%9f%9f%e5%90%8d%e5%8f%af%e4%bb%a5%e5%af%b9%e5%ba%94%e5%a4%9a%e4%b8%aaip%e5%90%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li><strong>域名（Domain Name）</strong>：人类可读的地址，用于标识和访问网站及其他网络资源（例如，<code>www.example.com</code>）。</li>
<li><strong>IP地址（Internet Protocol Address）</strong>：计算机可读的地址，用于标识网络中的设备（例如，<code>192.168.1.1</code>）。</li>
</ul>
<p>域名和IP地址之间是通过DNS（Domain Name System）来进行映射和解析的。</p>
<p>一个域名可以对应多个 IP，但这种情况 DNS 做负载均衡的，在用户访问过程中，一个域名只能对应一个 IP。</p>
<p>而一个IP却可以对应多个域名，是一对多的关系。</p>
<h3 id="ipv4-地址不够如何解决" class="heading-element"><span>7.4 IPV4 地址不够如何解决？</span>
  <a href="#ipv4-%e5%9c%b0%e5%9d%80%e4%b8%8d%e5%a4%9f%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>DHCP：动态主机配置协议，<font color="red">动态分配 IP 地址，只给接入网络的设备分配 IP 地址，因此同一个 MAC 地址的设备，每次接入互联网时，得到的 IP 地址不一定是相同的，该协议使得空闲的 IP 地址可以得到充分利用</font>。</li>
<li>CIDR：无类别域间路由。CIDR 消除了传统的 A 类、B 类、C 类地址以及划分子网的概念，因而更加有效地分配 IPv4 的地址空间，但无法从根本上解决地址耗尽的问题。</li>
<li>NAT：网络地址转换协议，我们知道属于不同局域网的主机可以使用相同的 IP 地址，从而一定程度上缓解了 IP 资源枯竭的问题，<font color="red">然而主机在局域网中使用的 IP 地址是不能在公网中使用的，当局域网主机想要与公网主机进行通信时，NAT 方法可以将该主机 IP 地址转换为全球 IP 地址</font>。该协议能够有效解决 IP 地址不足的问题。</li>
<li>IPv6：作为接替 IPv4 的下一代互联网协议，其可以实现 2 的 128 次方个地址，而这个数量级，即使给地球上每一粒沙子都分配一个 IP 地址也够用，该协议能够从根本上解决 IPv4 地址不够用的问题。</li>
</ul>
<h3 id="说下-arp-协议的工作过程" class="heading-element"><span>7.5 说下 ARP 协议的工作过程？</span>
  <a href="#%e8%af%b4%e4%b8%8b-arp-%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%b7%a5%e4%bd%9c%e8%bf%87%e7%a8%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>ARP（Address Resolution Protocol，地址解析协议）是用于将IP地址解析为对应物理网络地址（如MAC地址）的协议，主要在IPv4网络中使用。它在局域网（LAN）中起到了关键作用，使设备能够通过IP地址找到对应的硬件地址，从而实现数据帧在局域网中的正确传输。</p>
<ol>
<li><strong>ARP请求</strong>：当主机 A 要发送数据给主机 B 时，首先会在自己的 ARP 缓存中查找主机 B 的 MAC 地址。如果没有找到，主机 A 会向网络中广播一个 ARP 请求数据包，请求网络中的所有主机告诉它们的 MAC 地址；这个请求包含了请求设备和目标设备的 IP 和 MAC 地址。</li>
<li><strong>ARP应答</strong>：网络中的所有主机都会收到这个 ARP 请求，但只有主机 B 会回复 ARP 应答，告诉主机 A 自己的 MAC 地址。并且主机 B 会将主机 A 的 IP 和 MAC 地址映射关系缓存到自己的 ARP 缓存中，以便下次通信时直接使用。</li>
<li><strong>数据传输</strong>：在获得主机B的MAC地址后，主机A（也会将主机 B 的 IP 和 MAC 地址映射关系缓存到自己的 ARP 缓存中）就可以将目标MAC地址设置为主机B的MAC地址，从而正确地构建以太网帧并发送到局域网中，这些数据帧会通过交换机或集线器等网络设备正确地传送到主机B。</li>
</ol>
<h3 id="为什么既有-ip-地址又有-mac-地址" class="heading-element"><span>7.6 为什么既有 IP 地址，又有 MAC 地址？</span>
  <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e6%97%a2%e6%9c%89-ip-%e5%9c%b0%e5%9d%80%e5%8f%88%e6%9c%89-mac-%e5%9c%b0%e5%9d%80" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><blockquote>
<p><strong>MAC 地址和 IP 地址都有什么作用？</strong></p>
</blockquote>
<ul>
<li>MAC 地址是数据链路层和物理层使用的地址，是写在网卡上的物理地址，用来定义网络设备的位置，不可变更。</li>
<li>IP 地址是网络层和以上各层使用的地址，是一种逻辑地址。IP 地址用来区别网络上的计算机。</li>
</ul>
<blockquote>
<p><strong>为什么有了 MAC 地址还需要 IP 地址？</strong></p>
</blockquote>
<p>如果我们只使用 MAC 地址进行寻址的话，我们需要路由器记住每个 MAC 地址属于哪个子网，不然一次路由器收到数据包都要满世界寻找目的 MAC 地址。而我们知道 MAC 地址的长度为 48 位，也就是最多共有 2 的 48 次方个 MAC 地址，这就意味着每个路由器需要 256T 的内存，显然是不现实的。</p>
<p>和 MAC 地址不同，IP 地址是和地域相关的，在一个子网中的设备，我们给其分配的 IP 地址前缀都是一样的，这样路由器就能根据 IP 地址的前缀知道这个设备属于哪个子网，剩下的寻址就交给子网内部实现，从而大大减少了路由器所需要的内存。</p>
<blockquote>
<p><strong>为什么有了 IP 地址还需要 MAC 地址？</strong></p>
</blockquote>
<ul>
<li>只有当设备连入网络时，才能根据他进入了哪个子网来为其分配 IP 地址，在设备还没有 IP 地址的时候，或者在分配 IP 的过程中。我们需要 MAC 地址来区分不同的设备。</li>
<li>IP 地址可以比作为地址，MAC 地址为收件人，在一次通信过程中，两者是缺一不可的。</li>
</ul>
<h3 id="icmp-协议的功能" class="heading-element"><span>7.7 ICMP 协议的功能？</span>
  <a href="#icmp-%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%8a%9f%e8%83%bd" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>ICMP（Internet Control Message Protocol，网际控制报文协议） 是用于在IP网络中传递控制和错误信息的协议。它是在网络层（OSI模型的第三层）之上运行的协议，主要用于在IP网络中进行诊断、错误报告和控制消息的传递。ICMP协议的功能包括但不限于以下几点：</p>
<ul>
<li><strong>错误报告</strong>：ICMP用于向发送者报告网络层发生的错误，例如目标不可达、超时、路由器发生故障等。</li>
<li><strong>路由器发现</strong>：ICMP可用于路由器的发现和配置，例如路由器通告消息（Router Advertisement）和路由器请求消息（Router Solicitation）。</li>
<li><strong>Ping测试</strong>：ICMP的Echo请求和Echo应答消息被用于Ping测试，以测试主机之间的连通性和延迟。</li>
<li><strong>TTL过期</strong>：ICMP的TTL（Time to Live）过期消息用于报告数据包在网络中被丢弃的情况，通常由于数据包在转发过程中超过了其TTL值。</li>
<li><strong>片段超时</strong>：ICMP的片段超时消息用于报告IP数据报在传输过程中被丢弃的情况，通常由于数据包片段未能在超时时间内到达目的地而被丢弃。</li>
<li><strong>重定向</strong>：ICMP的重定向消息用于告知发送者修改其路由表以改进数据包的转发效率。</li>
<li><strong>MTU探测</strong>：ICMP的路径MTU探测（Path MTU Discovery）用于发现通向目标主机的最大传输单元（MTU）以避免分片。</li>
<li><strong>多播/任播测试</strong>：ICMP用于进行多播和任播地址的测试和诊断。</li>
</ul>
<p>比如我们日常使用得比较多的 <strong>ping</strong>，就是基于 ICMP 的。</p>
<p><font color="red">在 <code>IP</code> 通信中如果某个 <code>IP</code> 包因为某种原因未能达到目标地址，那么这个具体的原因将<strong>由 ICMP 负责通知</strong>。</font></p>
<p>ICMP 报文是封装在 IP 包里面，它工作在网络层，是 IP 协议的助手。</p>
<h3 id="ping的工作原理" class="heading-element"><span>7.8 ping的工作原理</span>
  <a href="#ping%e7%9a%84%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>ping，<strong>Packet Internet Groper</strong>，一个网络工具，主要用来测试网络连接的可达性和延迟。</p>
<p>ping 的过程主要基于 ICMP（Internet Control Message Protocol，互联网控制消息协议）实现，其基本过程包括：</p>
<ol>
<li>当执行 Ping 命令，如<code>ping www.google.com</code>，Ping 首先解析域名获取 IP 地址，然后向目标 IP 发送一个 ICMP Echo Request 消息。</li>
<li>当目标 IP 收到 ICMP Echo Request 消息后，它会生成一个 ICMP Echo Reply 消息并返回，即 Ping 响应消息。</li>
<li>发起 Ping 命令的设备接收到 ICMP Echo Reply 消息后，计算并显示从发送 Echo Request 到接收到 Echo Reply 的时间（通常称为往返时间 RTT，Round-Trip Time），以及可能的丢包情况。</li>
</ol>
<p>Ping 通常会发送多个请求，以便提供平均响应时间和丢包率等信息，以便我们了解网络连接的质量。</p>
<h3 id="断网了还能ping通127001吗" class="heading-element"><span>7.9 断网了，还能ping通127.0.0.1吗？</span>
  <a href="#%e6%96%ad%e7%bd%91%e4%ba%86%e8%bf%98%e8%83%bdping%e9%80%9a127001%e5%90%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>通常情况下，即使网络连接断开，也可以通过回环接口（Loopback Interface）ping通本地主机的回环地址127.0.0.1。回环地址是本地主机自身的虚拟网络接口，用于在本地主机内部进行通信，不经过物理网络设备，因此即使网络断开也可以正常工作。</p>
<p>回环接口是网络协议栈中的一个虚拟接口，用于模拟数据在网络中的传输。当数据发送到回环地址时，操作系统会将数据直接传输给回环接口，然后再从回环接口发送到目标地址，实现了数据的回环传输。</p>
<h3 id="和-localhost-以及-0000-有区别吗" class="heading-element"><span>7.10 和 localhost 以及 0.0.0.0 有区别吗</span>
  <a href="#%e5%92%8c-localhost-%e4%bb%a5%e5%8f%8a-0000-%e6%9c%89%e5%8c%ba%e5%88%ab%e5%90%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ol>
<li><strong>127.0.0.1</strong>：127.0.0.1是回环地址（Loopback Address），通常用于本地主机内部进行通信。当数据发送到127.0.0.1时，操作系统会将数据传输给回环接口，然后再从回环接口发送到目标地址，实现了数据的回环传输。127.0.0.1始终指向本地主机自身，不会通过网络传输，用于测试本地主机的网络协议栈是否正常工作以及网络服务是否可用。</li>
<li><strong>localhost</strong>：localhost是一个主机名（Hostname），通常映射到回环地址127.0.0.1。当在计算机上使用localhost时，实际上是在使用回环地址127.0.0.1，用于访问本地主机上的网络服务。localhost是一个常见的网络标识符，用于指代本地主机。</li>
<li><strong>0.0.0.0</strong>：0.0.0.0是一个特殊的IP地址，通常用于表示任意主机或任意地址。当服务器配置为监听0.0.0.0时，表示它将接受来自任何IP地址的连接，可以用于在所有可用网络接口上监听服务。在某些情况下，0.0.0.0也用于指示目标地址未指定或未知。</li>
</ol>
<h2 id="网络安全" class="heading-element"><span>8 网络安全</span>
  <a href="#%e7%bd%91%e7%bb%9c%e5%ae%89%e5%85%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="说说有哪些安全攻击" class="heading-element"><span>8.1 说说有哪些安全攻击？</span>
  <a href="#%e8%af%b4%e8%af%b4%e6%9c%89%e5%93%aa%e4%ba%9b%e5%ae%89%e5%85%a8%e6%94%bb%e5%87%bb" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>络安全攻击主要分为两种类型，<strong>被动攻击</strong>和<strong>主动攻击</strong></p>
<ul>
<li><strong>被动攻击</strong>：是指攻击者从网络上窃听他人的通信内容，通常把这类攻击称为截获，被动攻击主要有两种形式：消息内容泄露攻击和流量分析攻击。<font color="red">由于攻击者没有修改数据，使得这种攻击很难被检测到。</font></li>
<li><strong>主动攻击</strong>：直接对现有的数据和服务造成影响，常见的主动攻击类型有：
<ul>
<li><strong>篡改</strong>：攻击者故意篡改网络上送的报文，甚至把完全伪造的报文传送给接收方。</li>
<li><strong>恶意程序</strong>：恶意程序种类繁多，包括计算机病毒、计算机蠕虫、特洛伊木马、后门入侵、流氓软件等等。</li>
<li><strong>拒绝服务 Dos</strong>：攻击者向服务器不停地发送分组，使服务器无法提供正常服务。</li>
</ul>
</li>
</ul>
<h3 id="dns-劫持了解吗" class="heading-element"><span>8.2 DNS 劫持了解吗？</span>
  <a href="#dns-%e5%8a%ab%e6%8c%81%e4%ba%86%e8%a7%a3%e5%90%97" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>DNS劫持是一种网络攻击，通过篡改DNS（Domain Name System）解析结果来劫持用户的网络流量。DNS劫持攻击者会修改DNS解析请求或响应，将用户重定向到恶意网站或者欺骗页面。</p>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/DNS_Attack_Example.png" alt="03e093a40b15980c362ca54c98199b29" style="zoom:50%;" />
<p>DNS劫持可以通过多种方式实现，其中包括：</p>
<ol>
<li><strong>本地DNS劫持</strong>：攻击者在受害者计算机或网络中植入恶意软件，使其修改本地主机的DNS设置，将合法的DNS服务器替换为攻击者控制的恶意DNS服务器。</li>
<li><strong>路由器DNS劫持</strong>：攻击者入侵路由器或者通过社会工程手段获取路由器管理权限，然后修改路由器的DNS设置，使其指向恶意DNS服务器。</li>
<li><strong>ISP级别的DNS劫持</strong>：攻击者控制了受害者所使用的ISP（Internet Service Provider，互联网服务提供商）的DNS服务器，通过篡改ISP的DNS解析结果来实现DNS劫持。</li>
<li><strong>中间人攻击</strong>：攻击者通过中间人攻击拦截DNS请求或响应，然后篡改其中的域名解析结果，将用户重定向到恶意网站或者欺骗页面。</li>
</ol>
<blockquote>
<p><strong>怎么应对 DNS 劫持？</strong></p>
</blockquote>
<ul>
<li>直接通过 IP 地址访问网站，避开 DNS 劫持</li>
<li>由于域名劫持往往只能在特定的网络范围内进行，因此一些高级用户可以通过网络设置让 DNS 指向正常的域名服务器以实现对目标网址的正常访问，例如计算机首选 DNS 服务器的地址固定为 8.8.8.8。</li>
</ul>
<h3 id="什么是-csrf-攻击如何避免" class="heading-element"><span>8.3 什么是 CSRF 攻击？如何避免？</span>
  <a href="#%e4%bb%80%e4%b9%88%e6%98%af-csrf-%e6%94%bb%e5%87%bb%e5%a6%82%e4%bd%95%e9%81%bf%e5%85%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>CSRF（Cross-Site Request Forgery，跨站请求伪造）攻击是一种网络安全攻击，<font color="red">利用用户在已认证的Web应用程序上的身份验证信息执行未经授权的操</font>作。攻击者通过诱使受害者在访问包含恶意代码的网页时，触发向目标网站发送请求的行为，从而在用户不知情的情况下执行攻击者预先设定的操作，如转账、更改密码等。</p>
<p>CSRF攻击通常包含以下步骤：</p>
<ol>
<li>攻击者准备好一个包含恶意请求的页面，例如一个钓鱼网站或者注入了恶意代码的广告。</li>
<li>受害者在已经登录的情况下访问了包含恶意请求的页面。</li>
<li>受害者的浏览器自动发送了被伪造的请求到目标网站，由于受害者已经在目标网站登录，因此请求被认为是合法的，从而执行了攻击者的操作。</li>
</ol>
<p>要防止CSRF攻击，可以采取以下措施：</p>
<ol>
<li><strong>使用CSRF Token</strong>：在Web应用程序中引入CSRF Token，确保每个请求都包含一个随机生成的Token，并在服务端验证Token的有效性。攻击者无法获取到有效的CSRF Token，因此无法伪造有效的请求。</li>
<li><strong>检查Referer头</strong>：Web应用程序可以检查请求的Referer头，确保请求来自合法的来源。但需要注意的是，Referer头可能会被篡改或者缺失，因此不能单独依赖Referer头来防止CSRF攻击。</li>
<li><strong>限制敏感操作</strong>：对于涉及到敏感操作的请求，应该要求用户输入额外的身份验证信息，例如密码、验证码等，以增加攻击者执行CSRF攻击的难度。</li>
<li><strong>使用SameSite属性</strong>：在设置Cookie时，可以使用SameSite属性来限制Cookie的发送，防止第三方网站携带Cookie发送CSRF攻击。可以将Cookie设置为SameSite=Strict或者SameSite=Lax，以限制Cookie仅在同源请求中发送。</li>
<li><strong>定期审查和更新代码</strong>：定期审查和更新Web应用程序的代码，修补已知的安全漏洞，并遵循安全最佳实践，以减少CSRF攻击的风险。</li>
<li><strong>添加校验 token</strong>：以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</li>
</ol>
<h3 id="什么是-dosddosdrdos-攻击" class="heading-element"><span>8.4 什么是 DoS、DDoS、DRDoS 攻击？</span>
  <a href="#%e4%bb%80%e4%b9%88%e6%98%af-dosddosdrdos-%e6%94%bb%e5%87%bb" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>DoS（Denial of Service，拒绝服务）攻击、DDoS（Distributed Denial of Service，分布式拒绝服务）攻击和DRDoS（Distributed Reflection Denial of Service，分布式反射拒绝服务）攻击都是针对网络服务的攻击手法，旨在使目标系统无法正常提供服务，从而导致服务不可用或严重受损。</p>
<ol>
<li><strong>DoS 攻击</strong>：DoS攻击是由单个攻击者发起的攻击，通过向目标系统发送大量的请求或者恶意数据包，耗尽目标系统的资源（如带宽、处理能力、存储空间等），从而使正常用户无法访问或使用目标系统的服务。DoS攻击可以采用多种手段实现，包括网络层攻击（如SYN Flood、UDP Flood）、应用层攻击（如HTTP Flood、Slowloris攻击）等。</li>
<li><strong>DDoS 攻击</strong>：DDoS攻击是由多个攻击者协同发起的攻击，通过分布在全球各地的大量“僵尸”计算机（也称为“肉鸡”或“僵尸网络”）向目标系统发送大量的请求或者恶意数据包，造成目标系统过载，从而使其无法正常提供服务。DDoS攻击通常规模更大、更难以应对，因为攻击流量来自于多个来源，并且攻击者可以很容易地控制和伪装攻击流量的来源。</li>
<li><strong>DRDoS 攻击</strong>：DRDoS攻击是一种利用第三方系统的资源反射攻击目标系统的攻击方式。攻击者向第三方系统发送请求，伪装成目标系统的IP地址，并请求返回大量的响应数据，这些响应数据会发送到目标系统，造成目标系统的过载。DRDoS攻击利用了第三方系统的反射响应特性，使攻击者能够轻易地放大攻击流量，并且很难追溯到攻击者的真实身份。</li>
</ol>
<blockquote>
<p><strong>如何防范 DDoS?</strong></p>
</blockquote>
<p>针对 DDoS 中的流量攻击，最直接的方法是增加带宽，理论上只要带宽大于攻击流量就可以了，但是这种方法成本非常高。在有充足带宽的前提下，我们应该尽量提升路由器、网卡、交换机等硬件设施的配置。</p>
<p>针对资源耗尽攻击，我们可以升级主机服务器硬件，在网络带宽得到保证的前提下，使得服务器能够有效对抗海量的 SYN 攻击包。我们也可以安装专业的抗 DDoS 防火墙，从而对抗 SYN Flood 等流量型攻击。瓷碗，负载均衡，CDN 等技术都能有效对抗 DDos 攻击。</p>
<h3 id="什么是-xss-攻击如何避免" class="heading-element"><span>8.5 什么是 XSS 攻击，如何避免?</span>
  <a href="#%e4%bb%80%e4%b9%88%e6%98%af-xss-%e6%94%bb%e5%87%bb%e5%a6%82%e4%bd%95%e9%81%bf%e5%85%8d" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>XSS（Cross-Site Scripting，跨站脚本攻击）是一种常见的网络安全攻击，攻击者通过在受害者的浏览器中注入恶意脚本，来执行恶意操作。这些脚本通常以HTML、JavaScript等形式存在，可以窃取用户的会话信息、篡改网页内容、重定向用户到恶意网站等。XSS攻击通常分为以下几种类型：</p>
<ol>
<li><strong>存储型 XSS</strong>：攻击者将恶意脚本存储到目标网站的数据库中，当用户访问包含恶意脚本的页面时，脚本会从服务器端加载并执行。</li>
<li><strong>反射型 XSS</strong>：攻击者将恶意脚本作为参数或者URL的一部分，发送给目标用户，当用户点击恶意链接时，脚本会在用户的浏览器中执行。</li>
<li><strong>DOM-based XSS</strong>：攻击者利用客户端的DOM环境，通过修改页面的DOM结构来执行恶意脚本。</li>
</ol>
<img src="https://raw.githubusercontent.com/unique-pure/NewPicGoLibrary/main/img/typical_XSS_Example.png" alt="一个典型的 XSS" style="zoom:50%;" />
<blockquote>
<p><strong>如何应对 XSS 攻击？</strong></p>
</blockquote>
<ul>
<li>对输入进行过滤，过滤标签等，只允许合法值。</li>
<li>HTML 转义</li>
<li>对于链接跳转，如<code>&lt;a href=&quot;xxx&quot;</code> 等，要校验内容，禁止以 script 开头的非法链接。</li>
<li>限制输入长度</li>
<li>将Cookie设置为HttpOnly标志，可以防止JavaScript访问Cookie，从而减少XSS攻击的风险。</li>
</ul>
<h3 id="对称加密与非对称加密有什么区别" class="heading-element"><span>8.6 对称加密与非对称加密有什么区别？</span>
  <a href="#%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e4%b8%8e%e9%9d%9e%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e6%9c%89%e4%bb%80%e4%b9%88%e5%8c%ba%e5%88%ab" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>对称加密和非对称加密是两种常见的加密算法，它们之间有几个关键区别：</p>
<ol>
<li><strong>密钥数量</strong>：
<ul>
<li>对称加密使用相同的密钥来加密和解密数据，因此只需要一个密钥。发送方使用该密钥将数据加密，接收方使用相同的密钥将数据解密。</li>
<li>非对称加密使用一对密钥：公钥和私钥。公钥用于加密数据，私钥用于解密数据。因此，发送方使用接收方的公钥来加密数据，接收方使用自己的私钥来解密数据。</li>
</ul>
</li>
<li><strong>密钥分发</strong>：
<ul>
<li>对称加密需要确保加密和解密双方都安全地共享相同的密钥。这意味着必须在通信双方之间建立一个安全的渠道来传输密钥，否则密钥可能会被窃取或篡改。</li>
<li>非对称加密不需要在通信双方之间共享密钥。接收方将自己的公钥公开发布，发送方使用该公钥加密数据，接收方使用自己的私钥解密数据。因此，不需要建立安全的通道来传输密钥。</li>
</ul>
</li>
<li><strong>性能</strong>：
<ul>
<li>对称加密通常比非对称加密更快速，因为它使用的密钥较少，加密和解密过程更简单。</li>
<li>非对称加密通常比对称加密更慢，因为它使用更复杂的数学运算来加密和解密数据。</li>
</ul>
</li>
<li><strong>适用场景</strong>：
<ul>
<li>对称加密通常用于加密大量数据，如传输文件或通信内容。</li>
<li>非对称加密通常用于加密小块数据，如数字签名、SSL/TLS握手过程等。</li>
</ul>
</li>
</ol>
]]></description></item></channel></rss>