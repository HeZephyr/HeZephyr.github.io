<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>树状数组 - 标签 | ZephyrHe</title><link>https://lruihao.cn/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link><description>树状数组 - 标签 | ZephyrHe</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>unique.hzf@gmail.com (HeZephyr)</managingEditor><webMaster>unique.hzf@gmail.com (HeZephyr)</webMaster><copyright>本站内容采用 CC BY-NC-SA 4.0 国际许可协议。</copyright><lastBuildDate>Tue, 27 Apr 2021 19:58:24 +0000</lastBuildDate><atom:link href="https://lruihao.cn/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/" rel="self" type="application/rss+xml"/><item><title>树状数组详解(一维+二维+差分+前缀和+公式优化)</title><link>https://lruihao.cn/posts/02.%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 27 Apr 2021 19:58:24 +0000</pubDate><author>HeZephyr</author><guid>https://lruihao.cn/posts/02.%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E8%AF%A6%E8%A7%A3/</guid><description><![CDATA[<h2 id="问题引入" class="heading-element"><span>1 问题引入</span>
  <a href="#%e9%97%ae%e9%a2%98%e5%bc%95%e5%85%a5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>有这样一个问题:现在有这样一个数列$a$，你需要进行下面两种操作：</p>
<ul>
<li>将某一个数加上 $x$</li>
<li>求出某区间$[l,r]$每一个数的和</li>
</ul>
<p>数列长度为$n( 1\leq n \leq 10^5)$，操作总数为$p(1\leq p \leq 10^5)$，时间限制为$1s$，如果是你你该如何处理？</p>
<p>我们先来看看暴力能否出奇迹，==对于单点修改操作，我们确实能在$O(1)$的时间完成，而对于区间求和操作，那么我们累加求和的时间复杂度为$O(r-l+1)$，在最坏的情况下，高达$O(n)$== ，这样算下来，处理这个问题需要$O(np)$的时间复杂度，$1s$是处理不完的。</p>
<p>那么，区间求和前缀和又是否可以呢？我们发现，如果用前缀和处理实际上就是让区间求和变为$O(1)$，而让单点修改就变为$O(n)$了，这样并没有任何变化。所以暴力做法肯定是不行的。</p>
<p>学过线段树的同学一定知道怎么写这道题，没学过的可以去学习下，这里指路一篇$blog$:<a href="https://blog.csdn.net/hzf0701/article/details/107859659?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161943932916780271515336%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=161943932916780271515336&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-107859659.nonecase&amp;utm_term=%E7%BA%BF%E6%AE%B5%E6%A0%91"target="_blank" rel="external nofollow noopener noreferrer">线段树入门<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>但是，这道题用线段树未免也太大材小用了,况且线段树的代码量也十分多，所以树状数组就出现了，代码量少，简单易实现。我们继续往下看。</p>
<h2 id="树状数组单点修改区间查询" class="heading-element"><span>2 树状数组（单点修改，区间查询）</span>
  <a href="#%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84%e5%8d%95%e7%82%b9%e4%bf%ae%e6%94%b9%e5%8c%ba%e9%97%b4%e6%9f%a5%e8%af%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li><strong>树状数组简单剖析</strong></li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6ZjA3MDE%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20240728144649066.png?size=large" data-thumbnail="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6ZjA3MDE%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20240728144649066.png?size=small" data-sub-html="<h2>https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6ZjA3MDE%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20240728144649066.png</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6ZjA3MDE%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20240728144649066.png" alt="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6ZjA3MDE%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20240728144649066.png" srcset="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6ZjA3MDE%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20240728144649066.png?size=small, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6ZjA3MDE%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20240728144649066.png?size=medium 1.5x, https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6ZjA3MDE%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20240728144649066.png?size=large 2x" data-title="https://raw.githubusercontent.com/HeZephyr/NewPicGoLibrary/main/img/watermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h6ZjA3MDE%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70-20240728144649066.png" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<p>其中$A$数组是原数组，而$C$数组就是树状数组。为什么要一开始就放图呢？我们来发现一下它们的规律：</p>
<p>$C1 = A1$
$C2 = A1+A2$
$C3 = A3$
$C4 = A1+A2+A3+A4$
$C5 = A5$
$C6 = A5+A6$
$C7 = A7$
$C8 = A1+A2+A3+A4+A5+A6+A7+A8$</p>
<p>我们不难发现：$C[i] = A[i - 2^k+1] + A[i - 2^k+2] + &hellip; + A[i];$， //$k$为$i$的二进制中从最低位到高位连续零的长度，==换句话说，$C[i]$管辖了包括$A[i]$自己的前$2^k$个元素== ，这样的好处是什么呢？我们发现，如果对某个元素更改了，那么我们只需要更改管辖了这个元素的$C$，那么如果对某个区间$[l,r]$求和，那么我们相当于求$SUM[r]-SUM[l-1]$，而求$SUM[i]$也特别简单，我们只需要求$i$这个点管辖的区间和$C[i]$并统计，再往前跳到未被$i$管辖的区间累加$C$即可，直到到达数组头部。也就是$SUM[i] = C[i] + C[i-2^{k_1 }]+ C[(i - 2^k_1) - 2^k_2] + &hellip;..；$。</p>
<ul>
<li><strong>lowbit函数求解$2^k$</strong></li>
</ul>
<p>那么关键的一个问题来了，我们怎么求$2^k$，我们知道$k$为$i$的二进制中从最低位到高位连续零的长度，所以$2^k=i&amp;(i-1)$，这里不予证明。求$2^k$一般用一个函数来描述，即$lowbit$。如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">lowbit</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="o">&amp;</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><strong>add函数：单点修改</strong></p>
<p>对于单点修改，我们实际上很好处理，只需要将管辖这个点的$C$全部加上$x$即可，如下：</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">pos</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span><span class="o">+=</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">pos</span><span class="o">+=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><strong>getSum函数：区间求和</strong></p>
<p>区间求和就是上文中利用的原理，我们很容易就能实现，我们首先要能求前$i$个元素的和，如下：</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">pos</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">ans</span><span class="o">+=</span><span class="n">c</span><span class="p">[</span><span class="n">pos</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">pos</span><span class="o">-=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>​		那么，$[l,r]$区间的和自然易得，即为：<code>getSum(r)-getSum(l-1)</code>。</p>
<ul>
<li>
<p><strong>时间复杂度分析</strong></p>
<p>不难，发现，树状数组实际上就是一棵树，其有$n$个结点，那么易知在单点修改和区间求和的问题处理上都能在$O(log_2n)$的时间内完成。所以总体时间复杂度为$O(nlog_2n)$，是非常有效的。</p>
</li>
</ul>
<h2 id="差分树状数组区间修改单点查询" class="heading-element"><span>3 差分树状数组（区间修改，单点查询）</span>
  <a href="#%e5%b7%ae%e5%88%86%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84%e5%8c%ba%e9%97%b4%e4%bf%ae%e6%94%b9%e5%8d%95%e7%82%b9%e6%9f%a5%e8%af%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li>
<p><strong>原理</strong></p>
<p>我们首先要知道差分数组是什么，和前缀和数组其实离不开关系，$c[i]=SUM[i]-SUM[i-1]$，其中原数组相当于可以看成是存储了相邻两个前缀和的差值，那么映射到差分数组（因为原数组可以看成是存储了差分数组的前缀和）我们可以看成就是存储了相邻两个数之间的差值，即$d[i]=c[i]-c[i-1]$，而$d[1]=c[1]-c[0]=c[1]$，所以我们利用这个关系可以推导出:$a[i]=d[1]+d[2]+&hellip;+d[i]$，那么我们就是将单点查询转化为区间求和了，那么如果对于区间修改呢？对于差分数组，假设修改区间$[l,r]$，让这个区间每个元素$+x$，我们只需要更改$d[l]=d[l]+x$，$d[r+1]=d[r+1]-x$，这样我们保证只会影响到$[l,r]$这个区间的元素。==故我们通过差分把这个区间修改、单点查询的问题转化为单点修改区间查询的问题，那么我们存储的树状数组实际和是哪个存储是差分数组的树状数组。==</p>
</li>
</ul>
<h2 id="差分树状数组公式优化区间修改区间查询" class="heading-element"><span>4 差分树状数组+公式优化（区间修改，区间查询）</span>
  <a href="#%e5%b7%ae%e5%88%86%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84%e5%85%ac%e5%bc%8f%e4%bc%98%e5%8c%96%e5%8c%ba%e9%97%b4%e4%bf%ae%e6%94%b9%e5%8c%ba%e9%97%b4%e6%9f%a5%e8%af%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li>
<p><strong>原理</strong></p>
<p>刚刚结束了利用差分实现区间修改，单点查询，而对于区间查询，这确实也是个问题。如果我们知道了区间查询，实际上这种类型的题我们就没必要使用线段树去写了，直接用树状数组就可以解决。我们来看，实际上还是利用差分数组，那么如何将区间查询的时间复杂度也变为$O(log_2n)$呢，区间查询的基础是快速求出数组$a[1:n]$的前缀和，而显然数组$a[1:n]$的前缀和为
$$a[1]+a[2]+&hellip;+a[i]=d[1]<em>i+d[2]</em>(i-1)+&hellip;+d[i]<em>1=d[1]</em>(i+1)+d[2]<em>(i+1)+&hellip;+d[i]</em>(i+1)-(d[1]*1+d[2]*2+&hellip;+d[i]<em>i)\
=(i+1)</em>(d[1]+d[2]+&hellip;+d[i])-(d[1]*1+d[2]*2+&hellip;+d[i]*i)$$
，所以我们就可以在原来的数组$c[i]$记录$d[i]$的基础上。再开一个数组记录$d[i]*i$即可。这样，我们就实现了区间查询。</p>
</li>
</ul>
<h2 id="二维树状数组单点修改区间查询" class="heading-element"><span>5 二维树状数组（单点修改，区间查询）</span>
  <a href="#%e4%ba%8c%e7%bb%b4%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84%e5%8d%95%e7%82%b9%e4%bf%ae%e6%94%b9%e5%8c%ba%e9%97%b4%e6%9f%a5%e8%af%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li>
<p><strong>解释</strong></p>
<p>数组$C[x]$记录了的是右端点为$x$、长度为$lowbit(x)$的区间的区间和。那么我们也可以类似地定义$C[x][y]$记录的是右下角为$(x,y)$，高为 $lowbit(x)$，宽为$lowbit(y) $的区间的区间和。那么按照一维树状数组去处理即可，这里给出这三个函数。</p>
</li>
<li>
<p><strong>$lowbit$函数</strong></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">lowbit</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="o">&amp;</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>$add$函数</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span><span class="kt">int</span> <span class="n">value</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//在(x,y)处增加value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">x</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">+=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">i</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">y</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">+=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">j</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">            <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">+=</span><span class="n">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>$getSum$函数</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">getSum</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//如果求解[x1,y1]~[x2,y2]之间的和，那么就是getSum(x2,y2)-getSum(x2,y1)-getSum(x1,y2)+getSum(x1,y1).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">x</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">-=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">i</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">y</span><span class="p">;</span><span class="n">j</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">-=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">j</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">            <span class="n">ans</span><span class="o">+=</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二维差分树状数组区间修改单点查询" class="heading-element"><span>6 二维差分树状数组（区间修改，单点查询）</span>
  <a href="#%e4%ba%8c%e7%bb%b4%e5%b7%ae%e5%88%86%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84%e5%8c%ba%e9%97%b4%e4%bf%ae%e6%94%b9%e5%8d%95%e7%82%b9%e6%9f%a5%e8%af%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li>
<p><strong>二维差分树状数组推导</strong></p>
<p>处理这个问题，我们首先要知道二维差分数组怎么表示，那么还是和二维前缀和数组联系起来，即$c[i,j]=SUM[i,j]-SUM[i-1,j]-SUM[i,j-1]+SUM[i-1,j-1]$，原数组实际上就可以看做是存储了$(i,j)$的前缀和与$(i-1,j)$和$(i,j-1)$的前缀和的差值。 ==那么映射到二维差分数组即是$d[i,j]=c[i,j]-c[i-1,j]-c[i,j-1]+c[i-1,j-1]$，其中$d[1,1]=c[1,1]$，那么$c[n][m]=\sum_{i=1}^{n}\sum_{j=1}^{m}d[i][j]$，所以对于区间修改，我们是给$(x_1,y_1),(x_2,y_2)$之间形成的矩阵加上$x$，那么实际上我们只需要变动四个点，$d[x_1][x_2]+=x,d[x_1][y_2]-=x,d[x_2][y_1]-=x,d[x_2][y_2]+=x$== ，那么这样就和一维差分数组一样了，区间修改单点查询问题我们利用二维差分数组就可以转化为单点修改区间查询了，我们的树状数组则是建立二维差分树状数组。那么这样这三个函数同理也很简单的就可以写出来了。</p>
</li>
</ul>
<h2 id="二维差分树状数组公式推导区间修改区间查询" class="heading-element"><span>7 二维差分树状数组+公式推导（区间修改，区间查询）</span>
  <a href="#%e4%ba%8c%e7%bb%b4%e5%b7%ae%e5%88%86%e6%a0%91%e7%8a%b6%e6%95%b0%e7%bb%84%e5%85%ac%e5%bc%8f%e6%8e%a8%e5%af%bc%e5%8c%ba%e9%97%b4%e4%bf%ae%e6%94%b9%e5%8c%ba%e9%97%b4%e6%9f%a5%e8%af%a2" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li>
<p><strong>推导</strong></p>
<p>和一维的一样，如果我们需要求解$(x_1,y_1)$和$(x_2,y_2)$形成矩阵的和，同时又要实现区间修改，那么在原有的二维差分树状数组是行不通的，那么我们就需要将区间查询的时间复杂度也降为$log_2n$，我们知道$SUM[i][j]=\sum_{x=1}^i\sum_{y=1}^ja[x][y]$，而$a[x][y]=\sum_{u=1}^x\sum_{v=1}^yd[u][v]$，则$SUM[i][j]=\sum_{x=1}^i\sum_{y=1}^j\sum_{u=1}^x\sum_{v=1}^yd[u][v]$，由于这个公式非常复杂，所以我们可以按照一维差分树状数组那样来统计$d[u][v]$出现了多少次，我们发现，从$a[1][1]$到$a[i][j]$，$d[1][1]$都需要出现一次，则$d[1][1]$出现了$i\times j$次，那么同理$d[1][2]$出现了$i*(j-1)$次，其余同等规律。所以
$$SUM[i][j]=\sum_{x=1}^i\sum_{y=1}^jd[x][y]<em>(i+1-x)</em>(j+1-y)$$</p>
<p>，我们同样可以将这样拆分成四个部分，即
$$SUM[i][j]=(i+1)<em>(j+1)\sum_{x=1}^i\sum_{y=1}^jd[x][y]-(j+1)</em>\sum_{x=1}^i\sum_{y=1}^jx<em>d[x][y]-(i+1) \sum_{x=1}^i\sum_{y=1}^jy</em>d[x][y]+\sum_{x=1}^i\sum_{y=1}^jx<em>y</em>d[x][y]
$$。所以我们只需要在原来$C1[i][j]$记录$d[i][j]$的基础上，再开三个树状数组记录$d[i][j]*i,d[i][j]*j,d[i][j]*ij$即可。这样就可以通过数组$a[i][j]$的差分数组$d[i][j]$来得到$a[i][j]$的前缀和数组$SUM[i][j]$了。</p>
</li>
</ul>
]]></description></item></channel></rss>