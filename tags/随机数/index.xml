<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>随机数 - 标签 | ZephyrHe</title><link>https://lruihao.cn/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/</link><description>随机数 - 标签 | ZephyrHe</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>unique.hzf@gmail.com (HeZephyr)</managingEditor><webMaster>unique.hzf@gmail.com (HeZephyr)</webMaster><copyright>本站内容采用 CC BY-NC-SA 4.0 国际许可协议。</copyright><lastBuildDate>Wed, 27 Mar 2024 22:20:31 +0000</lastBuildDate><atom:link href="https://lruihao.cn/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/" rel="self" type="application/rss+xml"/><item><title>如何使用C语言从一定范围内生成随机整数？</title><link>https://lruihao.cn/posts/02.c%E8%AF%AD%E8%A8%80%E5%A6%82%E4%BD%95%E4%BB%8E%E4%B8%80%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0/</link><pubDate>Wed, 27 Mar 2024 22:20:31 +0000</pubDate><author>HeZephyr</author><guid>https://lruihao.cn/posts/02.c%E8%AF%AD%E8%A8%80%E5%A6%82%E4%BD%95%E4%BB%8E%E4%B8%80%E5%AE%9A%E8%8C%83%E5%9B%B4%E5%86%85%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0/</guid><description><![CDATA[<p><a href="https://stackoverflow.com/questions/2509679/how-to-generate-a-random-integer-number-from-within-a-range"target="_blank" rel="external nofollow noopener noreferrer">出处<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>如何使用C语言生成随机数？例如希望生成一段特定范围的随机数，如$[1,6]$来模拟掷骰子。</p>
<blockquote>
<p>到目前为止，所有答案在数学上都是错误的。返回 <code>rand() % N</code> 并不统一给出 <code>[0, N)</code> 范围内的数字，除非 <code>N</code> 除以 <code>rand()</code> 返回的区间长度（即是 2 的幂）。此外，我们不知道 <code>rand()</code> 的模数是否独立：它们有可能是 <code>0, 1, 2, ...</code> ，这是均匀的但不是很随机。唯一似乎合理的假设是 <code>rand()</code> 给出泊松分布：任何两个相同大小的非重叠子区间均可能且独立。对于一组有限的值，这意味着均匀分布，并且还确保 <code>rand()</code> 的值很好地分散。</p>
<p>这意味着更改 <code>rand()</code> 范围的唯一正确方法是将其分为多个框；例如，如果 <code>RAND_MAX == 11</code> 并且您想要 <code>1..6</code> 的范围，则应将 <code>{0,1}</code> 分配给 1，将 <code>{2,3}</code> 分配给 2，依此类推在。这些是不相交的、大小相等的区间，因此是均匀且独立分布的。</p>
<p>使用浮点除法的建议在数学上是合理的，但原则上存在舍入问题。也许 <code>double</code> 的精度足以使其工作；也许不是。我不知道，也不想弄清楚；无论如何，答案取决于系统。</p>
<p>正确的方法是使用整数运算。也就是说，您想要如下所示的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt; // For random(), RAND_MAX</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Assumes 0 &lt;= max &lt;= RAND_MAX
</span></span></span><span class="line"><span class="cl"><span class="c1">// Returns in the closed interval [0, max]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">long</span> <span class="nf">random_at_most</span><span class="p">(</span><span class="kt">long</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">long</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// max &lt;= RAND_MAX &lt; ULONG_MAX, so this is okay.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">num_bins</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">max</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">num_rand</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="n">RAND_MAX</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">bin_size</span> <span class="o">=</span> <span class="n">num_rand</span> <span class="o">/</span> <span class="n">num_bins</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">defect</span>   <span class="o">=</span> <span class="n">num_rand</span> <span class="o">%</span> <span class="n">num_bins</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">x</span> <span class="o">=</span> <span class="nf">random</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// This is carefully written not to overflow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">while</span> <span class="p">(</span><span class="n">num_rand</span> <span class="o">-</span> <span class="n">defect</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Truncated division is intentional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="n">x</span><span class="o">/</span><span class="n">bin_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>为了获得完全均匀的分布，循环是必要的。例如，如果给你 0 到 2 之间的随机数，而你只想要 0 到 1 之间的数字，你就继续拉，直到没有 2 为止；不难检查这是否以相同的概率给出 0 或 1。 这里使用 <code>random()</code> 而不是 <code>rand()</code> 因为它具有更好的分布（如 <code>rand()</code> 的手册页所述）。</p>
<p>如果你想获得默认范围 <code>[0, RAND_MAX]</code> 之外的随机值，那么你必须做一些棘手的事情。也许最方便的方法是定义一个函数 <code>random_extended()</code> 提取 <code>n</code> 位（使用 <code>random_at_most()</code> ）并返回 <code>[0, 2**n)</code> ，然后应用 <code>random_at_most()</code> 用 <code>random_extended()</code> 代替 <code>random()</code> （并用 <code>2**n - 1</code> 代替 <code>RAND_MAX</code> ）来提取随机值小于 <code>2**n</code> ，假设您有一个可以保存这样的值的数字类型。最后，当然，您可以使用 <code>min + random_at_most(max - min)</code> 获取 <code>[min, max]</code> 中的值，包括负值。</p>
</blockquote>
<p>这段代码通过以下方式确保生成的随机数在闭区间 [0, max] 内均匀分布：</p>
<ol>
<li><strong>确定随机数的范围和数量</strong>：
<ul>
<li><code>num_bins</code> 表示生成的随机数的数量，即 <code>max</code> 的值加一，因为随机数生成器的范围是左闭右开的。</li>
<li><code>num_rand</code> 表示随机数生成器的最大值加一，表示总的可能的随机数的数量。</li>
</ul>
</li>
<li><strong>计算每个区间的大小</strong>：
<ul>
<li><code>bin_size</code> 表示每个区间的大小，即将随机数的总数量除以可能的随机数的数量，以确保每个随机数的概率相等。</li>
</ul>
</li>
<li><strong>处理不能均匀分配的情况</strong>：
<ul>
<li><code>defect</code> 表示随机数总数量除以可能的随机数数量的余数，用于处理不能均匀分配的情况。</li>
</ul>
</li>
<li><strong>生成随机数并检查范围</strong>：
<ul>
<li>使用 <code>do-while</code> 循环来生成随机数，并检查生成的随机数是否在指定的范围内，如果不在范围内则重新生成，直到生成的随机数在指定范围内。</li>
</ul>
</li>
<li><strong>返回均匀分布的随机数</strong>：
<ul>
<li>将生成的随机数除以区间大小得到的结果，即在闭区间 [0, max] 内均匀分布的随机数。</li>
</ul>
</li>
</ol>
<p>通过以上步骤，代码确保了生成的随机数在指定范围内且分布均匀。</p>
]]></description></item></channel></rss>